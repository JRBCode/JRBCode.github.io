<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java-JDBC基础知识</title>
    <url>/posts/89b33f03.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>Java数据库连接，（<code>Java Database Connectivity</code>，简称<kbd>JDBC</kbd>）是Java语言中用来规范<code>客户端程序</code>如何来<code>访问数据库</code>的<code>应用程序接口</code>，提供了诸如查询和更新数据库中数据的方法。<code>JDBC</code>也是<code>Sun Microsystems</code>的商标。我们通常说的<code>JDBC</code>是<code>面向关系型数据库</code>的。</p>
</blockquote>
<a id="more"></a>

<h1 id="连接数据库"><a href="#连接数据库" class="headerlink" title="连接数据库"></a>连接数据库</h1><ol>
<li>导入mysql-jdbc的jar包</li>
</ol>
<blockquote>
<p>访问MySQL数据库需要用到第三方的类，为了代码能够使用第三方的类，需要为项目导入mysql的专用Jar包。</p>
<p>连接数据库用到的包为：<strong>mysql-connector-java-5.0.8-bin.jar</strong></p>
<p>通常都会把项目用到的jar包统一放在项目的lib目录下。</p>
</blockquote>
<ol start="2">
<li>初始化驱动</li>
</ol>
<blockquote>
<p>通过<code>Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</code> 初始化驱动类<code>com.mysql.jdbc.Driver</code></p>
<p>就在 <code>mysql-connector-java-5.0.8-bin.jar</code>中，如果忘记了第一个步骤的导包，就会抛出<code>ClassNotFoundException</code></p>
<p><code>Class.forName</code>是把这个类加载到<code>JVM</code>中，加载的时候，就会执行其中的静态初始化块，完成驱动的初始化的相关工作。</p>
</blockquote>
<ol start="3">
<li>建立与数据库的连接</li>
</ol>
<blockquote>
<p>建立与数据库的Connection连接，这里需要提供：</p>
</blockquote>
<ul>
<li>数据库所处于的ip:127.0.0.1 (本机)</li>
<li>数据库的端口号： 3306 （mysql专用端口号）</li>
<li>数据库名称 how2java</li>
<li>编码方式 UTF-8</li>
<li>账号 root</li>
<li>密码 admin</li>
</ul>
<p><strong>注</strong>： 这一步要成功执行，必须建立在mysql中有数据库how2java的基础上，若没有创建数据库，可执行以下SQL语句来创建数据库：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> how2java</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>创建Statement</li>
</ol>
<blockquote>
<p>Statement是用于执行SQL语句的，比如增加，删除</p>
</blockquote>
<ol start="5">
<li>执行SQL语句</li>
</ol>
<blockquote>
<p><code>s.execute</code>执行sql语句执行成功后，用mysql-front进行查看，明确插入成功</p>
<p>执行SQL语句之前要确保数据库how2java中有表hero的存在，如果没有，需要事先创建表：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hero (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) ,</span><br><span class="line">  hp <span class="built_in">float</span> ,</span><br><span class="line">  damage <span class="built_in">int</span>(<span class="number">11</span>) ,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">)  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>关闭连接</li>
</ol>
<blockquote>
<p>数据库的连接是有限资源，相关操作结束后，养成关闭数据库的好习惯</p>
<p>先关闭Statement，后关闭Connection</p>
</blockquote>
<p><strong>上述步骤所有代码如下：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        Connection c = <span class="keyword">null</span>;</span><br><span class="line">        Statement s = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//初始化驱动</span></span><br><span class="line">            <span class="comment">//驱动类com.mysql.jdbc.Driver</span></span><br><span class="line">            <span class="comment">//就在 mysql-connector-java-5.0.8-bin.jar中</span></span><br><span class="line">            <span class="comment">//如果忘记了第一个步骤的导包，就会抛出ClassNotFoundException</span></span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 建立与数据库的Connection连接</span></span><br><span class="line">            <span class="comment">// 这里需要提供：</span></span><br><span class="line">            <span class="comment">// 数据库所处于的ip:127.0.0.1 (本机)</span></span><br><span class="line">            <span class="comment">// 数据库的端口号： 3306 （mysql专用端口号）</span></span><br><span class="line">            <span class="comment">// 数据库名称 how2java</span></span><br><span class="line">            <span class="comment">// 编码方式 UTF-8</span></span><br><span class="line">            <span class="comment">// 账号 root</span></span><br><span class="line">            <span class="comment">// 密码 admin</span></span><br><span class="line">            c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, <span class="string">"root"</span>,</span><br><span class="line">                    <span class="string">"admin"</span>);</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 注意：使用的是 java.sql.Statement</span></span><br><span class="line">            <span class="comment">// 不要不小心使用到： com.mysql.jdbc.Statement;</span></span><br><span class="line">            s = c.createStatement();</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 准备sql语句</span></span><br><span class="line">            <span class="comment">// 注意： 字符串要用单引号'</span></span><br><span class="line">            String sql = <span class="string">"insert into hero values(null,"</span> + <span class="string">"'提莫'"</span> + <span class="string">","</span> + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line"> </span><br><span class="line">            s.execute(sql);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 数据库的连接时有限资源，相关操作结束后，养成关闭数据库的好习惯</span></span><br><span class="line">            <span class="comment">// 先关闭Statement</span></span><br><span class="line">            <span class="keyword">if</span> (s != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    s.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">// 后关闭Connection</span></span><br><span class="line">            <span class="keyword">if</span> (c != <span class="keyword">null</span>)</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    c.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                    <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>使用try-with-resource的方式自动关闭连接</li>
</ol>
<blockquote>
<p>如果觉得上一步的关闭连接的方式很麻烦，可以参考<code>关闭流</code>的方式，使用<code>try-with-resource</code>的方式自动关闭连接，因为<code>Connection</code>和<code>Statement</code>都实现了<code>AutoCloseable</code>接口</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();             </span><br><span class="line">        )</span><br><span class="line">        &#123;</span><br><span class="line">            String sql = <span class="string">"insert into hero values(null,"</span> + <span class="string">"'提莫'"</span> + <span class="string">","</span> + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line">              </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="增加-删除-修改"><a href="#增加-删除-修改" class="headerlink" title="增加/删除/修改"></a>增加/删除/修改</h1><blockquote>
<p><code>CRUD</code>是最常见的数据库操作，即增删改查</p>
</blockquote>
<ul>
<li>C 增加(Create)</li>
<li>R 读取查询(Retrieve)</li>
<li>U 更新(Update)</li>
<li>D 删除(Delete)</li>
</ul>
<p>在JDBC中增加，删除，修改的操作都很类似，只是传递不同的SQL语句就行了。<br>查询因为要返回数据，所以和上面的不一样，后面会有介绍。</p>
<h2 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h2><blockquote>
<p>同上面连接数据库的代码相同</p>
</blockquote>
<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();             </span><br><span class="line">        )</span><br><span class="line">        &#123;</span><br><span class="line">            String sql = <span class="string">"delete from hero where id = 5"</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line">               </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">        <span class="keyword">try</span> (</span><br><span class="line">            Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();             </span><br><span class="line">        )</span><br><span class="line">        &#123;</span><br><span class="line">            String sql = <span class="string">"update hero set name = 'name 5' where id = 3"</span>;</span><br><span class="line">            s.execute(sql);</span><br><span class="line">               </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h1><ol>
<li>查询语句</li>
</ol>
<blockquote>
<p><code>executeQuery</code> 执行SQL查询语句</p>
</blockquote>
<p><strong>注意</strong>： 在取第二列的数据的时候，用的是rs.get(2) ，而不是get(1). 这个是整个Java自带的api里唯二的地方，使用 <strong>基1</strong> 的，即2就代表第二个。另一个地方是在<code>PreparedStatement</code>这里。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>); Statement s = c.createStatement();) &#123;</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"select * from hero"</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 执行查询语句，并把结果集返回给ResultSet</span></span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="string">"id"</span>);<span class="comment">// 可以使用字段名</span></span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);<span class="comment">// 也可以使用字段的顺序</span></span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                System.out.printf(<span class="string">"%d\t%s\t%f\t%d%n"</span>, id, name, hp, damage);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 不一定要在这里关闭ReultSet，因为Statement关闭的时候，会自动关闭ResultSet</span></span><br><span class="line">            <span class="comment">// rs.close();</span></span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200716151202189.png" alt=""></p>
<ol start="2">
<li>SQL语句判断账号密码是否正确</li>
</ol>
<ul>
<li>创建一个用户表，有字段name,password</li>
<li>插入一条数据</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">user</span> (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">30</span>) ,</span><br><span class="line">  <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">30</span>),</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="keyword">id</span>)</span><br><span class="line">) ;</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">user</span> <span class="keyword">values</span>(<span class="literal">null</span>,<span class="string">'dashen'</span>,<span class="string">'thisispassword'</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>SQL语句判断账号密码是否正确</li>
</ul>
<blockquote>
<p>判断账号密码的正确方式是根据账号和密码到表中去找数据，如果有数据，就表明密码正确了，如果没数据，就表明密码错误。</p>
<p>不恰当的方式 是把uers表的数据全部查到内存中，挨个进行比较。 如果users表里有100万条数据呢？ 内存都不够用的。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">                Statement s = c.createStatement();</span><br><span class="line">                 </span><br><span class="line">                ) &#123;</span><br><span class="line">            String name = <span class="string">"dashen"</span>;</span><br><span class="line">            <span class="comment">//正确的密码是：thisispassword</span></span><br><span class="line">            String password = <span class="string">"thisispassword1"</span>;</span><br><span class="line">   </span><br><span class="line">            String sql = <span class="string">"select * from user where name = '"</span> + name +<span class="string">"' and password = '"</span> + password+<span class="string">"'"</span>;</span><br><span class="line">              </span><br><span class="line">            <span class="comment">// 执行查询语句，并把结果集返回给ResultSet</span></span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">              </span><br><span class="line">            <span class="keyword">if</span>(rs.next())</span><br><span class="line">                System.out.println(<span class="string">"账号密码正确"</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                System.out.println(<span class="string">"账号密码错误"</span>);</span><br><span class="line">             </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>获取总数</li>
</ol>
<p>执行的sql语句为</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">from</span> hero</span><br></pre></td></tr></table></figure>

<p>然后通过ResultSet获取出来：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,</span><br><span class="line">                <span class="string">"root"</span>, <span class="string">"admin"</span>); Statement s = c.createStatement();) &#123;</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"select count(*) from hero"</span>;</span><br><span class="line"> </span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                total = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            System.out.println(<span class="string">"表Hero中总共有:"</span> + total+<span class="string">" 条数据"</span>);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/2020071615154581.png" alt=""></p>
<h1 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement"></a>PreparedStatement</h1><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><blockquote>
<p>和<code>Statement</code>一样，<code>PreparedStatement</code>也是用来执行sql语句的</p>
<p>与创建Statement不同的是，需要根据sql语句创建PreparedStatement</p>
<p>除此之外，还能够通过设置参数，指定相应的值，而不是Statement那样使用字符串拼接</p>
</blockquote>
<p><strong>注</strong>： 这是JAVA里<code>唯二</code>的 <strong>基1</strong> 的地方，另一个是查询语句中的<code>ResultSet</code>也是基1的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            <span class="comment">// 根据sql语句创建PreparedStatement</span></span><br><span class="line">            PreparedStatement ps = c.prepareStatement(sql);</span><br><span class="line">        ) &#123;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">// 设置参数</span></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"提莫"</span>);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, <span class="number">313.0f</span>);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, <span class="number">50</span>);</span><br><span class="line">            <span class="comment">// 执行</span></span><br><span class="line">            ps.execute();</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="优点1-参数设置"><a href="#优点1-参数设置" class="headerlink" title="优点1-参数设置"></a>优点1-参数设置</h3><p>Statement 需要进行字符串拼接，可读性和维护性比较差</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"insert into hero values(null,"</span>+<span class="string">"'提莫'"</span>+<span class="string">","</span>+<span class="number">313.0f</span>+<span class="string">","</span>+<span class="number">50</span>+<span class="string">")"</span>;</span><br></pre></td></tr></table></figure>

<p>PreparedStatement 使用参数设置，可读性好，不易犯错</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();</span><br><span class="line">            PreparedStatement ps = c.prepareStatement(sql);</span><br><span class="line">        ) &#123;</span><br><span class="line">            <span class="comment">// Statement需要进行字符串拼接，可读性和维修性比较差</span></span><br><span class="line">            String sql0 = <span class="string">"insert into hero values(null,"</span> + <span class="string">"'提莫'"</span> + <span class="string">","</span> + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line">            s.execute(sql0);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// PreparedStatement 使用参数设置，可读性好，不易犯错</span></span><br><span class="line">            <span class="comment">// "insert into hero values(null,?,?,?)";</span></span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"提莫"</span>);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, <span class="number">313.0f</span>);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, <span class="number">50</span>);</span><br><span class="line">            ps.execute();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优点2-性能表现"><a href="#优点2-性能表现" class="headerlink" title="优点2-性能表现"></a>优点2-性能表现</h3><p>PreparedStatement有预编译机制，性能比Statement更快</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">        String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">                Statement s = c.createStatement();</span><br><span class="line">                PreparedStatement ps = c.prepareStatement(sql);</span><br><span class="line">            ) &#123;</span><br><span class="line">            <span class="comment">// Statement执行10次，需要10次把SQL语句传输到数据库端</span></span><br><span class="line">            <span class="comment">// 数据库要对每一次来的SQL语句进行编译处理</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                String sql0 = <span class="string">"insert into hero values(null,"</span> + <span class="string">"'提莫'"</span> + <span class="string">","</span></span><br><span class="line">                        + <span class="number">313.0f</span> + <span class="string">","</span> + <span class="number">50</span> + <span class="string">")"</span>;</span><br><span class="line">                s.execute(sql0);</span><br><span class="line">            &#125;</span><br><span class="line">            s.close();</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// PreparedStatement 执行10次，只需要1次把SQL语句传输到数据库端</span></span><br><span class="line">            <span class="comment">// 数据库对带?的SQL进行预编译</span></span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 每次执行，只需要传输参数到数据库端</span></span><br><span class="line">            <span class="comment">// 1. 网络传输量比Statement更小</span></span><br><span class="line">            <span class="comment">// 2. 数据库不需要再进行编译，响应更快</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">                ps.setString(<span class="number">1</span>, <span class="string">"提莫"</span>);</span><br><span class="line">                ps.setFloat(<span class="number">2</span>, <span class="number">313.0f</span>);</span><br><span class="line">                ps.setInt(<span class="number">3</span>, <span class="number">50</span>);</span><br><span class="line">                ps.execute();</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="优点3-防止SQL注入式攻击"><a href="#优点3-防止SQL注入式攻击" class="headerlink" title="优点3-防止SQL注入式攻击"></a>优点3-防止SQL注入式攻击</h3><p>假设name是用户提交来的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String name = <span class="string">"'盖伦' OR 1=1"</span>;</span><br></pre></td></tr></table></figure>

<p>使用Statement就需要进行字符串拼接，拼接出来的语句是：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> hero <span class="keyword">where</span> <span class="keyword">name</span> = <span class="string">'盖伦'</span> <span class="keyword">OR</span> <span class="number">1</span>=<span class="number">1</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>因为有OR 1=1，这是恒成立的，那么就会把所有的英雄都查出来，而不只是盖伦</p>
<p>如果Hero表里的数据是海量的，比如几百万条，把这个表里的数据全部查出来，会让数据库负载变高，CPU100%，内存消耗光，响应变得极其缓慢</p>
<p>而PreparedStatement使用的是参数设置，就不会有这个问题</p>
</blockquote>
<h1 id="execute与executeUpdate"><a href="#execute与executeUpdate" class="headerlink" title="execute与executeUpdate"></a>execute与executeUpdate</h1><h2 id="相同点"><a href="#相同点" class="headerlink" title="相同点"></a>相同点</h2><p>execute与executeUpdate的相同点：都可以执行增加，删除，修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();) &#123;</span><br><span class="line"> </span><br><span class="line">            String sqlInsert = <span class="string">"insert into Hero values (null,'盖伦',616,100)"</span>;</span><br><span class="line">            String sqlDelete = <span class="string">"delete from Hero where id = 100"</span>;</span><br><span class="line">            String sqlUpdate = <span class="string">"update Hero set hp = 300 where id = 100"</span>;</span><br><span class="line"> </span><br><span class="line">            <span class="comment">// 相同点：都可以执行增加，删除，修改</span></span><br><span class="line"> </span><br><span class="line">            s.execute(sqlInsert);</span><br><span class="line">            s.execute(sqlDelete);</span><br><span class="line">            s.execute(sqlUpdate);</span><br><span class="line">            s.executeUpdate(sqlInsert);</span><br><span class="line">            s.executeUpdate(sqlDelete);</span><br><span class="line">            s.executeUpdate(sqlUpdate);</span><br><span class="line"> </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="不同点"><a href="#不同点" class="headerlink" title="不同点"></a>不同点</h2><ol>
<li>不同点一</li>
</ol>
<ul>
<li>execute可以执行查询语句，然后通过getResultSet，把结果集取出来</li>
<li>executeUpdate不能执行查询语句</li>
</ul>
<ol start="2">
<li>不同点二:</li>
</ol>
<ul>
<li>execute返回<code>boolean</code>类型，true表示执行的是查询语句，false表示执行的是insert,delete,update等等</li>
<li>executeUpdate返回的是<code>int</code>，表示有多少条数据受到了影响</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();) &#123;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 不同1：execute可以执行查询语句</span></span><br><span class="line">            <span class="comment">// 然后通过getResultSet，把结果集取出来</span></span><br><span class="line">            String sqlSelect = <span class="string">"select * from hero"</span>;</span><br><span class="line">  </span><br><span class="line">            s.execute(sqlSelect);</span><br><span class="line">            ResultSet rs = s.getResultSet();</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(rs.getInt(<span class="string">"id"</span>));</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// executeUpdate不能执行查询语句</span></span><br><span class="line">            <span class="comment">// s.executeUpdate(sqlSelect);</span></span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 不同2:</span></span><br><span class="line">            <span class="comment">// execute返回boolean类型，true表示执行的是查询语句，false表示执行的是insert,delete,update等等</span></span><br><span class="line">            <span class="keyword">boolean</span> isSelect = s.execute(sqlSelect);</span><br><span class="line">            System.out.println(isSelect);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// executeUpdate返回的是int，表示有多少条数据受到了影响</span></span><br><span class="line">            String sqlUpdate = <span class="string">"update Hero set hp = 300 where id &lt; 100"</span>;</span><br><span class="line">            <span class="keyword">int</span> number = s.executeUpdate(sqlUpdate);</span><br><span class="line">            System.out.println(number);</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="特殊操作"><a href="#特殊操作" class="headerlink" title="特殊操作"></a>特殊操作</h1><h2 id="获取自增长id"><a href="#获取自增长id" class="headerlink" title="获取自增长id"></a>获取自增长id</h2><blockquote>
<p>在<code>Statement</code>通过<code>execute</code>或者<code>executeUpdate</code>执行完插入语句后，MySQL会为新插入的数据分配一个<code>自增长id</code>，(前提是这个表的id设置为了自增长,在Mysql创建表的时候，<code>AUTO_INCREMENT</code>就表示自增长)</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> hero (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">11</span>) AUTO_INCREMENT,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>但是无论是<code>execute</code>还是<code>executeUpdate</code>都不会返回这个<code>自增长id</code>是多少。需要通过<code>Statement</code>的<code>getGeneratedKeys</code>获取该id</p>
</blockquote>
<p><strong>注</strong>： 第20行的代码，后面加了个<code>Statement.RETURN_GENERATED_KEYS</code>参数，以确保会返回自增长id。 通常情况下不需要加这个，有的时候需要加，所以先加上，保险一些</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PreparedStatement ps = c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">         String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">                PreparedStatement ps = c.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);          </span><br><span class="line">                ) &#123;</span><br><span class="line">  </span><br><span class="line">            ps.setString(<span class="number">1</span>, <span class="string">"盖伦"</span>);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, <span class="number">616</span>);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, <span class="number">100</span>);</span><br><span class="line">   </span><br><span class="line">            <span class="comment">// 执行插入语句</span></span><br><span class="line">            ps.execute();</span><br><span class="line">   </span><br><span class="line">            <span class="comment">// 在执行完插入语句后，MySQL会为新插入的数据分配一个自增长id</span></span><br><span class="line">            <span class="comment">// JDBC通过getGeneratedKeys获取该id</span></span><br><span class="line">            ResultSet rs = ps.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                System.out.println(id);</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取表的元数据"><a href="#获取表的元数据" class="headerlink" title="获取表的元数据"></a>获取表的元数据</h2><blockquote>
<p><code>元数据</code>概念：和数据库服务器相关的数据，比如数据库版本，有哪些表，表有哪些字段，字段类型是什么等等。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DatabaseMetaData;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);) &#123;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 查看数据库层面的元数据</span></span><br><span class="line">            <span class="comment">// 即数据库服务器版本，驱动版本，都有哪些数据库等等</span></span><br><span class="line">  </span><br><span class="line">            DatabaseMetaData dbmd = c.getMetaData();</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 获取数据库服务器产品名称</span></span><br><span class="line">            System.out.println(<span class="string">"数据库产品名称:\t"</span>+dbmd.getDatabaseProductName());</span><br><span class="line">            <span class="comment">// 获取数据库服务器产品版本号</span></span><br><span class="line">            System.out.println(<span class="string">"数据库产品版本:\t"</span>+dbmd.getDatabaseProductVersion());</span><br><span class="line">            <span class="comment">// 获取数据库服务器用作类别和表名之间的分隔符 如test.user</span></span><br><span class="line">            System.out.println(<span class="string">"数据库和表分隔符:\t"</span>+dbmd.getCatalogSeparator());</span><br><span class="line">            <span class="comment">// 获取驱动版本</span></span><br><span class="line">            System.out.println(<span class="string">"驱动版本:\t"</span>+dbmd.getDriverVersion());</span><br><span class="line">  </span><br><span class="line">            System.out.println(<span class="string">"可用的数据库列表："</span>);</span><br><span class="line">            <span class="comment">// 获取数据库名称</span></span><br><span class="line">            ResultSet rs = dbmd.getCatalogs();</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                System.out.println(<span class="string">"数据库名称:\t"</span>+rs.getString(<span class="number">1</span>));</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200716153933308.png" alt=""></p>
<h1 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h1><blockquote>
<p>在事务中的多个操作，要么都成功，要么都失败</p>
<p>通过 c.setAutoCommit(false);关闭自动提交</p>
<p>使用 c.commit();进行手动提交</p>
</blockquote>
<p>在22行-35行之间的数据库操作，就处于同一个事务当中，要么都成功，要么都失败<br>所以，虽然第一条SQL语句是可以执行的，但是第二条SQL语句有错误，其结果就是两条SQL语句都没有被提交。 除非两条SQL语句都是正确的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();) &#123;</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 有事务的前提下</span></span><br><span class="line">            <span class="comment">// 在事务中的多个操作，要么都成功，要么都失败</span></span><br><span class="line">  </span><br><span class="line">            c.setAutoCommit(<span class="keyword">false</span>);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 加血的SQL</span></span><br><span class="line">            String sql1 = <span class="string">"update hero set hp = hp +1 where id = 22"</span>;</span><br><span class="line">            s.execute(sql1);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 减血的SQL</span></span><br><span class="line">            <span class="comment">// 不小心写错写成了 updata(而非update)</span></span><br><span class="line">  </span><br><span class="line">            String sql2 = <span class="string">"updata hero set hp = hp -1 where id = 22"</span>;</span><br><span class="line">            s.execute(sql2);</span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 手动提交</span></span><br><span class="line">            c.commit();</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong></p>
<blockquote>
<p>MYSQL 表的类型必须是<code>INNODB</code>才支持事务</p>
<p>在Mysql中，只有当表的类型是INNODB的时候，才支持事务，所以需要把表的类型设置为INNODB,否则无法观察到事务.</p>
</blockquote>
<p>修改表的类型为INNODB的SQL：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> hero <span class="keyword">ENGINE</span>  = <span class="keyword">innodb</span>;</span><br></pre></td></tr></table></figure>

<p>查看表的类型的SQL</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">table</span> <span class="keyword">status</span> <span class="keyword">from</span> how2java;</span><br></pre></td></tr></table></figure>

<p>不过有个前提，就是当前的MYSQL服务器本身要支持INNODB。</p>
<h1 id="ORM"><a href="#ORM" class="headerlink" title="ORM"></a>ORM</h1><blockquote>
<p>ORM（<code>Object Relationship Database Mapping</code>）</p>
<p>对象和关系数据库的映射</p>
<p>简单说，一个对象，对应数据库里的一条记录</p>
</blockquote>
<p><strong>根据id返回一个Hero对象</strong></p>
<blockquote>
<p>提供方法<code>get(int id)</code>，返回一个Hero对象</p>
</blockquote>
<ul>
<li>Hero.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> charactor;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="comment">//增加id属性</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">float</span> hp;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> damage;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>TestJDBC.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJDBC</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Hero hero = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">try</span> (Connection c = DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>,<span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">            Statement s = c.createStatement();) &#123;</span><br><span class="line"> </span><br><span class="line">            String sql = <span class="string">"select * from hero where id = "</span> + id;</span><br><span class="line">   </span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">   </span><br><span class="line">            <span class="comment">// 因为id是唯一的，ResultSet最多只能有一条记录</span></span><br><span class="line">            <span class="comment">// 所以使用if代替while</span></span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line">   </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hero;</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">           </span><br><span class="line">        Hero h = get(<span class="number">22</span>);</span><br><span class="line">        System.out.println(h.name);</span><br><span class="line">   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="DAO"><a href="#DAO" class="headerlink" title="DAO"></a>DAO</h1><blockquote>
<p>DAO（<code>Data Access Object</code>）</p>
<p>数据访问对象</p>
<p>实际上就是把数据库相关的操作都封装在一个类里面，其他地方看不到JDBC的代码</p>
</blockquote>
<ol>
<li>DAO接口</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DAO</span></span>&#123;</span><br><span class="line">    <span class="comment">//增加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Hero hero)</span></span>;</span><br><span class="line">    <span class="comment">//修改</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Hero hero)</span></span>;</span><br><span class="line">    <span class="comment">//删除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//获取</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">    <span class="comment">//查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//分页查询</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设计类HeroDAO，实现接口DAO</li>
</ol>
<ul>
<li>把驱动的初始化放在了构造方法HeroDAO里；</li>
</ul>
<blockquote>
<p> 因为驱动初始化只需要执行一次，所以放在这里更合适，其他方法里也不需要写了，代码更简洁</p>
</blockquote>
<ul>
<li>提供了一个getConnection方法返回连接</li>
</ul>
<blockquote>
<p>所有的数据库操作都需要事先拿到一个数据库连接Connection，以前的做法每个方法里都会写一个，如果要改动密码，那么每个地方都需要修改。 通过这种方式，只需要修改这一个地方就可以了。 代码变得更容易维护，而且也更加简洁。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.ResultSet;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> charactor.Hero;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HeroDAO</span> <span class="keyword">implements</span> <span class="title">DAO</span></span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroDAO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, <span class="string">"root"</span>,</span><br><span class="line">                <span class="string">"admin"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line">  </span><br><span class="line">            String sql = <span class="string">"select count(*) from hero"</span>;</span><br><span class="line">  </span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                total = rs.getInt(<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">            System.out.println(<span class="string">"total:"</span> + total);</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        String sql = <span class="string">"insert into hero values(null,?,?,?)"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line">  </span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line">  </span><br><span class="line">            ps.execute();</span><br><span class="line">  </span><br><span class="line">            ResultSet rs = ps.getGeneratedKeys();</span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Hero hero)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        String sql = <span class="string">"update hero set name= ?, hp = ? , damage = ? where id = ?"</span>;</span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line">  </span><br><span class="line">            ps.setString(<span class="number">1</span>, hero.name);</span><br><span class="line">            ps.setFloat(<span class="number">2</span>, hero.hp);</span><br><span class="line">            ps.setInt(<span class="number">3</span>, hero.damage);</span><br><span class="line">            ps.setInt(<span class="number">4</span>, hero.id);</span><br><span class="line">  </span><br><span class="line">            ps.execute();</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">  </span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line">  </span><br><span class="line">            String sql = <span class="string">"delete from hero where id = "</span> + id;</span><br><span class="line">  </span><br><span class="line">            s.execute(sql);</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Hero <span class="title">get</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        Hero hero = <span class="keyword">null</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); Statement s = c.createStatement();) &#123;</span><br><span class="line">  </span><br><span class="line">            String sql = <span class="string">"select * from hero where id = "</span> + id;</span><br><span class="line">  </span><br><span class="line">            ResultSet rs = s.executeQuery(sql);</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">if</span> (rs.next()) &#123;</span><br><span class="line">                hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                hero.id = id;</span><br><span class="line">            &#125;</span><br><span class="line">  </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">  </span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> hero;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> list(<span class="number">0</span>, Short.MAX_VALUE);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Hero&gt; <span class="title">list</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        List&lt;Hero&gt; heros = <span class="keyword">new</span> ArrayList&lt;Hero&gt;();</span><br><span class="line">  </span><br><span class="line">        String sql = <span class="string">"select * from hero order by id desc limit ?,? "</span>;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> (Connection c = getConnection(); PreparedStatement ps = c.prepareStatement(sql);) &#123;</span><br><span class="line">  </span><br><span class="line">            ps.setInt(<span class="number">1</span>, start);</span><br><span class="line">            ps.setInt(<span class="number">2</span>, count);</span><br><span class="line">  </span><br><span class="line">            ResultSet rs = ps.executeQuery();</span><br><span class="line">  </span><br><span class="line">            <span class="keyword">while</span> (rs.next()) &#123;</span><br><span class="line">                Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">                <span class="keyword">int</span> id = rs.getInt(<span class="number">1</span>);</span><br><span class="line">                String name = rs.getString(<span class="number">2</span>);</span><br><span class="line">                <span class="keyword">float</span> hp = rs.getFloat(<span class="string">"hp"</span>);</span><br><span class="line">                <span class="keyword">int</span> damage = rs.getInt(<span class="number">4</span>);</span><br><span class="line">                hero.id = id;</span><br><span class="line">                hero.name = name;</span><br><span class="line">                hero.hp = hp;</span><br><span class="line">                hero.damage = damage;</span><br><span class="line">                heros.add(hero);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line"></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> heros;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h1><blockquote>
<p>与线程池类似的，数据库也有一个数据库连接池。 不过他们的实现思路是不一样的。</p>
<p>本小节讲解了自定义数据库连接池类：ConnectionPool，虽然不是很完善和健壮，但是足以帮助大家理解ConnectionPool的基本原理。</p>
</blockquote>
<h2 id="数据库连接池原理-传统方式"><a href="#数据库连接池原理-传统方式" class="headerlink" title="数据库连接池原理-传统方式"></a>数据库连接池原理-传统方式</h2><blockquote>
<p>当有多个线程，每个线程都需要连接数据库执行SQL语句的话，那么每个线程都会创建一个连接，并且在使用完毕后，关闭连接。</p>
<p>创建连接和关闭连接的过程也是比较消耗时间的，当多线程并发的时候，系统就会变得很卡顿。</p>
<p>同时，一个数据库同时支持的连接总数也是有限的，如果多线程并发量很大，那么数据库连接的总数就会被消耗光，后续线程发起的数据库连接就会失败。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200716160245643.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="数据库连接池原理-使用池"><a href="#数据库连接池原理-使用池" class="headerlink" title="数据库连接池原理-使用池"></a>数据库连接池原理-使用池</h2><blockquote>
<p>与传统方式不同，连接池在使用之前，就会创建好一定数量的连接。</p>
<p>如果有任何线程需要使用连接，那么就从连接池里面借用，而不是自己重新创建。</p>
<p>使用完毕后，又把这个连接归还给连接池供下一次或者其他线程使用。</p>
<p>倘若发生多线程并发情况，连接池里的连接被借用光了，那么其他线程就会临时等待，直到有连接被归还回来，再继续使用。</p>
<p>整个过程，这些连接都不会被关闭，而是不断的被循环使用，从而节约了启动和关闭连接的时间。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200716160425555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="ConnectionPool构造方法和初始化"><a href="#ConnectionPool构造方法和初始化" class="headerlink" title="ConnectionPool构造方法和初始化"></a>ConnectionPool构造方法和初始化</h2><ol>
<li><p><code>ConnectionPool()</code> 构造方法约定了这个连接池一共有多少连接</p>
</li>
<li><p>在 <code>init()</code> 初始化方法中，创建了<code>size</code>条连接。 注意，这里不能使用<code>try-with-resource</code>这种自动关闭连接的方式，因为连接恰恰需要保持不关闭状态，供后续循环使用</p>
</li>
<li><p><code>getConnection</code>，判断是否为空，如果是空的就wait等待，否则就借用一条连接出去</p>
</li>
<li><p><code>returnConnection</code>，在使用完毕后，归还这个连接到连接池，并且在归还完毕后，调用<code>notifyAll</code>，通知那些等待的线程，有新的连接可以借用了。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConnectionPool</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">    List&lt;Connection&gt; cs = <span class="keyword">new</span> ArrayList&lt;Connection&gt;();</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">int</span> size;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConnectionPool</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.size = size;</span><br><span class="line">        init();</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">          </span><br><span class="line">        <span class="comment">//这里恰恰不能使用try-with-resource的方式，因为这些连接都需要是"活"的，不要被自动关闭了</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">                Connection c = DriverManager</span><br><span class="line">                        .getConnection(<span class="string">"jdbc:mysql://127.0.0.1:3306/how2java?characterEncoding=UTF-8"</span>, <span class="string">"root"</span>, <span class="string">"admin"</span>);</span><br><span class="line">                cs.add(c);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Connection <span class="title">getConnection</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (cs.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        Connection c = cs.remove(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">returnConnection</span><span class="params">(Connection c)</span> </span>&#123;</span><br><span class="line">        cs.add(c);</span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h2><blockquote>
<p>首先初始化一个有3条连接的数据库连接池</p>
<p>然后创建100个线程，每个线程都会从连接池中借用连接，并且在借用之后，归还连接。 拿到连接之后，执行一个耗时1秒的SQL语句。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> jdbc;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> jdbc.ConnectionPool;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConnectionPool</span> </span>&#123;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConnectionPool cp = <span class="keyword">new</span> ConnectionPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">new</span> WorkingThread(<span class="string">"working thread"</span> + i, cp).start();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">   </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WorkingThread</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ConnectionPool cp;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WorkingThread</span><span class="params">(String name, ConnectionPool cp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.cp = cp;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Connection c = cp.getConnection();</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+ <span class="string">":\t 获取了一根连接，并开始工作"</span>  );</span><br><span class="line">        <span class="keyword">try</span> (Statement st = c.createStatement())&#123;</span><br><span class="line">             </span><br><span class="line">            <span class="comment">//模拟时耗１秒的数据库ＳＱＬ语句</span></span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">            st.execute(<span class="string">"select * from hero"</span>);</span><br><span class="line">   </span><br><span class="line">        &#125; <span class="keyword">catch</span> (SQLException | InterruptedException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        cp.returnConnection(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行程序，就可以观察到如图所示的效果：</p>
<p><img src="https://img-blog.csdnimg.cn/20200716160801946.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JDBC</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反射机制</title>
    <url>/posts/29f40393.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>在运行状态中，对于任意一个类，都能够获取到这个类的<strong>所有属性和方法</strong>，对于<code>任意</code>一个对象，都能够调用它的<code>任意</code>一个方法和属性(包括私有的方法和属性)，这种动态获取的信息以及动态调用对象的方法的功能就称为java语言的<kbd>反射机制</kbd>。通俗点讲，通过反射，该类对我们来说是完全透明的，想要获取任何东西都可以。</p>
</blockquote>
<a id="more"></a>

<blockquote>
<p>想要使用反射机制，就必须要先获取到该类的<code>字节码文件对象</code>(.class)，通过字节码文件对象，就能够通过该类中的方法获取到我们想要的所有信息(方法，属性，类名，父类名，实现的所有接口等等)，每一个类对应着一个字节码文件也就对应着一个Class类型的对象，也就是字节码文件对象。</p>
</blockquote>
<h1 id="反射机制能获取的信息"><a href="#反射机制能获取的信息" class="headerlink" title="反射机制能获取的信息"></a>反射机制能获取的信息</h1><h2 id="获取字节码文件对象"><a href="#获取字节码文件对象" class="headerlink" title="获取字节码文件对象"></a>获取字节码文件对象</h2><ol>
<li>第一种方式–&gt;Class.forName(“类名字符串”)。</li>
</ol>
<blockquote>
<p>通过Class类中的静态方法forName，直接获取到一个类的字节码文件对象，此时该类还是源文件阶段，并没有变为字节码文件。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c1=Class.forName(<span class="string">"csdn.Student"</span>);</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二种方式–&gt;先创建对象,再用对象调用getClass()方法，即实例对象.getClass().返回运行时类。</li>
</ol>
<blockquote>
<p>通过类的实例获取该类的字节码文件对象，该类处于创建对象阶段,任何一个java对象都有getClass()方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student s=<span class="keyword">new</span> Student();</span><br><span class="line">Class c2 = s.getClass();</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>第三种方式–&gt;类名.class。返回Class的对象。(每个类都有class属性)</li>
</ol>
<blockquote>
<p>当类被加载成.class文件时，此时Person类变成了.class，在获取该字节码文件对象，也就是获取自己， 该类处于字节码阶段。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c3=Student<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>有了字节码文件对象才能获得类中所有的信息，我们在使用反射获取信息时，也要考虑使用上面哪种方式获取字节码对象合理，视不同情况而定。下面介绍Class类的功能。</p>
</blockquote>
<h2 id="获取简单-完整类名"><a href="#获取简单-完整类名" class="headerlink" title="获取简单/完整类名"></a>获取简单/完整类名</h2><ul>
<li><strong>获取简单类名</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得字符串的Class对象</span></span><br><span class="line">        Class c = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">        <span class="comment">//获得简单类名</span></span><br><span class="line">        String name = c.getSimpleName();</span><br><span class="line">        <span class="comment">//打印输入: name = String</span></span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>获取完整类名</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">//获得字符串的Class对象</span></span><br><span class="line">        Class c = Class.forName(<span class="string">"java.lang.String"</span>);</span><br><span class="line">        <span class="comment">//获得完整类名(包含包名和类名)</span></span><br><span class="line">        String name = c.getName();</span><br><span class="line">        <span class="comment">//打印输入: name = java. lang.String</span></span><br><span class="line">        System.out.println(<span class="string">"name = "</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通过字节码对象创建实例对象"><a href="#通过字节码对象创建实例对象" class="headerlink" title="通过字节码对象创建实例对象"></a>通过字节码对象创建实例对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//注:类名字符串是"包名+类名" 返回Class的对象。(这种是最常用的方法)</span></span><br><span class="line">Class c1=Class.forName(<span class="string">"csdn.Student"</span>);</span><br><span class="line"><span class="comment">// 创建student实例，通过student的无参构造方法</span></span><br><span class="line">Student stu = (Student)c1.newInstance();</span><br></pre></td></tr></table></figure>

<h2 id="获取构造器方法"><a href="#获取构造器方法" class="headerlink" title="获取构造器方法"></a>获取构造器方法</h2><blockquote>
<p>constructor 如果没有无参构造，只有有参构造如何创建实例呢？看下面</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>返回值类型</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>getConstructors()</td>
<td>Constructor型数组</td>
<td>获得所有权限为public的构造方法</td>
</tr>
<tr>
<td>getConstructor(Class &lt;?&gt;.. paramsTypes)</td>
<td>Constructor对象</td>
<td>获得权限为public的指定构造方法</td>
</tr>
<tr>
<td>getDeclaredConstructors()</td>
<td>Constructor型数组</td>
<td>返回此Class对象表示的类声明的所有构造方法。</td>
</tr>
<tr>
<td>getDeclaredConstructor(Class&lt;?&gt;.. paramsTypes)</td>
<td>Constructor对象</td>
<td>返回此Class对象所表示的类的指定构造方法。</td>
</tr>
</tbody></table>
<ul>
<li><strong>获取指定构造方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="comment">//获取字节码文件</span></span><br><span class="line"><span class="number">2</span> Class clazz1=Class.forName(<span class="string">"csdn.Student"</span>);</span><br><span class="line"><span class="number">3</span> <span class="comment">//先获取有参构造器，parameterTypes;表示参数列表，有多少写多少，也可以不写，不写就是调用无参构造器</span></span><br><span class="line"><span class="number">4</span> Constructor constructor = clazz1.getConstructor(<span class="keyword">int</span><span class="class">.<span class="keyword">class</span>,<span class="title">String</span>.<span class="title">class</span>)</span>;</span><br><span class="line"><span class="number">5</span> <span class="comment">//通过构造器来实例化对象，将实际的参数传进去</span></span><br><span class="line"><span class="number">6</span> Student student = (Student)constructor.newInstance(<span class="string">"小明"</span>，<span class="number">12</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>总结上面创建实例对象：Class类的<code>newInstance()</code>方法是使用该类无参的构造函数创建对象, 如果一个类没有无参的构造函数, 就不能这样创建了,可以调用Class类的<code>getConstructor(String.class,int.class)</code>方法获取一个指定的构造函数然后再调用Constructor类的n<code>ewInstance(&quot;张三&quot;,20)</code>方法创建对象</p>
</blockquote>
<ul>
<li><strong>获取全部构造方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz1 = Class.forName(<span class="string">"Reflect.Student"</span>);</span><br><span class="line"><span class="comment">//获取所有的构造方法</span></span><br><span class="line">Constructor[] constructors = clazz1.getConstructors();</span><br><span class="line"><span class="comment">//遍历所有的构造方法</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i= <span class="number">0</span>;i&lt;constructors.length;i++) &#123;</span><br><span class="line">    <span class="comment">//获取每个构造函数中的参数类型字节码</span></span><br><span class="line">    Class[] parameterTypes = constructors[i].getParameterTypes();</span><br><span class="line">    <span class="comment">//获取构造函数中参数类型</span></span><br><span class="line">    System.out.println(<span class="string">"第"</span>+i+<span class="string">"个构造函数"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;parameterTypes.length;j++) &#123;</span><br><span class="line">        <span class="comment">//获取构造函数中参数类型</span></span><br><span class="line">        System.out.println(parameterTypes[j].getName()+<span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获取成员变量并使用Field对象"><a href="#获取成员变量并使用Field对象" class="headerlink" title="获取成员变量并使用Field对象"></a>获取成员变量并使用Field对象</h2><table>
<thead>
<tr>
<th>方法声明</th>
<th>返回值类型</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>getFields()</td>
<td>Field型数组</td>
<td>获得所有权限为public的成员变量</td>
</tr>
<tr>
<td>getField(String name)</td>
<td>Field对象</td>
<td>获得权限为public的指定成员变量</td>
</tr>
<tr>
<td>getDeclaredFields()</td>
<td>Field型数组</td>
<td>返回此Class对象所表示的实体的所有成员变量，但不包括继承的属性</td>
</tr>
<tr>
<td>getDeclaredField(String name)</td>
<td>Field对象</td>
<td>它返回此Class对象所表示的类或接口的指定已声明成员变量</td>
</tr>
</tbody></table>
<ul>
<li><strong>获取指定成员变量</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class clazz1 = Class.forName(<span class="string">"Reflect.Student"</span>);</span><br><span class="line"><span class="comment">//获取其实例对象</span></span><br><span class="line">Student student = (Student)clazz1.newInstance();</span><br><span class="line"><span class="comment">//获取成员变量clazz1.getField(name);通过name来获取指定成员变量，如果该成员变量是私有的，则应该使用getDeclaredField(name);</span></span><br><span class="line">Field field = clazz1.getDeclaredField(<span class="string">"id"</span>);</span><br><span class="line"><span class="comment">//对其成员变量进行操作</span></span><br><span class="line"><span class="comment">//赋值操作</span></span><br><span class="line">field.setInt(student, <span class="number">1</span>);</span><br><span class="line"><span class="comment">//获取成员变量的值，field.get(obj);obj为所表示字段的值的对象，也就是该属性对应诶的实例对象。</span></span><br><span class="line">System.out.println(field.getInt(student));</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Class.getField(String)</code>方法可以获取类中的指定字段(可见的), 如果是私有的可以用<code>getDeclaedField(&quot;name&quot;)</code>方法获取,通过<code>set(obj, &quot;李四&quot;)</code>方法可以设置指定对象上该字段的值, 如果是私有的需要先调用<code>setAccessible(true)</code>设置访问权限,用获取的指定的字段调用<code>get(obj)</code>可以获取指定对象中该字段的值.</p>
</blockquote>
<ul>
<li><strong>获取全部成员变量</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射获得字节码文件对象</span></span><br><span class="line">Class clazz1 = Class.forName(<span class="string">"Reflect.Student"</span>);</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">Student student = (Student) clazz1.newInstance();</span><br><span class="line"><span class="comment">// 赋值操作</span></span><br><span class="line">student.setId(<span class="number">3</span>);</span><br><span class="line">student.setName(<span class="string">"zhangsan"</span>);</span><br><span class="line"><span class="comment">// 将私有的属性一并获取</span></span><br><span class="line">Field[] fields = clazz1.getDeclaredFields();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">    <span class="comment">// 打开操作权限</span></span><br><span class="line">    fields[i].setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    <span class="comment">// 获取成员变量的值</span></span><br><span class="line">    System.out.println(fields[i].get(student));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获得方法并使用Method"><a href="#获得方法并使用Method" class="headerlink" title="获得方法并使用Method"></a>获得方法并使用Method</h2><table>
<thead>
<tr>
<th>方法声明</th>
<th>返回值类型</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>getMethodsQ)</td>
<td>Method型数组</td>
<td>获得所有权限为public的方法</td>
</tr>
<tr>
<td>getMethod(String name,Class Class&lt;?&gt;.. paramsTypes)</td>
<td>Method对象</td>
<td>获得权限为public的指定方法</td>
</tr>
<tr>
<td>getDeclaredMethodsQ</td>
<td>Method型数组</td>
<td>返回此Class 对象表示的实体的所有方法， 但不包括继承的方法。</td>
</tr>
<tr>
<td>getDeclaredMethod(String name,Class Class&lt;?&gt;.. paramsTypes)</td>
<td>Method对象</td>
<td>返回此Class对象所表示的实体的指定公共成员方法，name指定方法名称，parameterTypes指定方 法参数类型。</td>
</tr>
</tbody></table>
<ul>
<li><strong>获取指定方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射获得字节码文件对象</span></span><br><span class="line">Class clazz1 = Class.forName(<span class="string">"Reflect.Student"</span>);</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">Student student = (Student) clazz1.newInstance();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* clazz1.clazz1.getMethod(name, parameterTypes)</span></span><br><span class="line"><span class="comment">*   name 方法的名字</span></span><br><span class="line"><span class="comment">*   parameterTypes：方法的参数类型为Class类型，没有则不填写，比如参数为String，则填写为String.Class</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//eat为不带参数的public方法</span></span><br><span class="line">Method method = clazz1.getMethod(<span class="string">"eat"</span>);</span><br><span class="line">Method method1 = clazz1.getMethod(<span class="string">"sing"</span>, String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* method.invoke(obj, args)</span></span><br><span class="line"><span class="comment">*   obj:方法的对象</span></span><br><span class="line"><span class="comment">*   args:是的参数值，没有则不填</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//调用方法</span></span><br><span class="line">method.invoke(student);</span><br><span class="line">method1.invoke(student, <span class="string">"呵呵"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取私有的方法，和获取属性一样，say为私有的方法</span></span><br><span class="line">Method method2 = clazz1.getDeclaredMethod(<span class="string">"say"</span>);</span><br><span class="line">method2.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">method2.invoke(student);</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>Class.getMethod(String, Class...)</code> 和 <code>Class.getDeclaredMethod(String, Class...)</code>方法可以获取类中的指定方法,如果为私有方法，则需要打开一个权限。<code>setAccessible(true)</code>;用<code>invoke(Object, Object...)</code>可以调用该方法，</p>
</blockquote>
<ul>
<li><strong>获取全部方法</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过反射获得字节码文件对象</span></span><br><span class="line">Class clazz1 = Class.forName(<span class="string">"Reflect.Student"</span>);</span><br><span class="line">Method[] methods = clazz1.getDeclaredMethods();</span><br><span class="line"><span class="comment">// 实例化</span></span><br><span class="line">Student student = (Student) clazz1.newInstance();</span><br><span class="line"><span class="keyword">for</span>(Method method :methods) &#123;</span><br><span class="line">    method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">    System.out.println(method.getName());</span><br><span class="line">    <span class="comment">//获得方法的参数，又回到了之前的代码</span></span><br><span class="line">    Class&lt;?&gt;[] parameterTypes = method.getParameterTypes();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;parameterTypes.length;i++) &#123;</span><br><span class="line">        <span class="comment">//获取构造函数中参数类型</span></span><br><span class="line">        System.out.println(parameterTypes[i].getName()+<span class="string">","</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="获得该类的所有接口"><a href="#获得该类的所有接口" class="headerlink" title="获得该类的所有接口"></a>获得该类的所有接口</h2><blockquote>
<p><code>Class[]　getInterfaces()</code>：确定此对象所表示的类或接口实现的接口</p>
<p>返回值：接口的字节码文件对象的数组</p>
</blockquote>
<h2 id="获取指定资源的输入流"><a href="#获取指定资源的输入流" class="headerlink" title="获取指定资源的输入流"></a>获取指定资源的输入流</h2><blockquote>
<p>InputStream getResourceAsStream(String name)</p>
<p>return：一个 InputStream 对象；如果找不到带有该名称的资源，则返回 null</p>
<p>参数：所需资源的名称，如果以”/“开始，则绝对资源名为”/“后面的一部分。</p>
</blockquote>
<h2 id="动态代理的概述和实现"><a href="#动态代理的概述和实现" class="headerlink" title="动态代理的概述和实现"></a>动态代理的概述和实现</h2><blockquote>
<p><code>动态代理</code>：一种设计模式，其非常简单，很容易理解，你自己可以做这件事，但是觉得自己做非常麻烦或者不方便，所以就叫一个另一个人(代理)来帮你做这个事情，而你就不用管了，这就是动态代理。举个例子，买火车票叫人代买。</p>
<p>在程序运行过程中产生的这个对象,而程序运行过程中产生对象其实就是我们刚才反射讲解的内容，所以，动态代理其实就是通过反射来生成一个代理</p>
<p>在Java中java.lang.reflect包下提供了一个Proxy类和一个InvocationHandler接口，通过使用这个类和接口就可以生成动态代理对象。JDK提供的代理只能针对接口做代理。我们有更强大的代理cglib，Proxy类中的方法创建动态代理类对象分三步，但是注意JDK提供的代理正能针对接口做代理，也就是下面的第二步返回的必须要是一个接口。</p>
</blockquote>
<ol>
<li>new出代理对象，通过实现InvacationHandler接口，然后new出代理对象来。</li>
<li>通过Proxy类中的静态方法newProxyInstance，来将代理对象假装成那个被代理的对象，也就是如果叫人帮我们代买火车票一样，那个代理就假装成我们自己本人</li>
<li>执行方法，代理成功</li>
</ol>
<p>将代理对象中的内容进行实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInvocationHandler</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyInvocationHandler</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        System.out.println( <span class="string">"权限校验"</span>);</span><br><span class="line">        <span class="comment">//执行被代理 target对象的方法</span></span><br><span class="line">        method.invoke(target, args);</span><br><span class="line">        System.out.println(<span class="string">"日志记录"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentImp</span> <span class="keyword">implements</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"登录"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">submit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"提交"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">MyInvocationHandler m = <span class="keyword">new</span> MyInvocationHandler(si);</span><br><span class="line">Student s = (Student)Proxy.newProxyInstance(si.getClass().getClassLoader(), si.getClass().getInterfaces(), m);</span><br><span class="line">s.login();</span><br><span class="line">s.submit();</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：newProxyInstance的三个参数，第一个类加载器，第二个被代理对象的接口，第三个代理对象。</p>
<h2 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h2><blockquote>
<p>还有很多方法，比如获得类加载器，等等。具体还需要别的，就通过查看API文档来解决。</p>
</blockquote>
<table>
<thead>
<tr>
<th>方法声明</th>
<th>返回值类型</th>
<th>功能描述</th>
</tr>
</thead>
<tbody><tr>
<td>getName()</td>
<td>String对象</td>
<td>返回此Class对象所表示的实体全限定名称</td>
</tr>
<tr>
<td>newInstance()</td>
<td>类对象</td>
<td>创建Class对象所表示的类的一个新实例</td>
</tr>
<tr>
<td>getInterfaces()</td>
<td>Class型数组</td>
<td>获得该类实现的所有接口</td>
</tr>
<tr>
<td>getPackage0)</td>
<td>Package对象</td>
<td>获得此类的包</td>
</tr>
</tbody></table>
<h1 id="反射机制的应用实例"><a href="#反射机制的应用实例" class="headerlink" title="反射机制的应用实例"></a>反射机制的应用实例</h1><ol>
<li>利用反射，在泛型为int的arryaList集合中存放一个String类型的对象</li>
</ol>
<p>原理：集合中的泛型只在编译器有效，而到了运行期，泛型则会失效，</p>
<p><img src="https://img-blog.csdnimg.cn/20200712232537675.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<ol>
<li>利用反射，简化编写Servlet的个数。</li>
</ol>
<blockquote>
<p>什么意思呢？每当我们写一个功能时，就需要写一个对应的Servlet，导致最后Servlet有很多，自己都看不过来，所以对其进行了优化，两种方式，</p>
</blockquote>
<ul>
<li>每次从页面传过来一个参数，method=”xxx”; 然后编写一个Servlet，获得其参数method的值，进行判断，如果是add，则调用add方法，如果是delete，则调用delete方法，这样就可以写在一个servlet中实现所有的功能了。</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020071223271593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<ul>
<li>利用反射编写一个BaseServlet继承HttpServlet，这是一个通用的BaseServlet。需要明白servlet的生命周期</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/2020071223280132.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p>编写具体实现的方法servlet类。<br>MySerlvet001 extends BaseServlet</p>
<p><img src="https://img-blog.csdnimg.cn/2020071223283184.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<blockquote>
<p>解释：需要明白servlet的生命周期，也就是service方法，因为是servlet，所以在访问的时候，会经过service方法，而子类MyServlet001中并没有，所以就到父类BaseServlet中找,发现有，然后获取参数即知道了需要调用什么方法，因为方法的编写都在子类中，所以通过反射，获取到子类中对应的方法并运行，其中需要注意的是this这个参数在BaseServlet中的用法。需要理解它。才能理解我们这个程序。</p>
</blockquote>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java注解简介</title>
    <url>/posts/7aaf7bcb.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>本文首先简单介绍Java的<code>基本注解</code>，然后借助<code>自定义注解</code>的方式，帮助大家理解 <code>Hibernate</code>，<code>Spring</code>, <code>Struts</code>等等<code>第三方注解</code>是如何工作的。</p>
</blockquote>
<a id="more"></a>


<h1 id="基本内置注解"><a href="#基本内置注解" class="headerlink" title="基本内置注解"></a>基本内置注解</h1><h2 id="Override"><a href="#Override" class="headerlink" title="@Override"></a>@Override</h2><blockquote>
<p><kbd>@Override</kbd> 用在方法上，表示这个方法重写了父类的方法，如<code>toString()</code>。</p>
<p>如果父类没有这个方法，那么就无法编译通过，如例所示，在fromString()方法上加上@Override 注解，就会失败，因为Hero类的父类Object，并没有fromString方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">fromString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Deprecated"><a href="#Deprecated" class="headerlink" title="@Deprecated"></a>@Deprecated</h2><blockquote>
<p><kbd>@Deprecated</kbd> 表示这个方法已经过期，不建议开发者使用。(暗示在将来某个不确定的版本，就有可能会取消掉)</p>
</blockquote>
<p>如例所示，开地图这个方法hackMap，被注解为过期，在调用的时候，就会受到提示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    String name;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hackMap</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Hero().hackMap();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SuppressWarnings"><a href="#SuppressWarnings" class="headerlink" title="@SuppressWarnings"></a>@SuppressWarnings</h2><blockquote>
<p><kbd>@SuppressWarnings</kbd> Suppress英文的意思是抑制的意思，这个注解的用处是忽略警告信息。</p>
</blockquote>
<p>比如大家使用集合的时候，有时候为了偷懒，会不写泛型，像这样：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List heros = <span class="keyword">new</span> ArrayList();</span><br></pre></td></tr></table></figure>

<p>那么就会导致编译器出现警告，而加上</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unused"</span> &#125;)</span><br></pre></td></tr></table></figure>

<p>就对这些警告进行了抑制，即忽略掉这些警告信息。<br>@SuppressWarnings 有常见的值，分别对应如下意思：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>deprecation</td>
<td>使用了不赞成使用的类或方法时的警告(使用@Deprecated使得编译器产生的警告)；</td>
</tr>
<tr>
<td>unchecked</td>
<td>执行了未检查的转换时的警告，例如当使用集合时没有用泛型 (Generics) 来指定集合保存的类型; 关闭编译器警告</td>
</tr>
<tr>
<td>fallthrough</td>
<td>当 Switch 程序块直接通往下一种情况而没有 Break 时的警告;</td>
</tr>
<tr>
<td>path</td>
<td>在类路径、源文件路径等中有不存在的路径时的警告;</td>
</tr>
<tr>
<td>serial</td>
<td>当在可序列化的类上缺少 serialVersionUID 定义时的警告;</td>
</tr>
<tr>
<td>finally</td>
<td>任何 finally 子句不能正常完成时的警告;</td>
</tr>
<tr>
<td>rawtypes</td>
<td>泛型类型未指明</td>
</tr>
<tr>
<td>unused</td>
<td>引用定义了，但是没有被使用</td>
</tr>
<tr>
<td>all</td>
<td>关于以上所有情况的警告。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="meta">@SuppressWarnings</span>(&#123; <span class="string">"rawtypes"</span>, <span class="string">"unused"</span> &#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List heros = <span class="keyword">new</span> ArrayList();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="SafeVarargs"><a href="#SafeVarargs" class="headerlink" title="@SafeVarargs"></a>@SafeVarargs</h2><blockquote>
<p><kbd>@SafeVarargs</kbd> 这是1.7 之后新加入的基本注解. 如例所示，当使用可变数量的参数的时候，而参数的类型又是泛型T的话，就会出现警告。 这个时候，就使用@SafeVarargs来去掉这个警告</p>
<p><kbd>@SafeVarargs</kbd>注解只能用在参数长度可变的方法或构造方法上，且方法必须声明为static或final，否则会出现编译错误。一个方法使用@SafeVarargs注解的前提是，开发人员必须确保这个方法的实现中对泛型类型参数的处理不会引发类型安全问题。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@SafeVarargs</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; <span class="function">T <span class="title">getFirstOne</span><span class="params">(T... elements)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> elements.length &gt; <span class="number">0</span> ? elements[<span class="number">0</span>] : <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="FunctionalInterface"><a href="#FunctionalInterface" class="headerlink" title="@FunctionalInterface"></a>@FunctionalInterface</h2><blockquote>
<p><kbd>@FunctionalInterface</kbd>这是Java1.8 新增的注解，用于约定函数式接口。</p>
<p>函数式接口概念： 如果接口中只有一个抽象方法（可以包含多个默认方法或多个static方法），该接口称为函数式接口。函数式接口其存在的意义，主要是配合Lambda 表达式 来使用。</p>
</blockquote>
<p>如例所示，AD接口只有一个adAttack方法，那么就可以被注解为@FunctionalInterface,而AP接口有两个方法apAttack()和apAttack2(),那么就不能被注解为函数式接口：</p>
<ul>
<li>AD.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AD</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">adAttack</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>AP.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@FunctionalInterface</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AP</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apAttack</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">apAttack2</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h1><h2 id="非注解方式DBUtil"><a href="#非注解方式DBUtil" class="headerlink" title="非注解方式DBUtil"></a>非注解方式DBUtil</h2><blockquote>
<p>通常来讲，在一个基于JDBC开发的项目里，都会有一个<code>DBUtil</code>这么一个类，在这个类里统一提供连接数据库的IP地址，端口，数据库名称， 账号，密码，编码方式等信息。如例所示，在这个DBUtil类里，这些信息，就是以属性的方式定义在类里的。</p>
</blockquote>
<p>下例运行结果是获取一个连接数据库test的连接Connection实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> String ip = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> port = <span class="number">3306</span>;</span><br><span class="line">    <span class="keyword">static</span> String database = <span class="string">"test"</span>;</span><br><span class="line">    <span class="keyword">static</span> String encoding = <span class="string">"UTF-8"</span>;</span><br><span class="line">    <span class="keyword">static</span> String loginName = <span class="string">"root"</span>;</span><br><span class="line">    <span class="keyword">static</span> String password = <span class="string">"admin"</span>;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        String url = String.format(<span class="string">"jdbc:mysql://%s:%d/%s?characterEncoding=%s"</span>, ip, port, database, encoding);</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, loginName, password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        System.out.println(getConnection());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>： 运行需要用到连接mysql的jar包。</p>
<h2 id="自定义注解-JDBCConfig"><a href="#自定义注解-JDBCConfig" class="headerlink" title="自定义注解@JDBCConfig"></a>自定义注解@JDBCConfig</h2><blockquote>
<p>接下来，就要把DBUtil这个类改造成为支持自定义注解的方式。 首先创建一个注解JDBCConfig</p>
</blockquote>
<ol>
<li>创建注解类型的时候即不使用class也不使用interface,而是使用@interface</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JDBCConfig</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>元注解</li>
</ol>
<ul>
<li><kbd>@Target({METHOD,TYPE})</kbd> 表示这个注解可以用用在类/接口上，还可以用在方法上</li>
<li><kbd>@Retention(RetentionPolicy.RUNTIME)</kbd> 表示这是一个运行时注解，即运行起来之后，才获取注解中的相关信息，而不像基本注解如@Override 那种不用运行，在编译时eclipse就可以进行相关工作的编译时注解。</li>
<li><kbd>@Inherited</kbd> 表示这个注解可以被子类继承</li>
<li><kbd>@Documented</kbd> 表示当执行javadoc的时候，本注解会生成相关文档<br>请在学习完本知识点最后一个步骤解析注解之后，再查看 元注解，做更详尽的学习。</li>
</ul>
<ol start="3">
<li>注解元素，这些注解元素就用于存放注解信息，在解析的时候获取出来</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">String <span class="title">ip</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">port</span><span class="params">()</span> <span class="keyword">default</span> 3306</span>; </span><br><span class="line"><span class="function">String <span class="title">database</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function">String <span class="title">encoding</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function">String <span class="title">loginName</span><span class="params">()</span></span>; </span><br><span class="line"><span class="function">String <span class="title">password</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> anno;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.METHOD;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.TYPE;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Target</span>(&#123;METHOD,TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JDBCConfig &#123;</span><br><span class="line">     <span class="function">String <span class="title">ip</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">port</span><span class="params">()</span> <span class="keyword">default</span> 3306</span>;</span><br><span class="line">     <span class="function">String <span class="title">database</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">encoding</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">loginName</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">password</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="注解方式DBUtil"><a href="#注解方式DBUtil" class="headerlink" title="注解方式DBUtil"></a>注解方式DBUtil</h2><blockquote>
<p>有了自定义注解@JDBCConfig之后，我们就把非注解方式DBUtil改造成为注解方式DBUtil。</p>
</blockquote>
<p>如例所示，数据库相关配置信息本来是以属性的方式存放的，现在改为了以注解的方式，提供这些信息了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> anno.JDBCConfig;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@JDBCConfig</span>(ip = <span class="string">"127.0.0.1"</span>, database = <span class="string">"test"</span>, encoding = <span class="string">"UTF-8"</span>, loginName = <span class="string">"root"</span>, password = <span class="string">"admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>： 目前只是以注解的方式提供这些信息，但是还没有解析，接下来进行解析</p>
<h2 id="解析注解"><a href="#解析注解" class="headerlink" title="解析注解"></a>解析注解</h2><blockquote>
<p>接下来就通过反射，获取这个DBUtil这个类上的注解对象</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">JDBCConfig config = DBUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span>(<span class="title">JDBCConfig</span>.<span class="title">class</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>拿到注解对象之后，通过其方法，获取各个注解元素的值：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String ip = config.ip();</span><br><span class="line"><span class="keyword">int</span> port = config.port();</span><br><span class="line">String database = config.database();</span><br><span class="line">String encoding = config.encoding();</span><br><span class="line">String loginName = config.loginName();</span><br><span class="line">String password = config.password();</span><br></pre></td></tr></table></figure>

<p>后续就一样了，根据这些配置信息得到一个数据库连接Connection实例。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> anno.JDBCConfig;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@JDBCConfig</span>(ip = <span class="string">"127.0.0.1"</span>, database = <span class="string">"test"</span>, encoding = <span class="string">"UTF-8"</span>, loginName = <span class="string">"root"</span>, password = <span class="string">"admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">        JDBCConfig config = DBUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span>(<span class="title">JDBCConfig</span>.<span class="title">class</span>)</span>;</span><br><span class="line"> </span><br><span class="line">        String ip = config.ip();</span><br><span class="line">        <span class="keyword">int</span> port = config.port();</span><br><span class="line">        String database = config.database();</span><br><span class="line">        String encoding = config.encoding();</span><br><span class="line">        String loginName = config.loginName();</span><br><span class="line">        String password = config.password();</span><br><span class="line"> </span><br><span class="line">        String url = String.format(<span class="string">"jdbc:mysql://%s:%d/%s?characterEncoding=%s"</span>, ip, port, database, encoding);</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, loginName, password);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException, SQLException </span>&#123;</span><br><span class="line">        Connection c = getConnection();</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注</strong>： 运行需要用到连接mysql的jar包。</p>
<h1 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h1><h2 id="元注解概念"><a href="#元注解概念" class="headerlink" title="元注解概念"></a>元注解概念</h2><blockquote>
<p>在讲解元注解概念之前，我们先建立元数据的概念。 元数据在英语中对应单词 metadata, metadata在wiki中的解释是：</p>
<p>Metadata is data [information] that provides information about other data</p>
<p>为其他数据提供信息的数据</p>
</blockquote>
<p>这样元注解就好理解了，元注解 meta annotation <strong>用于注解 自定义注解</strong> 的注解。元注解有这么几种：</p>
<ul>
<li>@Target</li>
<li>@Retention</li>
<li>@Inherited</li>
<li>@Documented</li>
<li>@Repeatable (java1.8 新增)</li>
</ul>
<h2 id="Target"><a href="#Target" class="headerlink" title="@Target"></a>@Target</h2><blockquote>
<p><kbd>@Target</kbd> 表示这个注解能放在什么位置上，是只能放在类上？还是即可以放在方法上，又可以放在属性上。自定义注解@JDBCConfig 这个注解上的@Target是：@Target({METHOD,TYPE})，表示他可以用在方法和类型上（类和接口），但是不能放在属性等其他位置。 可以选择的位置列表如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>ElementType.TYPE</td>
<td>能修饰类、接口或枚举类型</td>
</tr>
<tr>
<td>ElementType.FIELD</td>
<td>能修饰成员变量</td>
</tr>
<tr>
<td>ElementType.METHOD</td>
<td>能修饰方法</td>
</tr>
<tr>
<td>ElementType.PARAMETER</td>
<td>能修饰参数</td>
</tr>
<tr>
<td>ElementType.CONSTRUCTOR</td>
<td>能修饰构造器</td>
</tr>
<tr>
<td>ElementType.LOCAL_VARIABLE</td>
<td>能修饰局部变量</td>
</tr>
<tr>
<td>ElementType.ANNOTATION_TYPE</td>
<td>能修饰注解</td>
</tr>
<tr>
<td>ElementType.PACKAGE</td>
<td>能修饰包</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> anno;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.METHOD;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.TYPE;</span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Target</span>(&#123;METHOD,TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JDBCConfig &#123;</span><br><span class="line">     <span class="function">String <span class="title">ip</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">port</span><span class="params">()</span> <span class="keyword">default</span> 3306</span>;</span><br><span class="line">     <span class="function">String <span class="title">database</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">encoding</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">loginName</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">password</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Retention"><a href="#Retention" class="headerlink" title="@Retention"></a>@Retention</h2><blockquote>
<p><kbd>@Retention</kbd> 表示生命周期，自定义注解@JDBCConfig 上的值是 RetentionPolicy.RUNTIME, 表示可以在运行的时候依然可以使用。 @Retention可选的值有3个：</p>
</blockquote>
<table>
<thead>
<tr>
<th>参数</th>
<th>解释</th>
</tr>
</thead>
<tbody><tr>
<td>RetentionPolicy.SOURCE</td>
<td>注解只在源代码中存在，编译成class之后，就没了。@Override 就是这种注解。</td>
</tr>
<tr>
<td>RetentionPolicy.CLASS</td>
<td>注解在java文件编程成.class文件后，依然存在，但是运行起来后就没了。@Retention的默认值，即当没有显式指定@Retention的时候，就会是这种类型。</td>
</tr>
<tr>
<td>RetentionPolicy.RUNTIME</td>
<td>注解在运行起来之后依然存在，程序可以通过反射获取这些信息，自定义注解@JDBCConfig 就是这样。</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> anno;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.METHOD;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.TYPE;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Documented;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Inherited;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Target</span>(&#123;METHOD,TYPE&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> JDBCConfig &#123;</span><br><span class="line">     <span class="function">String <span class="title">ip</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function"><span class="keyword">int</span> <span class="title">port</span><span class="params">()</span> <span class="keyword">default</span> 3306</span>;</span><br><span class="line">     <span class="function">String <span class="title">database</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">encoding</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">loginName</span><span class="params">()</span></span>;</span><br><span class="line">     <span class="function">String <span class="title">password</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Inherited"><a href="#Inherited" class="headerlink" title="@Inherited"></a>@Inherited</h2><blockquote>
<p><kbd>@Inherited</kbd> 表示该注解具有继承性。如例，设计一个DBUtil的子类，其getConnection2方法，可以获取到父类DBUtil上的注解信息。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> anno.JDBCConfig;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtilChild</span> <span class="keyword">extends</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection2</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">        JDBCConfig config = DBUtilChild<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span>(<span class="title">JDBCConfig</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        String ip = config.ip();</span><br><span class="line">        <span class="keyword">int</span> port = config.port();</span><br><span class="line">        String database = config.database();</span><br><span class="line">        String encoding = config.encoding();</span><br><span class="line">        String loginName = config.loginName();</span><br><span class="line">        String password = config.password();</span><br><span class="line"> </span><br><span class="line">        String url = String.format(<span class="string">"jdbc:mysql://%s:%d/%s?characterEncoding=%s"</span>, ip, port, database, encoding);</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, loginName, password);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException, SQLException </span>&#123;</span><br><span class="line">        Connection c = getConnection2();</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Documented"><a href="#Documented" class="headerlink" title="@Documented"></a>@Documented</h2><blockquote>
<p><kbd>@Documented</kbd> 如图所示， 在用javadoc命令生成API文档后，DBUtil的文档里会出现该注解说明。</p>
</blockquote>
<p><strong>注</strong>： 使用eclipse把项目中的.java文件导成API文档步骤：</p>
<ol>
<li>选中项目</li>
<li>点开菜单File</li>
<li>点击Export</li>
<li>点开java-&gt;javadoc-&gt;点next</li>
<li>点finish</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200712174520194.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="Repeatable-java1-8-新增"><a href="#Repeatable-java1-8-新增" class="headerlink" title="@Repeatable (java1.8 新增)"></a>@Repeatable (java1.8 新增)</h2><blockquote>
<p>当没有<kbd>@Repeatable</kbd>修饰的时候，注解在同一个位置，只能出现一次，如例所示：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@JDBCConfig</span>(ip = <span class="string">"127.0.0.1"</span>, database = <span class="string">"test"</span>, encoding = <span class="string">"UTF-8"</span>, loginName = <span class="string">"root"</span>, password = <span class="string">"admin"</span>)</span><br><span class="line"><span class="meta">@JDBCConfig</span>(ip = <span class="string">"127.0.0.1"</span>, database = <span class="string">"test"</span>, encoding = <span class="string">"UTF-8"</span>, loginName = <span class="string">"root"</span>, password = <span class="string">"admin"</span>)</span><br></pre></td></tr></table></figure>

<p>重复做两次就会报错了。</p>
<p>使用@Repeatable之后，再配合一些其他动作，就可以在同一个地方使用多次了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> util;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.DriverManager;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> anno.JDBCConfig;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@JDBCConfig</span>(ip = <span class="string">"127.0.0.1"</span>, database = <span class="string">"test"</span>, encoding = <span class="string">"UTF-8"</span>, loginName = <span class="string">"root"</span>, password = <span class="string">"admin"</span>)</span><br><span class="line"><span class="meta">@JDBCConfig</span>(ip = <span class="string">"127.0.0.1"</span>, database = <span class="string">"test"</span>, encoding = <span class="string">"UTF-8"</span>, loginName = <span class="string">"root"</span>, password = <span class="string">"admin"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DBUtil</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> SQLException, NoSuchMethodException, SecurityException </span>&#123;</span><br><span class="line">        JDBCConfig config = DBUtil<span class="class">.<span class="keyword">class</span>.<span class="title">getAnnotation</span>(<span class="title">JDBCConfig</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        System.out.println(config);</span><br><span class="line"> </span><br><span class="line">        String ip = config.ip();</span><br><span class="line">        <span class="keyword">int</span> port = config.port();</span><br><span class="line">        String database = config.database();</span><br><span class="line">        String encoding = config.encoding();</span><br><span class="line">        String loginName = config.loginName();</span><br><span class="line">        String password = config.password();</span><br><span class="line"> </span><br><span class="line">        String url = String.format(<span class="string">"jdbc:mysql://%s:%d/%s?characterEncoding=%s"</span>, ip, port, database, encoding);</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection(url, loginName, password);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NoSuchMethodException, SecurityException, SQLException </span>&#123;</span><br><span class="line">        Connection c = getConnection();</span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Repeatable-运用举例"><a href="#Repeatable-运用举例" class="headerlink" title="@Repeatable 运用举例"></a>@Repeatable 运用举例</h2><blockquote>
<p>比如在查找文件后缀名是.java的文件时，我们把部分代码修改为注解，并且使用@Repeatable 这个元注解来表示，文件后缀名的范围可以是java, html, css, js 等等。</p>
</blockquote>
<p>为了紧凑起见，把注解作为内部类的形式放在一个文件里。</p>
<ol>
<li>注解FileTypes，其value()返回一个FileType数组</li>
<li>注解FileType，其@Repeatable的值采用FileTypes</li>
<li>运用注解：在work方法上重复使用多次@FileType注解</li>
<li>解析注解： 在work方法内，通过反射获取到本方法上的FileType类型的注解数组，然后遍历本数组</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> annotation;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.annotation.ElementType.METHOD;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Repeatable;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FindFiles</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Target</span>( METHOD)</span><br><span class="line">    <span class="meta">@Retention</span>( RetentionPolicy.RUNTIME )</span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> FileTypes &#123;</span><br><span class="line">        FileType[] value();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@Target</span>(  METHOD )</span><br><span class="line">    <span class="meta">@Retention</span>( RetentionPolicy.RUNTIME )</span><br><span class="line">    <span class="meta">@Repeatable</span>( FileTypes<span class="class">.<span class="keyword">class</span> )</span></span><br><span class="line"><span class="class">    <span class="title">public</span> @<span class="title">interface</span> <span class="title">FileType</span> </span>&#123;</span><br><span class="line">        <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line"> </span><br><span class="line">    <span class="meta">@FileType</span>( <span class="string">".java"</span> )</span><br><span class="line">    <span class="meta">@FileType</span>( <span class="string">".html"</span> )</span><br><span class="line">    <span class="meta">@FileType</span>( <span class="string">".css"</span> )</span><br><span class="line">    <span class="meta">@FileType</span>( <span class="string">".js"</span> )</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span></span>&#123;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            FileType[] fileTypes= <span class="keyword">this</span>.getClass().getMethod(<span class="string">"work"</span>).getAnnotationsByType(FileType<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            System.out.println(<span class="string">"将从如下后缀名的文件中查找文件内容"</span>);</span><br><span class="line">            <span class="keyword">for</span> (FileType fileType : fileTypes) &#123;</span><br><span class="line">                System.out.println(fileType.value());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"查找过程略。。。"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException | SecurityException e) &#123;</span><br><span class="line">            <span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> FindFiles().work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="仿Hibernate注解"><a href="#仿Hibernate注解" class="headerlink" title="仿Hibernate注解"></a>仿Hibernate注解</h1><h2 id="hibernate两种配置方式"><a href="#hibernate两种配置方式" class="headerlink" title="hibernate两种配置方式"></a>hibernate两种配置方式</h2><blockquote>
<p>hibernate有两种配置方式，分别是<code>*.hbm.xml 配置方式</code> 和<code>注解方式</code>。 虽然方式不一样，但是都是用于解决如下问题：</p>
</blockquote>
<ol>
<li>当前类是否实体类</li>
<li>对应的表名称</li>
<li>主键对应哪个属性， 自增长策略是什么，对应字段名称是什么</li>
<li>非主键属性对应字段名称是什么</li>
</ol>
<p>接下来，我会做一套仿hibernate的注解，并且在一个实体类Hero上运用这些注解，并通过反射解析这些注解信息，来解决上述的问题</p>
<h2 id="自定义hibernate注解"><a href="#自定义hibernate注解" class="headerlink" title="自定义hibernate注解"></a>自定义hibernate注解</h2><p>参考hibernate的 注解配置方式 ，自定义5个注解，分别对应hibernate中用到的注解：</p>
<ol>
<li>hibernate_annotation.MyEntity 对应 javax.persistence.Entity</li>
<li>hibernate_annotation.MyTable 对应 javax.persistence.Table</li>
<li>hibernate_annotation.MyId 对应 javax.persistence.Id</li>
<li>hibernate_annotation.MyGeneratedValue 对应 javax.persistence.GeneratedValue</li>
<li>hibernate_annotation.MyColumn 对应 javax.persistence.Column</li>
</ol>
<ul>
<li>MyEntity.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hibernate_annotation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyEntity &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyTable.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hibernate_annotation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyTable &#123;</span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyId.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hibernate_annotation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyId &#123;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyGeneratedValue.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hibernate_annotation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyGeneratedValue &#123;</span><br><span class="line">    <span class="function">String <span class="title">strategy</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyColumn.java</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> hibernate_annotation;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.ElementType;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Retention;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.RetentionPolicy;</span><br><span class="line"><span class="keyword">import</span> java.lang.annotation.Target;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@Target</span>(ElementType.METHOD)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> MyColumn &#123;</span><br><span class="line">    <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运用在Hero对象上"><a href="#运用在Hero对象上" class="headerlink" title="运用在Hero对象上"></a>运用在Hero对象上</h2><blockquote>
<p>像以注解方式配置Product类那样，在Hero类上运用这些自定义注解：</p>
<p>当注解的方法是value的时候，给这个注解赋值时，本来应该是：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyColumn</span>(value=<span class="string">"name_"</span>)</span><br></pre></td></tr></table></figure>

<p>现在可以简略一点，写为</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MyColumn</span>(<span class="string">"name_"</span>)</span><br></pre></td></tr></table></figure>

<p>只有当名称是value的时候可以这样，其他名称如name,stratgy等不行</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> pojo;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyColumn;</span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyEntity;</span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyGeneratedValue;</span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyId;</span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyTable;</span><br><span class="line"> </span><br><span class="line"><span class="meta">@MyEntity</span></span><br><span class="line"><span class="meta">@MyTable</span>(name=<span class="string">"hero_"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> damage;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> armor;</span><br><span class="line">     </span><br><span class="line">    <span class="meta">@MyId</span></span><br><span class="line">    <span class="meta">@MyGeneratedValue</span>(strategy = <span class="string">"identity"</span>)</span><br><span class="line">    <span class="meta">@MyColumn</span>(<span class="string">"id_"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyColumn</span>(<span class="string">"name_"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyColumn</span>(<span class="string">"damage_"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getDamage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> damage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDamage</span><span class="params">(<span class="keyword">int</span> damage)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.damage = damage;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@MyColumn</span>(<span class="string">"armor_"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getArmor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> armor;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setArmor</span><span class="params">(<span class="keyword">int</span> armor)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.armor = armor;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="解析注解-1"><a href="#解析注解-1" class="headerlink" title="解析注解"></a>解析注解</h2><blockquote>
<p>创建一个解析类ParseHibernateAnnotation ，获取Hero类上配置的注解信息，其运行结果如图所示。思路如下：</p>
</blockquote>
<ol>
<li>首先获取Hero.class类对象</li>
<li>判断本类是否进行了MyEntity 注解</li>
<li>获取注解 MyTable</li>
<li>遍历所有的方法，如果某个方法有MyId注解，那么就记录为主键方法primaryKeyMethod</li>
<li>把主键方法的自增长策略注解MyGeneratedValue和对应的字段注解MyColumn 取出来，并打印</li>
<li>遍历所有非主键方法，并且有MyColumn注解的方法，打印属性名称和字段名称的对应关系。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/2020071218114260.png" alt=""></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> test;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyColumn;</span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyEntity;</span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyGeneratedValue;</span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyId;</span><br><span class="line"><span class="keyword">import</span> hibernate_annotation.MyTable;</span><br><span class="line"><span class="keyword">import</span> pojo.Hero;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ParseHibernateAnnotation</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        Class&lt;Hero&gt; clazz = Hero<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        MyEntity myEntity = (MyEntity) clazz.getAnnotation(MyEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> == myEntity) &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hero类不是实体类"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"Hero类是实体类"</span>);</span><br><span class="line">            MyTable myTable= (MyTable) clazz.getAnnotation(MyTable<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">            String tableName = myTable.name();</span><br><span class="line">            System.out.println(<span class="string">"其对应的表名是:"</span> + tableName);</span><br><span class="line">            Method[] methods =clazz.getMethods();</span><br><span class="line">            Method primaryKeyMethod = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">for</span> (Method m: methods) &#123;</span><br><span class="line">                MyId myId = m.getAnnotation(MyId<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span>!=myId)&#123;</span><br><span class="line">                    primaryKeyMethod = m;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">             </span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">null</span>!=primaryKeyMethod)&#123;</span><br><span class="line">                System.out.println(<span class="string">"找到主键："</span> + method2attribute( primaryKeyMethod.getName() ));</span><br><span class="line">                MyGeneratedValue myGeneratedValue =</span><br><span class="line">                primaryKeyMethod.getAnnotation(MyGeneratedValue<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                System.out.println(<span class="string">"其自增长策略是："</span> +myGeneratedValue.strategy());</span><br><span class="line">                MyColumn myColumn = primaryKeyMethod.getAnnotation(MyColumn<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                System.out.println(<span class="string">"对应数据库中的字段是："</span> +myColumn.value());</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"其他非主键属性分别对应的数据库字段如下："</span>);</span><br><span class="line">            <span class="keyword">for</span> (Method m: methods) &#123;</span><br><span class="line">                <span class="keyword">if</span>(m==primaryKeyMethod)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                MyColumn myColumn = m.getAnnotation(MyColumn<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">                <span class="comment">//那些setter方法上是没有MyColumn注解的</span></span><br><span class="line">                <span class="keyword">if</span>(<span class="keyword">null</span>==myColumn)</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                System.out.format(<span class="string">"属性： %s\t对应的数据库字段是:%s%n"</span>,method2attribute(m.getName()),myColumn.value());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">method2attribute</span><span class="params">(String methodName)</span> </span>&#123;</span><br><span class="line">        String result = methodName; ;</span><br><span class="line">        result = result.replaceFirst(<span class="string">"get"</span>, <span class="string">""</span>);</span><br><span class="line">        result = result.replaceFirst(<span class="string">"is"</span>, <span class="string">""</span>);</span><br><span class="line">        <span class="keyword">if</span>(result.length()&lt;=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> result.toLowerCase();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> result.substring(<span class="number">0</span>,<span class="number">1</span>).toLowerCase() + result.substring(<span class="number">1</span>,result.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="注解分类"><a href="#注解分类" class="headerlink" title="注解分类"></a>注解分类</h1><h2 id="按照作用域分"><a href="#按照作用域分" class="headerlink" title="按照作用域分"></a>按照作用域分</h2><p>根据注解的作用域@Retention，注解分为：</p>
<ol>
<li>RetentionPolicy.SOURCE： Java源文件上的注解</li>
<li>RetentionPolicy.CLASS： Class类文件上的注解</li>
<li>RetentionPolicy.RUNTIME： 运行时的注解</li>
</ol>
<h2 id="按照来源分"><a href="#按照来源分" class="headerlink" title="按照来源分"></a>按照来源分</h2><p>按照注解的来源，也是分为3类：</p>
<ol>
<li>内置注解：如@Override ，@Deprecated 等等</li>
<li>第三方注解：如Hibernate, Struts等等</li>
<li>自定义注解：如仿hibernate的自定义注解</li>
</ol>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java面向对象基础</title>
    <url>/posts/48957eb.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>本文介绍了Java<code>面向对象</code>的一些基本知识，对面向对象的三大特征（<code>继承</code>、<code>封装</code>、<code>多态</code>）进行了讲解，另外还包括<code>抽象类</code>、<code>接口</code>、<code>内部类</code>、<code>String</code>基础等知识。</p>
</blockquote>
<a id="more"></a>

<h1 id="类的定义方式"><a href="#类的定义方式" class="headerlink" title="类的定义方式"></a>类的定义方式</h1><ul>
<li>每一个源文件必须有且只有一个<code>public class</code>，并且类名和文件名保持一致！</li>
<li>一个<code>Java</code>文件可以同时定义多个<code>class</code></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 每一个源文件必须有且只有一个public class，并且类名和文件名保持一致！</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> </span>&#123; </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tyre</span> </span>&#123; <span class="comment">// 一个Java文件可以同时定义多个class</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Engine</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Seat</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="面向对象的内存分析"><a href="#面向对象的内存分析" class="headerlink" title="面向对象的内存分析"></a>面向对象的内存分析</h1><blockquote>
<p><code>Java虚拟机</code>的内存可以分为三个区域：<code>栈 stack</code>、<code>堆 heap</code>、<code>方法区 method area</code>。</p>
</blockquote>
<p><strong>栈的特点如下：</strong></p>
<ol>
<li>栈描述的是方法执行的内存模型。每个方法被调用都会创建一个栈帧(存储局部变量、操作数、方法出口等)</li>
<li>JVM为每个线程创建一个栈，用于存放该线程执行方法的信息(实际参数、局部变量等)</li>
<li>栈属于线程私有，不能实现线程间的共享!</li>
<li>栈的存储特性是“先进后出，后进先出”</li>
<li>栈是由系统自动分配，速度快!栈是一个连续的内存空间!</li>
</ol>
<p><strong>堆的特点如下：</strong></p>
<ol>
<li>堆用于存储创建好的对象和数组(数组也是对象)</li>
<li>JVM只有一个堆，被所有线程共享</li>
<li>堆是一个不连续的内存空间，分配灵活，速度慢!</li>
</ol>
<p><strong>方法区(又叫<code>静态区</code>)特点如下：</strong></p>
<ol>
<li>JVM只有一个方法区，被所有线程共享!</li>
<li>方法区实际也是堆，只是用于存储类、常量相关的信息!</li>
<li>用来存放程序中永远是不变或唯一的内容。(类信息【Class对象】、静态变量、字符串常量等)</li>
</ol>
<ul>
<li>内存分配图</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200708200455898.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h1><blockquote>
<p><code>构造器</code>也叫<code>构造方法(constructor)</code>，用于对象的初始化。构造器是一个创建对象时被自动调用的特殊方法，目的是对象的初始化。构造器的名称应与类的名称一致。Java通过<code>new</code>关键字来调用构造器，从而返回该类的实例，是一种特殊的方法。</p>
</blockquote>
<p>声明格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[修饰符] 类名(形参列表)&#123;</span><br><span class="line">    <span class="comment">//n条语句</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>要点：</strong></p>
<ol>
<li>通过<code>new</code>关键字调用!!</li>
<li>构造器虽然有返回值，但是不能定义返回值类型(返回值的类型肯定是本类)，不能在构造器里使用<code>return</code>返回某个值。</li>
<li>如果我们没有定义构造器，则编译器会自动定义一个无参的构造函数。如果已定义则编译器不会自动添加!</li>
<li>构造器的方法名必须和类名一致!</li>
<li>构造方法也是方法，只不过有特殊的作用而已。与普通方法一样，构造方法也可以重载。</li>
<li>如果方法构造中形参名与属性名相同时，需要使用<code>this</code>关键字区分属性与形参。</li>
</ol>
<h1 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h1><blockquote>
<p>Java引入了<code>垃圾回收机制(Garbage Collection)</code>，令C++程序员最头疼的内存管理问题迎刃而解。Java程序员可以将更多的精力放到业务逻辑上而不是内存管理工作上，大大的提高了开发效率。</p>
</blockquote>
<h2 id="垃圾回收原理和算法"><a href="#垃圾回收原理和算法" class="headerlink" title="垃圾回收原理和算法"></a>垃圾回收原理和算法</h2><ol>
<li>内存管理</li>
</ol>
<p>Java的内存管理很大程度指的就是对象的管理，其中包括对象空间的分配和释放。</p>
<ul>
<li>对象空间的分配：使用new关键字创建对象即可</li>
<li>对象空间的释放：将对象赋值null即可。垃圾回收器将负责回收所有”不可达”对象的内存空间。</li>
</ul>
<ol start="2">
<li>垃圾回收过程</li>
</ol>
<p>任何一种垃圾回收算法一般要做两件基本事情：</p>
<ul>
<li>发现无用的对象</li>
<li>回收无用对象占用的内存空间。</li>
</ul>
<p>垃圾回收机制保证可以将“无用的对象”进行回收。无用的对象指的就是没有任何变量引用该对象。Java的垃圾回收器通过相关算法发现无用对象，并进行清除和整理。</p>
<ol start="3">
<li>垃圾回收相关算法</li>
</ol>
<ul>
<li>引用计数法</li>
</ul>
<blockquote>
<p>堆中每个对象都有一个引用计数。被引用一次，计数加1. 被引用变量值变为null，则计数减1，直到计数为0，则表示变成无用对象。优点是算法简单，缺点是“循环引用的无用对象”无法别识别。</p>
</blockquote>
<p>示例：循环引用示例　　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    Student friend;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">         </span><br><span class="line">        s1.friend = s2;</span><br><span class="line">        s2.friend = s1;        </span><br><span class="line">        s1 = <span class="keyword">null</span>;</span><br><span class="line">        s2 = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>s1和s2互相引用对方，导致他们引用计数不为0，但是实际已经无用，但无法被识别。</p>
<ul>
<li>引用可达法(根搜索算法)</li>
</ul>
<blockquote>
<p>程序把所有的引用关系看作一张图，从一个节点GC ROOT开始，寻找对应的引用节点，找到这个节点以后，继续寻找这个节点的引用节点，当所有的引用节点寻找完毕之后，剩余的节点则被认为是没有被引用到的节点，即无用的节点。</p>
</blockquote>
<h2 id="开发中容易造成内存泄露的操作"><a href="#开发中容易造成内存泄露的操作" class="headerlink" title="开发中容易造成内存泄露的操作"></a>开发中容易造成内存泄露的操作</h2><p>如下四种情况时最容易造成内存泄露的场景，开发时一定注意：</p>
<ol>
<li>创建大量无用对象</li>
</ol>
<p>比如，我们在需要大量拼接字符串时，使用了String而不是StringBuilder。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;   </span><br><span class="line">    str += i;     <span class="comment">//相当于产生了10000个String对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>静态集合类的使用</li>
</ol>
<blockquote>
<p>像HashMap、Vector、List等的使用最容易出现内存泄露，这些静态变量的生命周期和应用程序一致，所有的对象Object也不能被释放。</p>
</blockquote>
<ol start="3">
<li>各种连接对象(IO流对象、数据库连接对象、网络连接对象)未关闭</li>
</ol>
<blockquote>
<p>IO流对象、数据库连接对象、网络连接对象等连接对象属于物理连接，和硬盘或者网络连接，不使用的时候一定要关闭。</p>
</blockquote>
<p>4.监听器的使用</p>
<blockquote>
<p>释放对象时，没有删除相应的监听器。</p>
</blockquote>
<p><strong>要点：</strong></p>
<ol>
<li>程序员无权调用垃圾回收器。</li>
<li>程序员可以调用 <code>System.gc()</code>，该方法只是通知 <code>JVM</code>，并不是运行垃圾回收器。尽量少用，会申请启动<code>Full GC</code>，成本高，影响系统性能。</li>
<li><code>finalize</code> 方法，是Java提供给程序员用来释放对象或资源的方法，但是尽量少用。</li>
</ol>
<h1 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h1><p><strong>对象创建的过程和this的本质</strong></p>
<blockquote>
<p>构造方法是创建 Java 对象的重要途径，通过<code>new</code>关键字调用构造器时，构造器也确实返回该类的对象，但这个对象并不是完全由构造器负责创建。创建一个对象分为如下四步：</p>
</blockquote>
<ol>
<li>分配对象空间，并将对象成员变量初始化为0或空</li>
<li>执行属性值的显示初始化</li>
<li>执行构造方法</li>
<li>返回对象的地址给相关的变量</li>
</ol>
<blockquote>
<p>this的本质就是“创建好的对象的地址”! 由于在构造方法调用前，对象已经创建。因此，在构造方法中也可以使用this代表“当前对象” 。</p>
</blockquote>
<p><strong>this最常的用法：</strong></p>
<ol>
<li>在程序中产生二义性之处，应使用this来指明当前对象;普通方法中，this总是指向调用该方法的对象。构造方法中，this总是指向正要初始化的对象。</li>
<li>使用this关键字调用重载的构造方法，避免相同的初始化代码。但只能在构造方法中用，并且必须位于构造方法的第一句。</li>
<li>this不能用于static方法中。</li>
</ol>
<p>示例：this代表“当前对象”示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;        <span class="comment">//id</span></span><br><span class="line">    String name;   <span class="comment">//账户名</span></span><br><span class="line">    String pwd;   <span class="comment">//密码</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"正在初始化已经创建好的对象："</span>+<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">this</span>.id = id;   <span class="comment">//不写this，无法区分局部变量id和成员变量id</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name+<span class="string">",要登录！"</span>);  <span class="comment">//不写this效果一样</span></span><br><span class="line">    &#125;  </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User  u3 = <span class="keyword">new</span> User(<span class="number">101</span>,<span class="string">"高小七"</span>);</span><br><span class="line">        System.out.println(<span class="string">"打印高小七对象："</span>+u3);</span><br><span class="line">        u3.login();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200708202602789.png" alt=""></p>
<p>示例：this()调用重载构造方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThis</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line"> </span><br><span class="line">    TestThis() &#123;</span><br><span class="line">        System.out.println(<span class="string">"正要初始化一个Hello对象"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    TestThis(<span class="keyword">int</span> a, <span class="keyword">int</span> b) &#123;</span><br><span class="line">        <span class="comment">// TestThis(); //这样是无法调用构造方法的！</span></span><br><span class="line">        <span class="keyword">this</span>(); <span class="comment">// 调用无参的构造方法，并且必须位于第一行！</span></span><br><span class="line">        a = a;<span class="comment">// 这里都是指的局部变量而不是成员变量</span></span><br><span class="line"><span class="comment">// 这样就区分了成员变量和局部变量. 这种情况占了this使用情况大多数！</span></span><br><span class="line">        <span class="keyword">this</span>.a = a;</span><br><span class="line">        <span class="keyword">this</span>.b = b;</span><br><span class="line">    &#125;</span><br><span class="line">    TestThis(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c) &#123;</span><br><span class="line">        <span class="keyword">this</span>(a, b); <span class="comment">// 调用带参的构造方法，并且必须位于第一行！</span></span><br><span class="line">        <span class="keyword">this</span>.c = c;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sing</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.sing(); <span class="comment">// 调用本类中的sing();</span></span><br><span class="line">        System.out.println(<span class="string">"你妈妈喊你回家吃饭！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestThis hi = <span class="keyword">new</span> TestThis(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">        hi.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h1><blockquote>
<p>在类中，用<code>static</code>声明的成员变量为静态成员变量，也称为类变量。 类变量的生命周期和类相同，在整个应用程序执行期间都有效。它有如下特点：</p>
</blockquote>
<ol>
<li>为该类的公用变量，属于类，被该类的所有实例共享，在类被载入时被显式初始化。</li>
<li>对于该类的所有对象来说，static成员变量只有一份。被该类的所有对象共享!!</li>
<li>一般用“类名.类属性/方法”来调用。(也可以通过对象引用或类名(不需要实例化)访问静态成员。)</li>
<li>在static方法中不可直接访问非static的成员。</li>
</ol>
<p><strong>核心要点：</strong></p>
<ul>
<li>static修饰的成员变量和方法，从属于类。</li>
<li>普通变量和方法从属于对象的。</li>
</ul>
<p>示例：static关键字的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试static关键字的用法</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User2</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id; <span class="comment">// id</span></span><br><span class="line">    String name; <span class="comment">// 账户名</span></span><br><span class="line">    String pwd; <span class="comment">// 密码</span></span><br><span class="line">     </span><br><span class="line">    <span class="keyword">static</span> String company = <span class="string">"北京尚学堂"</span>; <span class="comment">// 公司名称</span></span><br><span class="line">     </span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User2</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        printCompany();</span><br><span class="line">        System.out.println(company); </span><br><span class="line">        System.out.println(<span class="string">"登录："</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCompany</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//         login();//调用非静态成员，编译就会报错</span></span><br><span class="line">        System.out.println(company);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User2 u = <span class="keyword">new</span> User2(<span class="number">101</span>, <span class="string">"高小七"</span>);</span><br><span class="line">        User2.printCompany();</span><br><span class="line">        User2.company = <span class="string">"北京阿里爷爷"</span>;</span><br><span class="line">        User2.printCompany();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200708203104494.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/20200708203115605.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="静态初始化块"><a href="#静态初始化块" class="headerlink" title="静态初始化块"></a>静态初始化块</h1><blockquote>
<p><code>构造方法</code>用于对象的初始化！<code>静态初始化块</code>，用于类的初始化操作！在静态初始化块中不能直接访问非static成员。</p>
</blockquote>
<p><strong>注意事项：</strong></p>
<p>静态初始化块执行顺序：</p>
<ol>
<li>上溯到Object类，先执行Object的静态初始化块，再向下执行子类的静态初始化块，直到我们的类的静态初始化块为止。</li>
<li>构造方法执行顺序和上面顺序一样！</li>
</ol>
<p>示例：static初始化块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User3</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;        <span class="comment">//id</span></span><br><span class="line">    String name;   <span class="comment">//账户名</span></span><br><span class="line">    String pwd;   <span class="comment">//密码</span></span><br><span class="line">    <span class="keyword">static</span> String company; <span class="comment">//公司名称</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"执行类的初始化工作"</span>);</span><br><span class="line">        company = <span class="string">"北京尚学堂"</span>;</span><br><span class="line">        printCompany();</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printCompany</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(company);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User3  u3 = <span class="keyword">new</span> User3();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200708203452124.png" alt=""></p>
<h1 id="参数传值机制"><a href="#参数传值机制" class="headerlink" title="参数传值机制"></a>参数传值机制</h1><blockquote>
<p><strong>Java中，方法中所有参数都是“值传递”</strong>，也就是“传递的是值的副本”。 也就是说，我们得到的是“原参数的复印件，而不是原件”。因此，复印件改变不会影响原件。</p>
</blockquote>
<ul>
<li>基本数据类型参数的传值</li>
</ul>
<blockquote>
<p>传递的是值的副本。 副本改变不会影响原件。</p>
</blockquote>
<ul>
<li>引用类型参数的传值</li>
</ul>
<blockquote>
<p>传递的是值的副本。但是引用类型指的是“对象的地址”。因此，副本和原参数都指向了同一个“地址”，改变“副本指向地址对象的值，也意味着原参数指向对象的值也发生了改变”。</p>
</blockquote>
<p>示例：多个变量指向同一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试参数传值机制</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> admin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User4</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;        <span class="comment">//id</span></span><br><span class="line">    String name;   <span class="comment">//账户名</span></span><br><span class="line">    String pwd;   <span class="comment">//密码</span></span><br><span class="line">       </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User4</span><span class="params">(<span class="keyword">int</span> id, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span>   <span class="keyword">void</span>   <span class="title">testParameterTransfer01</span><span class="params">(User4  u)</span></span>&#123;</span><br><span class="line">        u.name=<span class="string">"高小八"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span>   <span class="keyword">void</span>   <span class="title">testParameterTransfer02</span><span class="params">(User4  u)</span></span>&#123;</span><br><span class="line">        u  =  <span class="keyword">new</span>  User4(<span class="number">200</span>,<span class="string">"高三"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        User4   u1  =  <span class="keyword">new</span> User4(<span class="number">100</span>, <span class="string">"高小七"</span>);</span><br><span class="line">         </span><br><span class="line">        u1.testParameterTransfer01(u1); </span><br><span class="line">        System.out.println(u1.name);</span><br><span class="line"> </span><br><span class="line">        u1.testParameterTransfer02(u1);</span><br><span class="line">        System.out.println(u1.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200708204010160.png" alt=""></p>
<h1 id="包（package）"><a href="#包（package）" class="headerlink" title="包（package）"></a>包（package）</h1><blockquote>
<p><code>包机制</code>是Java中管理类的重要手段。 开发中，我们会遇到大量同名的类，通过包我们很容易对解决类重名的问题，也可以实现对类的有效管理。 包对于类，相当于文件夹对于文件的作用。</p>
</blockquote>
<p>我们通过package实现对类的管理，package的使用有两个要点：</p>
<ol>
<li><p>通常是类的第一句非注释性语句。</p>
</li>
<li><p>包名：域名倒着写即可，再加上模块名，便于内部管理类。</p>
</li>
</ol>
<p>示例：package的命名举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">com.sun.test;</span><br><span class="line">com.oracle.test;</span><br><span class="line">cn.sxt.gao.test;</span><br><span class="line">cn.sxt.gao.view;</span><br><span class="line">cn.sxt.gao.view.model;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong></p>
<ol>
<li>写项目时都要加包，不要使用默认包。</li>
<li>com.gao和com.gao.car，这两个包没有包含关系，是两个完全独立的包。只是逻辑上看起来后者是前者的一部分。</li>
</ol>
<p>示例：package的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sxt;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"helloworld"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="JDK中的主要包"><a href="#JDK中的主要包" class="headerlink" title="JDK中的主要包"></a>JDK中的主要包</h2><table>
<thead>
<tr>
<th>Java中的常用包</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>java.lang</td>
<td>包含一些Java语言的核心类，如String、Math、Integer、System和Thread，提供常用功能。</td>
</tr>
<tr>
<td>java.awt</td>
<td>包含了构成抽象窗口工具集（abstract window toolkits）的多个类，这些类被用来构建和管理应用程序的图形用户界面(GUI)。</td>
</tr>
<tr>
<td>java.net</td>
<td>包含执行与网络相关的操作的类。</td>
</tr>
<tr>
<td>java.io</td>
<td>包含能提供多种输入/输出功能的类。</td>
</tr>
<tr>
<td>java.util</td>
<td>包含一些实用工具类，如定义系统特性、使用与日期日历相关的函数。</td>
</tr>
</tbody></table>
<h2 id="导入类import"><a href="#导入类import" class="headerlink" title="导入类import"></a>导入类import</h2><blockquote>
<p>如果我们要使用其他包的类，需要使用<code>import</code>导入，从而可以在本类中直接通过类名来调用，否则就需要书写类的完整包名和类名。import后，便于编写代码，提高可维护性。</p>
</blockquote>
<p><strong>注意要点：</strong></p>
<ol>
<li>Java会默认导入<code>java.lang</code>包下所有的类，因此这些类我们可以直接使用。</li>
<li>如果导入两个同名的类，只能用包名+类名来显示调用相关类：　</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">java.util.Date date  = <span class="keyword">new</span>  java.util.Date();</span><br></pre></td></tr></table></figure>

<p>示例：导入同名类的处理　　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.sql.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.*;<span class="comment">//导入该包下所有的类。会降低编译速度，但不会降低运行速度。</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里指的是java.sql.Date</span></span><br><span class="line">        Date now; </span><br><span class="line">        <span class="comment">//java.util.Date因为和java.sql.Date类同名，需要完整路径</span></span><br><span class="line">        java.util.Date  now2 = <span class="keyword">new</span> java.util.Date();</span><br><span class="line">        System.out.println(now2);      </span><br><span class="line">        <span class="comment">//java.util包的非同名类不需要完整路径</span></span><br><span class="line">        Scanner input = <span class="keyword">new</span> Scanner(System.in);    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态导入"><a href="#静态导入" class="headerlink" title="静态导入"></a>静态导入</h2><blockquote>
<p><code>静态导入(static import)</code>是在JDK1.5新增加的功能，其作用是用于导入指定类的静态属性，这样我们可以直接使用静态属性。</p>
</blockquote>
<p>示例：静态导入的使用　　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.sxt;</span><br><span class="line"> <span class="comment">//以下两种静态导入的方式二选一即可</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.*;<span class="comment">//导入Math类的所有静态属性</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;<span class="comment">//导入Math类的PI属性</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">        System.out.println(random());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200708204755969.png" alt=""></p>
<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><h2 id="继承的实现"><a href="#继承的实现" class="headerlink" title="继承的实现"></a>继承的实现</h2><p>示例：使用<kbd>extends</kbd>实现继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"高淇"</span>,<span class="number">172</span>,<span class="string">"Java"</span>);</span><br><span class="line">        s.rest();</span><br><span class="line">        s.study();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> height;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rest</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"休息一会！"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String major; <span class="comment">//专业</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"在尚学堂，学习Java"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name,<span class="keyword">int</span> height,String major)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//天然拥有父类的属性</span></span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.height = height;</span><br><span class="line">        <span class="keyword">this</span>.major = major;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h2><blockquote>
<p><kbd>instanceof</kbd>是<code>二元运算符</code>，左边是对象，右边是类；当对象是右面类或子类所创建对象时，返回true；否则，返回false。比如：</p>
</blockquote>
<p>示例：使用instanceof运算符进行类型判断</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Student s = <span class="keyword">new</span> Student(<span class="string">"高淇"</span>,<span class="number">172</span>,<span class="string">"Java"</span>);</span><br><span class="line">        System.out.println(s <span class="keyword">instanceof</span> Person);</span><br><span class="line">        System.out.println(s <span class="keyword">instanceof</span> Student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>两条语句的输出结果都是true。</p>
<h2 id="继承使用要点"><a href="#继承使用要点" class="headerlink" title="继承使用要点"></a>继承使用要点</h2><ol>
<li><code>父类</code>也称作<code>超类</code>、<code>基类</code>、<code>派生类</code>等。</li>
<li>Java中只有<code>单继承</code>，没有像 C++ 那样的<code>多继承</code>。多继承会引起混乱，使得继承链过于复杂，系统难于维护。</li>
<li>Java中<code>类</code>没有多继承，<code>接口</code>有多继承。</li>
<li><code>子类</code>继承<code>父类</code>，可以得到父类的全部属性和方法 (除了父类的构造方法)，但不见得可以直接访问(比如，父类私有的属性和方法)。</li>
<li>如果定义一个类时，没有调用<code>extends</code>，则它的父类是：<code>java.lang.Object</code>。</li>
</ol>
<h2 id="方法的重写override"><a href="#方法的重写override" class="headerlink" title="方法的重写override"></a>方法的重写override</h2><blockquote>
<p>子类通过重写父类的方法，可以用自身的行为替换父类的行为。方法的重写是实现<code>多态</code>的必要条件。</p>
</blockquote>
<p>方法的重写需要符合下面的三个要点：</p>
<ol>
<li>“==”： 方法名、形参列表相同。</li>
<li>“≤”：返回值类型和声明异常类型，子类小于等于父类。</li>
<li>“≥”： 访问权限，子类大于等于父类。</li>
</ol>
<p>示例：方法重写</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestOverride</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Vehicle v1 = <span class="keyword">new</span> Vehicle();</span><br><span class="line">        Vehicle v2 = <span class="keyword">new</span> Horse();</span><br><span class="line">        Vehicle v3 = <span class="keyword">new</span> Plane();</span><br><span class="line">        v1.run();</span><br><span class="line">        v2.run();</span><br><span class="line">        v3.run();</span><br><span class="line">        v2.stop();</span><br><span class="line">        v3.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span> </span>&#123; <span class="comment">// 交通工具类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"跑...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"停止不动"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Horse</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123; <span class="comment">// 马也是交通工具</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重写父类方法</span></span><br><span class="line">        System.out.println(<span class="string">"四蹄翻飞，嘚嘚嘚..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Plane</span> <span class="keyword">extends</span> <span class="title">Vehicle</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123; <span class="comment">// 重写父类方法</span></span><br><span class="line">        System.out.println(<span class="string">"天上飞！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"空中不能停，坠毁了！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200708205941860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="Object类基本特性"><a href="#Object类基本特性" class="headerlink" title="Object类基本特性"></a>Object类基本特性</h2><blockquote>
<p><kbd>Object</kbd>类是所有Java类的<code>根基类</code>，也就意味着所有的Java对象都拥有Object类的属性和方法。如果在类的声明中未使用extends关键字指明其父类，则默认继承Object类。</p>
</blockquote>
<p>示例：Object类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span> <span class="title">Object</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="toString方法"><a href="#toString方法" class="headerlink" title="toString方法"></a>toString方法</h3><blockquote>
<p>Object类中定义有public String toString()方法，其返回值是 String 类型。Object类中toString方法的源码为：</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> getClass().getName() + <span class="string">"@"</span> + Integer.toHexString(hashCode());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>根据如上源码得知，默认会返回“类名+@+16进制的hashcode”。在打印输出或者用字符串连接对象时，会自动调用该对象的toString()方法。</p>
</blockquote>
<p>示例：toString()方法测试和重写toString()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name+<span class="string">",年龄："</span>+age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p=<span class="keyword">new</span> Person();</span><br><span class="line">        p.age=<span class="number">20</span>;</span><br><span class="line">        p.name=<span class="string">"李东"</span>;</span><br><span class="line">        System.out.println(<span class="string">"info:"</span>+p);</span><br><span class="line">         </span><br><span class="line">        Test t = <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(t);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200708210447530.png" alt=""></p>
<h3 id="和equals方法"><a href="#和equals方法" class="headerlink" title="==和equals方法"></a>==和equals方法</h3><blockquote>
<p>“==”代表比较双方是否相同。如果是基本类型则表示值相等，如果是引用类型则表示地址相等即是同一个对象。</p>
<p>Object类中定义有：public boolean <kbd>equals</kbd>(Object obj)方法，提供定义“对象内容相等”的逻辑。比如，我们在公安系统中认为id相同的人就是同一个人、学籍系统中认为学号相同的人就是同一个人。</p>
<p>Object 的 equals 方法默认就是比较两个对象的<code>hashcode</code>，是同一个对象的引用时返回 true 否则返回 false。但是，我们可以根据我们自己的要求重写equals方法。</p>
</blockquote>
<p>示例：equals方法测试和自定义类重写equals方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestEquals</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="number">123</span>,<span class="string">"高淇"</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="number">123</span>,<span class="string">"高小七"</span>);     </span><br><span class="line">        System.out.println(p1==p2);     <span class="comment">//false，不是同一个对象</span></span><br><span class="line">        System.out.println(p1.equals(p2));  <span class="comment">//true，id相同则认为两个对象内容相同</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"尚学堂"</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"尚学堂"</span>);</span><br><span class="line">        System.out.println(s1==s2);         <span class="comment">//false, 两个字符串不是同一个对象</span></span><br><span class="line">        System.out.println(s1.equals(s2));  <span class="comment">//true,  两个字符串内容相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(<span class="keyword">int</span> id,String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id=id;</span><br><span class="line">        <span class="keyword">this</span>.name=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">                Person c = (Person)obj;</span><br><span class="line">                <span class="keyword">if</span>(c.id==<span class="keyword">this</span>.id) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>JDK提供的一些类，如String、Date、包装类等，重写了Object的equals方法，调用这些类的equals方法， x.equals (y) ，当x和y所引用的对象是同一类对象且属性内容相等时（并不一定是相同对象），返回 true 否则返回 false。</p>
</blockquote>
<h1 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h1><h2 id="定义及其使用"><a href="#定义及其使用" class="headerlink" title="定义及其使用"></a>定义及其使用</h2><blockquote>
<p><code>super</code>是直接父类对象的引用。可以通过super来访问父类中被子类覆盖的方法或属性。</p>
<p>使用super调用普通方法，语句没有位置限制，可以在子类中随便调用。</p>
<p>若是构造方法的第一行代码没有显式的调用<code>super(...)</code>或者<code>this(...)</code>;那么Java默认都会调用super(),含义是调用父类的无参数构造方法。这里的super()可以省略。</p>
</blockquote>
<p>示例：super关键字的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuper01</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ChildClass().f();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatherClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">        value = <span class="number">100</span>;</span><br><span class="line">        System.out.println (<span class="string">"FatherClass.value="</span>+value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">FatherClass</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> value;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">f</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.f();  <span class="comment">//调用父类对象的普通方法</span></span><br><span class="line">        value = <span class="number">200</span>;</span><br><span class="line">        System.out.println(<span class="string">"ChildClass.value="</span>+value);</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        System.out.println(<span class="keyword">super</span>.value); <span class="comment">//调用父类对象的成员变量</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200708210916924.png" alt=""></p>
<h2 id="继承树追溯"><a href="#继承树追溯" class="headerlink" title="继承树追溯"></a>继承树追溯</h2><ul>
<li>属性/方法查找顺序：(比如：查找变量h)</li>
</ul>
<ol>
<li>查找当前类中有没有属性h</li>
<li>依次上溯每个父类，查看每个父类中是否有h，直到Object</li>
<li>如果没找到，则出现编译错误。</li>
<li>上面步骤，只要找到h变量，则这个过程终止。</li>
</ol>
<ul>
<li>构造方法调用顺序：</li>
</ul>
<blockquote>
<p>构造方法第一句总是：super(…)来调用父类对应的构造方法。所以，流程就是：先向上追溯到Object，然后再依次向下执行类的初始化块和构造方法，直到当前子类为止。</p>
</blockquote>
<p><strong>注</strong>：静态初始化块调用顺序，与构造方法调用顺序一样，不再重复。</p>
<p>示例：构造方法向上追溯执行测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSuper02</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"开始创建一个ChildClass对象......"</span>);</span><br><span class="line">        <span class="keyword">new</span> ChildClass();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FatherClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FatherClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建FatherClass"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildClass</span> <span class="keyword">extends</span> <span class="title">FatherClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ChildClass</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"创建ChildClass"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200708211358255.png" alt=""></p>
<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1><blockquote>
<p>需要让用户知道的才暴露出来，不需要让用户知道的全部隐藏起来，这就是<kbd>封装</kbd>。说的专业一点，封装就是把对象的属性和操作结合为一个独立的整体，并尽可能隐藏对象的内部实现细节。</p>
<p>我们程序设计要追求“高内聚，低耦合”。 高内聚就是类的内部数据操作细节自己完成，不允许外部干涉;低耦合是仅暴露少量的方法给外部使用，尽量方便外部调用。</p>
</blockquote>
<h2 id="封装的优点"><a href="#封装的优点" class="headerlink" title="封装的优点"></a>封装的优点</h2><ol>
<li>提高代码的安全性。</li>
<li>提高代码的复用性。</li>
<li>“高内聚”：封装细节，便于修改内部代码，提高可维护性。</li>
<li>“低耦合”：简化外部调用，便于调用者使用，便于扩展和协作。</li>
</ol>
<p>示例：没有封装的代码会出现一些问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person();</span><br><span class="line">        p.name = <span class="string">"小红"</span>;</span><br><span class="line">        p.age = -<span class="number">45</span>;<span class="comment">//年龄可以通过这种方式随意赋值，没有任何限制</span></span><br><span class="line">        System.out.println(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>我们都知道，年龄不可能是负数，也不可能超过130岁，但是如果没有使用封装的话，便可以给年龄赋值成任意的整数，这显然不符合我们的正常逻辑思维。执行结果如下图所示:</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200711205208405.png" alt=""></p>
<blockquote>
<p>再比如说，如果哪天我们需要将Person类中的age属性修改为String类型的，你会怎么办?你只有一处使用了这个类的话那还比较幸运，但如果你有几十处甚至上百处都用到了，那你岂不是要改到崩溃。而封装恰恰能解决这样的问题。如果使用封装，我们只需要稍微修改下Person类的setAge()方法即可，而无需修改使用了该类的客户代码。</p>
</blockquote>
<h2 id="封装的实现"><a href="#封装的实现" class="headerlink" title="封装的实现"></a>封装的实现</h2><blockquote>
<p>Java是使用“<code>访问控制符</code>”来控制哪些细节需要封装，哪些细节需要暴露的。 Java中4种“访问控制符”分别为<kbd>private</kbd>、<kbd>default</kbd>、<kbd>protected</kbd>、<kbd>public</kbd>，它们说明了面向对象的封装性，所以我们要利用它们尽可能的让访问权限降到最低，从而提高安全性。</p>
<p>下面详细讲述它们的访问权限问题。其访问权限范围如下表所示。</p>
</blockquote>
<table>
<thead>
<tr>
<th>修饰符</th>
<th>同一个类</th>
<th>同一个包</th>
<th>子类</th>
<th>所有类</th>
</tr>
</thead>
<tbody><tr>
<td>private</td>
<td>√</td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>default</td>
<td>√</td>
<td>√</td>
<td></td>
<td></td>
</tr>
<tr>
<td>protected</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td></td>
</tr>
<tr>
<td>public</td>
<td>√</td>
<td>√</td>
<td>√</td>
<td>√</td>
</tr>
</tbody></table>
<ol>
<li>private 表示私有，只有自己类能访问</li>
<li>default表示没有修饰符修饰，只有同一个包的类能访问</li>
<li>protected表示可以被同一个包的类以及其他包中的子类访问</li>
<li>public表示可以被该项目的所有包中的所有类访问</li>
</ol>
<blockquote>
<p>下面做进一步说明Java中4种访问权限修饰符的区别：首先我们创建4个类：Person类、Student类、Animal类和Computer类，分别比较本类、本包、子类、其他包的区别。</p>
</blockquote>
<ol>
<li>public访问权限修饰符：</li>
</ol>
<p>public访问权限—本类中访问public属性：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711210906967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p>public访问权限—本包中访问public属性：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711210852858.png" alt=""></p>
<p>public访问权限—不同包中的子类访问public属性：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711210832730.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p>public访问权限—不同包中的非子类访问public属性：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711210817914.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<blockquote>
<p>通过上四张图可以说明，public修饰符的访问权限为：该项目的所有包中的所有类。</p>
</blockquote>
<ol start="2">
<li>protected访问权限修饰符：将Person类中属性改为protected，其他类不修改。</li>
</ol>
<p>protected访问权限—修改后的Person类：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711210722342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p>protected访问权限—不同包中的非子类不能访问protected属性：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711210707157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<blockquote>
<p>通过上两张图可以说明，protected修饰符的访问权限为：同一个包中的类以及其他包中的子类。</p>
</blockquote>
<ol start="3">
<li>默认访问权限修饰符：将Person类中属性改为默认的，其他类不修改。</li>
</ol>
<p>默认访问权限—修改后的Person类：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711210637369.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<blockquote>
<p>通过上图可以说明，默认修饰符的访问权限为：同一个包中的类。</p>
</blockquote>
<ol start="4">
<li>private访问权限修饰符：将Person类中属性改为private，其他类不修改。</li>
</ol>
<p>private访问权限—修改后的Person类：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711210615208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<blockquote>
<p>通过上图可以说明，private修饰符的访问权限为：同一个类。</p>
</blockquote>
<h2 id="封装的使用细节"><a href="#封装的使用细节" class="headerlink" title="封装的使用细节"></a>封装的使用细节</h2><p><strong>类的属性的处理</strong>:</p>
<ol>
<li>一般使用private访问权限。</li>
<li>提供相应的get/set方法来访问相关属性，这些方法通常是public修饰的，以提供对属性的赋值与读取操作(注意：boolean变量的get方法是is开头!)。</li>
<li>一些只用于本类的辅助性方法可以用private修饰，希望其他类调用的方法用public修饰。</li>
</ol>
<p>示例：JavaBean的封装实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 属性一般使用private修饰</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag;</span><br><span class="line">    <span class="comment">// 为属性提供public修饰的set/get方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFlag</span><span class="params">()</span> </span>&#123;<span class="comment">// 注意：boolean类型的属性get方法是is开头的</span></span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFlag</span><span class="params">(<span class="keyword">boolean</span> flag)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flag = flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>下面我们使用封装来解决一下上面提到的年龄非法赋值的问题。</p>
</blockquote>
<p>示例：封装的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="comment">// this.age = age;//构造方法中不能直接赋值，应该调用setAge方法</span></span><br><span class="line">        setAge(age);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//在赋值之前先判断年龄是否合法</span></span><br><span class="line">        <span class="keyword">if</span> (age &gt; <span class="number">130</span> || age &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = <span class="number">18</span>;<span class="comment">//不合法赋默认值18</span></span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">this</span>.age = age;<span class="comment">//合法才能赋值给属性age</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person [name="</span> + name + <span class="string">", age="</span> + age + <span class="string">"]"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="comment">//p1.name = "小红"; //编译错误</span></span><br><span class="line">        <span class="comment">//p1.age = -45;  //编译错误</span></span><br><span class="line">        p1.setName(<span class="string">"小红"</span>);</span><br><span class="line">        p1.setAge(-<span class="number">45</span>);</span><br><span class="line">        System.out.println(p1);</span><br><span class="line">         </span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"小白"</span>, <span class="number">300</span>);</span><br><span class="line">        System.out.println(p2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711211154433.png" alt=""></p>
<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1><blockquote>
<p><kbf>多态</kbd>指的是同一个方法调用，由于对象不同可能会有不同的行为。现实生活中，同一个方法，具体实现会完全不同。 比如：同样是调用人的“休息”方法，张三是睡觉，李四是旅游，高淇老师是敲代码，数学教授是做数学题; 同样是调用人“吃饭”的方法，中国人用筷子吃饭，英国人用刀叉吃饭，印度人用手吃饭。</p>
</blockquote>
<p><strong>多态的要点</strong>：</p>
<ol>
<li>多态是方法的多态，不是属性的多态(多态与属性无关)。</li>
<li>多态的存在要有3个必要条件：继承，方法重写，父类引用指向子类对象。</li>
<li>父类引用指向子类对象后，用该父类引用调用子类重写的方法，此时多态就出现了。</li>
</ol>
<p>示例：多态和类型转换测试</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"叫了一声！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"旺旺旺！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeDoor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看门中...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"喵喵喵喵！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPolym</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal a1 = <span class="keyword">new</span> Cat(); <span class="comment">// 向上可以自动转型</span></span><br><span class="line">        <span class="comment">//传的具体是哪一个类就调用哪一个类的方法。大大提高了程序的可扩展性。</span></span><br><span class="line">        animalCry(a1);</span><br><span class="line">        Animal a2 = <span class="keyword">new</span> Dog();</span><br><span class="line">        animalCry(a2);<span class="comment">//a2为编译类型，Dog对象才是运行时类型。</span></span><br><span class="line">         </span><br><span class="line">        <span class="comment">//编写程序时，如果想调用运行时类型的方法，只能进行强制类型转换。</span></span><br><span class="line">        <span class="comment">// 否则通不过编译器的检查。</span></span><br><span class="line">        Dog dog = (Dog)a2;<span class="comment">//向下需要强制类型转换</span></span><br><span class="line">        dog.seeDoor();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">// 有了多态，只需要让增加的这个类继承Animal类就可以了。</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">animalCry</span><span class="params">(Animal a)</span> </span>&#123;</span><br><span class="line">        a.shout();</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="comment">/* 如果没有多态，我们这里需要写很多重载的方法。</span></span><br><span class="line"><span class="comment">     * 每增加一种动物，就需要重载一种动物的喊叫方法。非常麻烦。</span></span><br><span class="line"><span class="comment">    static void animalCry(Dog d) &#123;</span></span><br><span class="line"><span class="comment">        d.shout();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    static void animalCry(Cat c) &#123;</span></span><br><span class="line"><span class="comment">        c.shout();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711211340463.png" alt=""></p>
<blockquote>
<p>上例给大家展示了多态最为多见的一种用法，即父类引用做方法的形参，实参可以是任意的子类对象，可以通过不同的子类对象实现不同的行为方式。</p>
<p>由此，我们可以看出多态的主要优势是提高了代码的可扩展性，符合开闭原则。但是多态也有弊端，就是无法调用子类特有的功能，比如，我不能使用父类的引用变量调用Dog类特有的seeDoor()方法。</p>
<p>那如果我们就想使用子类特有的功能行不行呢?行!这就是我们下一章节所讲的内容：<strong>对象的转型</strong>。</p>
</blockquote>
<h1 id="对象的转型"><a href="#对象的转型" class="headerlink" title="对象的转型"></a>对象的转型</h1><blockquote>
<p>父类引用指向子类对象，我们称这个过程为<strong>向上转型</strong>，属于<kbd>自动类型转换</kbd>。</p>
<p>向上转型后的父类引用变量只能调用它编译类型的方法，不能调用它运行时类型的方法。这时，我们就需要进行<kbd>强制类型转换</kbd>，我们称之为<strong>向下转型</strong>!</p>
</blockquote>
<p>示例：对象的转型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCasting</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> String(<span class="string">"北京尚学堂"</span>); <span class="comment">// 向上可以自动转型</span></span><br><span class="line">        <span class="comment">// obj.charAt(0) 无法调用。编译器认为obj是Object类型而不是String类型</span></span><br><span class="line">        <span class="comment">/* 编写程序时，如果想调用运行时类型的方法，只能进行强制类型转换。</span></span><br><span class="line"><span class="comment">         * 不然通不过编译器的检查。 */</span></span><br><span class="line">        String str = (String) obj; <span class="comment">// 向下转型</span></span><br><span class="line">        System.out.println(str.charAt(<span class="number">0</span>)); <span class="comment">// 位于0索引位置的字符</span></span><br><span class="line">        System.out.println(obj == str); <span class="comment">// true.他们俩运行时是同一个对象</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711211850779.png" alt=""></p>
<blockquote>
<p>在向下转型过程中，必须将引用变量转成真实的子类类型(运行时类型)否则会出现类型转换异常ClassCastException。如下例所示。</p>
</blockquote>
<p>示例：类型转换异常</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCasting2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> String(<span class="string">"北京尚学堂"</span>);</span><br><span class="line">        <span class="comment">//真实的子类类型是String，但是此处向下转型为StringBuffer</span></span><br><span class="line">        StringBuffer str = (StringBuffer) obj;</span><br><span class="line">        System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711212014705.png" alt=""></p>
<blockquote>
<p>为了避免出现这种异常，我们可以使用<kbd>instanceof</kbd>运算符进行判断，如下例所示。</p>
</blockquote>
<p>示例：向下转型中使用instanceof</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCasting3</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Object obj = <span class="keyword">new</span> String(<span class="string">"北京尚学堂"</span>);</span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">            String str = (String)obj;</span><br><span class="line">            System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> StringBuffer)&#123;</span><br><span class="line">            StringBuffer str = (StringBuffer) obj;</span><br><span class="line">            System.out.println(str.charAt(<span class="number">0</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711212148518.png" alt=""></p>
<h1 id="final关键字"><a href="#final关键字" class="headerlink" title="final关键字"></a>final关键字</h1><p><strong>final关键字的作用</strong>：</p>
<ol>
<li>修饰变量: 被他修饰的变量不可改变。一旦赋了初值，就不能被重新赋值。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span>  <span class="keyword">int</span>   MAX_SPEED = <span class="number">120</span>;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>修饰方法：该方法不可被子类重写。但是可以被重载!</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">final</span>  <span class="keyword">void</span>  <span class="title">study</span><span class="params">()</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修饰类: 修饰的类不能被继承。比如：Math、String等。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span>   <span class="class"><span class="keyword">class</span>  <span class="title">A</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>final修饰方法如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200711212428402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p>final修饰类如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200711212454410.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="抽象方法和抽象类"><a href="#抽象方法和抽象类" class="headerlink" title="抽象方法和抽象类"></a>抽象方法和抽象类</h1><ul>
<li>抽象方法</li>
</ul>
<blockquote>
<p>使用<kbd>abstract</kbd>修饰的方法，没有方法体，只有声明。定义的是一种“规范”，就是告诉子类必须要给抽象方法提供具体的实现。</p>
</blockquote>
<ul>
<li>抽象类</li>
</ul>
<blockquote>
<p>包含抽象方法的类就是抽象类。通过<kbd>abstract</kbd方法定义规范，然后要求子类必须定义具体实现。通过抽象类，我们就可以做到严格限制子类的设计，使子类之间更加通用。</p>
</blockquote>
<p>示例：抽象类和抽象方法的基本用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类</span></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>;  <span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123; </span><br><span class="line">    <span class="comment">//子类必须实现父类的抽象方法，否则编译错误</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"汪汪汪！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">seeDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"看门中...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//测试抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestAbstractClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Dog a = <span class="keyword">new</span> Dog();</span><br><span class="line">        a.shout();</span><br><span class="line">        a.seeDoor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>抽象类的使用要点</strong>:</p>
<ol>
<li>有抽象方法的类只能定义成抽象类</li>
<li>抽象类不能实例化，即不能用new来实例化抽象类。</li>
<li>抽象类可以包含属性、方法、构造方法。但是构造方法不能用来new实例，只能用来被子类调用。</li>
<li>抽象类只能用来被继承。</li>
<li>抽象方法必须被子类实现。</li>
</ol>
<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口的定义和使用"><a href="#接口的定义和使用" class="headerlink" title="接口的定义和使用"></a>接口的定义和使用</h2><p><strong>声明格式</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[访问修饰符]  interface 接口名   [extends  父接口1，父接口2…]  &#123;</span><br><span class="line">常量定义；  </span><br><span class="line">方法定义；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>定义接口的详细说明</strong>：</p>
<ol>
<li>访问修饰符：只能是public或默认。</li>
<li>接口名：和类名采用相同命名机制。</li>
<li>extends：接口可以多继承。</li>
<li>常量：接口中的属性只能是常量，总是：public static final 修饰。不写也是。</li>
<li>方法：接口中的方法只能是：public abstract。 省略的话，也是public abstract。</li>
</ol>
<p><strong>要点</strong>：</p>
<ol>
<li>子类通过implements来实现接口中的规范。</li>
<li>接口不能创建实例，但是可用于声明引用变量类型。</li>
<li>一个类实现了接口，必须实现接口中所有的方法，并且这些方法只能是public的。</li>
<li>JDK1.7之前，接口中只能包含静态常量、抽象方法，不能有普通属性、构造方法、普通方法。</li>
<li>JDK1.8后，接口中包含普通的静态方法。</li>
</ol>
<p>示例：接口的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Volant volant = <span class="keyword">new</span> Angel();</span><br><span class="line">        volant.fly();</span><br><span class="line">        System.out.println(Volant.FLY_HIGHT);</span><br><span class="line">         </span><br><span class="line">        Honest honest = <span class="keyword">new</span> GoodMan();</span><br><span class="line">        honest.helpOther();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**飞行接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Volant</span> </span>&#123; </span><br><span class="line">    <span class="keyword">int</span> FLY_HIGHT = <span class="number">100</span>;  <span class="comment">// 总是：public static final类型的；</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span></span>;   <span class="comment">//总是：public abstract void fly();</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**善良接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Honest</span> </span>&#123; </span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">helpOther</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**Angle类实现飞行接口和善良接口*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Angel</span> <span class="keyword">implements</span> <span class="title">Volant</span>, <span class="title">Honest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是天使，飞起来啦！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helpOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"扶老奶奶过马路！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GoodMan</span> <span class="keyword">implements</span> <span class="title">Honest</span> </span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">helpOther</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"扶老奶奶过马路！"</span>);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BirdMan</span> <span class="keyword">implements</span> <span class="title">Volant</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我是鸟人，正在飞！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711213502534.png" alt=""></p>
<h2 id="接口的多继承"><a href="#接口的多继承" class="headerlink" title="接口的多继承"></a>接口的多继承</h2><blockquote>
<p>接口完全支持多继承。和类的继承类似，子接口扩展某个父接口，将会获得父接口中所定义的一切。</p>
</blockquote>
<p>示例：接口的多继承</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testa</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testb</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**接口可以多继承：接口C继承接口A和B*/</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">C</span> <span class="keyword">extends</span> <span class="title">A</span>, <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">testc</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> <span class="keyword">implements</span> <span class="title">C</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testb</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><h2 id="内部类介绍"><a href="#内部类介绍" class="headerlink" title="内部类介绍"></a>内部类介绍</h2><blockquote>
<p>一般情况，我们把类定义成独立的单元。有些情况下，我们把一个类放在另一个类的内部定义，称为<kbd>内部类(innerclasses)</kbd>。</p>
<p>内部类可以使用public、default、protected 、private以及static修饰。而外部顶级类(我们以前接触的类)只能使用public和default修饰。</p>
</blockquote>
<p><strong>注意：</strong></p>
<blockquote>
<p>内部类只是一个编译时概念，一旦我们编译成功，就会成为完全不同的两个类。对于一个名为Outer的外部类和其内部定义的名为Inner的内部类。编译完成后会出现Outer.class和Outer$Inner.class两个类的字节码文件。所以内部类是相对独立的一种存在，其成员变量/方法名可以和外部类的相同。</p>
</blockquote>
<p>示例：内部类介绍</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**外部类Outer*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(age);<span class="comment">//10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**内部类Inner*/</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="comment">//内部类中可以声明与外部类同名的属性与方法</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(age);<span class="comment">//20</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上例编译后会产生两个不同的字节码文件，如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711214113306.png" alt=""></p>
<h2 id="内部类的作用"><a href="#内部类的作用" class="headerlink" title="内部类的作用"></a>内部类的作用</h2><ol>
<li>内部类提供了更好的封装。只能让外部类直接访问，不允许同一个包中的其他类直接访问。</li>
<li>内部类可以直接访问外部类的私有属性，内部类被当成其外部类的成员。 但外部类不能访问内部类的内部属性。</li>
<li>接口只是解决了多重继承的部分问题，而内部类使得多重继承的解决方案变得更加完整。</li>
</ol>
<h2 id="内部类的使用场合"><a href="#内部类的使用场合" class="headerlink" title="内部类的使用场合"></a>内部类的使用场合</h2><ol>
<li>由于内部类提供了更好的封装特性，并且可以很方便的访问外部类的属性。所以，在只为外部类提供服务的情况下可以优先考虑使用内部类。</li>
<li>使用内部类间接实现多继承：每个内部类都能独立地继承一个类或者实现某些接口，所以无论外部类是否已经继承了某个类或者实现了某些接口，对于内部类没有任何影响。</li>
</ol>
<h2 id="内部类的分类"><a href="#内部类的分类" class="headerlink" title="内部类的分类"></a>内部类的分类</h2><blockquote>
<p>在Java中内部类主要分为<code>成员内部类</code>（<code>非静态内部类</code>、<code>静态内部类</code>）、<code>匿名内部类</code>、<code>局部内部类</code>。</p>
</blockquote>
<h3 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h3><blockquote>
<p>可以使用private、default、protected、public任意进行修饰。 </p>
<p>类文件：外部类$内部类.class</p>
</blockquote>
<h4 id="非静态内部类"><a href="#非静态内部类" class="headerlink" title="非静态内部类"></a>非静态内部类</h4><blockquote>
<p>外部类里使用非静态内部类和平时使用其他类没什么不同</p>
</blockquote>
<ol>
<li><p>非静态内部类必须寄存在一个外部类对象里。因此，如果有一个非静态内部类对象那么一定存在对应的外部类对象。非静态内部类对象单独属于外部类的某个对象。</p>
</li>
<li><p>非静态内部类可以直接访问外部类的成员，但是外部类不能直接访问非静态内部类成员。</p>
</li>
<li><p>非静态内部类不能有静态方法、静态属性和静态初始化块。</p>
</li>
<li><p>外部类的静态方法、静态代码块不能访问非静态内部类，包括不能使用非静态内部类定义变量、创建实例。</p>
</li>
<li><p>成员变量访问要点：</p>
<ul>
<li>内部类里方法的局部变量：变量名。</li>
<li>内部类属性：this.变量名。</li>
<li>外部类属性：外部类名.this.变量名。</li>
</ul>
</li>
</ol>
<p>示例：成员变量的访问要点</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age = <span class="number">10</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> age = <span class="number">20</span>;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> age = <span class="number">30</span>;</span><br><span class="line">            System.out.println(<span class="string">"内部类方法里的局部变量age:"</span> + age);<span class="comment">// 30</span></span><br><span class="line">            System.out.println(<span class="string">"内部类的成员变量age:"</span> + <span class="keyword">this</span>.age);<span class="comment">// 20</span></span><br><span class="line">            System.out.println(<span class="string">"外部类的成员变量age:"</span> + Outer.<span class="keyword">this</span>.age);<span class="comment">// 10</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>内部类的访问：</li>
</ol>
<ul>
<li>外部类中定义内部类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Inner()</span><br></pre></td></tr></table></figure>

<ul>
<li>外部类以外的地方使用非静态内部类：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Outer.Inner  varname = <span class="keyword">new</span> Outer().<span class="keyword">new</span> Inner()。</span><br></pre></td></tr></table></figure>

<p>示例：内部类的访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//先创建外部类实例，然后使用该外部类实例创建内部类实例</span></span><br><span class="line">        Outer.Inner inner = <span class="keyword">new</span> Outer().<span class="keyword">new</span> Inner();</span><br><span class="line">        inner.show();</span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        Outer.Inner inn = outer.<span class="keyword">new</span> Inner();</span><br><span class="line">        inn.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/2020071121561157.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h4 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h4><ol>
<li>定义方式：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span>  <span class="class"><span class="keyword">class</span>   <span class="title">ClassName</span> </span>&#123;</span><br><span class="line"><span class="comment">//类体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>使用要点：</li>
</ol>
<ul>
<li>当一个静态内部类对象存在，并不一定存在对应的外部类对象。 因此，静态内部类的实例方法不能直接访问外部类的实例方法。</li>
<li>静态内部类看做外部类的一个静态成员。 因此，外部类的方法中可以通过：“静态内部类.名字”的方式访问静态内部类的静态成员，通过 new 静态内部类()访问静态内部类的实例。</li>
</ul>
<p>示例：静态内部类的访问</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="comment">//相当于外部类的一个静态成员</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStaticInnerClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//通过 new 外部类名.内部类名() 来创建内部类对象</span></span><br><span class="line">        Outer.Inner inner =<span class="keyword">new</span> Outer.Inner();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><blockquote>
<p>适合那种只需要使用一次的类。比如：键盘监听操作等等。</p>
</blockquote>
<p>语法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span>  父类构造器(实参类表) \实现接口 () &#123;</span><br><span class="line">           <span class="comment">//匿名内部类类体！</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>示例：匿名内部类的使用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.addWindowListener(<span class="keyword">new</span> WindowAdapter()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">            System.exit(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="keyword">this</span>.addKeyListener(<span class="keyword">new</span> KeyAdapter()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">            myTank.keyPressed(e);</span><br><span class="line">        &#125;      </span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyReleased</span><span class="params">(KeyEvent e)</span> </span>&#123;</span><br><span class="line">            myTank.keyReleased(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong></p>
<ol>
<li>匿名内部类没有访问修饰符。</li>
<li>匿名内部类没有构造方法。因为它连名字都没有那又何来构造方法呢。</li>
</ol>
<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><blockquote>
<p>还有一种内部类，它是定义在方法内部的，作用域只限于本方法，称为局部内部类。</p>
<p>局部内部类的的使用主要是用来解决比较复杂的问题，想创建一个类来辅助我们的解决方案，到那时又不希望这个类是公共可用的，所以就产生了局部内部类。局部内部类和成员内部类一样被编译，只是它的作用域发生了改变，它只能在该方法中被使用，出了该方法就会失效。</p>
<p>局部内部类在实际开发中应用很少。</p>
</blockquote>
<p>示例：方法中的内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//作用域仅限于该方法</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">fun</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"helloworld"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">new</span> Inner().fun();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test2().show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711220036861.png" alt=""></p>
<h1 id="String基础"><a href="#String基础" class="headerlink" title="String基础"></a>String基础</h1><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><ol>
<li>String类又称作不可变字符序列。</li>
<li>String位于java.lang包中，Java程序默认导入java.lang包下的所有类。</li>
<li>Java字符串就是Unicode字符序列，例如字符串“Java”就是4个Unicode字符’J’、’a’、’v’、’a’组成的。</li>
<li>Java没有内置的字符串类型，而是在标准Java类库中提供了一个预定义的类String，每个用双引号括起来的字符串都是String类的一个实例。</li>
</ol>
<p>示例：String类的实例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String e = <span class="string">""</span>  ; <span class="comment">// 空字符串</span></span><br><span class="line">String greeting = <span class="string">" Hello World "</span>;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Java允许使用符号”+”把两个字符串连接起来。</li>
</ol>
<p>示例：字符串连接</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String s1 = <span class="string">"Hello"</span>;</span><br><span class="line">String s2 = <span class="string">"World! "</span>;</span><br><span class="line">String s = s1 + s2; <span class="comment">//HelloWorld!</span></span><br></pre></td></tr></table></figure>

<ul>
<li>符号”+”把两个字符串按给定的顺序连接在一起，并且是完全按照给定的形式。</li>
<li>当”+”运算符两侧的操作数中只要有一个是字符串(String)类型，系统会自动将另一个操作数转换为字符串然后再进行连接。</li>
</ul>
<p>示例：”+”连接符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> age = <span class="number">18</span>;</span><br><span class="line">String str = <span class="string">"age is"</span> + age;  <span class="comment">//str赋值为"age is 18"</span></span><br><span class="line"><span class="comment">//这种特性通常被用在输出语句中：</span></span><br><span class="line">System.out.println(<span class="string">"age  is"</span> + age);</span><br></pre></td></tr></table></figure>

<h2 id="String类和常量池"><a href="#String类和常量池" class="headerlink" title="String类和常量池"></a>String类和常量池</h2><blockquote>
<p>在Java的内存分析中，我们会经常听到关于“常量池”的描述，实际上常量池也分了以下三种：</p>
</blockquote>
<ol>
<li>全局字符串常量池(String Pool)</li>
</ol>
<blockquote>
<p>全局字符串常量池中存放的内容是在类加载完成后存到String Pool中的，在每个VM中只有一份，存放的是字符串常量的引用值(在堆中生成字符串对象实例)。</p>
</blockquote>
<ol start="2">
<li>class文件常量池(Class Constant Pool)</li>
</ol>
<blockquote>
<p>class常量池是在编译的时候每个class都有的，在编译阶段，存放的是常量(文本字符串、final常量等)和符号引用。</p>
</blockquote>
<ol start="3">
<li>运行时常量池(Runtime Constant Pool)</li>
</ol>
<blockquote>
<p>运行时常量池是在类加载完成之后，将每个class常量池中的符号引用值转存到运行时常量池中，也就是说，每个class都有一个运行时常量池，类在解析之后，将符号引用替换成直接引用，与全局常量池中的引用值保持一致。</p>
</blockquote>
<p>示例：常量池</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String str1 = <span class="string">"abc"</span>;</span><br><span class="line">String str2 = <span class="keyword">new</span> String(<span class="string">"def"</span>);</span><br><span class="line">String str3 = <span class="string">"abc"</span>;</span><br><span class="line">String str4 = str2.intern();</span><br><span class="line">String str5 = <span class="string">"def"</span>;</span><br><span class="line">System.out.println(str1 == str3);<span class="comment">// true</span></span><br><span class="line">System.out.println(str2 == str4);<span class="comment">// false</span></span><br><span class="line">System.out.println(str4 == str5);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>上例中经过编译之后，在该类的<code>class常量池</code>中存放一些符号引用，然后类加载之后，将<code>class常量池</code>中存放的符号引用转存到<code>运行时常量池</code>中，然后经过验证，准备阶段之后，在堆中生成驻留字符串的实例对象(也就是上例中str1所指向的“abc”实例对象)，然后将这个对象的引用存到全局String Pool中，也就是String Pool中，最后在解析阶段，要把运行时常量池中的符号引用替换成直接引用，那么就直接查询String Pool，保证String Pool里的引用值与运行时常量池中的引用值一致，大概整个过程就是这样了。</p>
<p>回到上例的程序，现在就很容易解释整个程序的内存分配过程了，首先，在堆中会有一个“abc”实例，全局String Pool中存放着“abc”的一个引用值，然后在运行第二句的时候会生成两个实例，一个是“def”的实例对象，并且String Pool中存储一个“def”的引用值，还有一个是new出来的一个“def”的实例对象，与上面那个是不同的实例，当在解析str3的时候查找String Pool，里面有“abc”的全局驻留字符串引用，所以str3的引用地址与之前的那个已存在的相同，str4是在运行的时候调用intern()函数，返回String Pool中“def”的引用值，如果没有就将str2的引用值添加进去，在这里，String Pool中已经有了“def”的引用值了，所以返回上面在new str2的时候添加到String Pool中的 “def”引用值，最后str5在解析的时候就也是指向存在于String Pool中的“def”的引用值，那么这样一分析之后，结果就容易理解了。</p>
</blockquote>
<h2 id="String类常用的方法"><a href="#String类常用的方法" class="headerlink" title="String类常用的方法"></a>String类常用的方法</h2><p><img src="https://img-blog.csdnimg.cn/20200711221123357.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p>示例：String类常用方法一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"core Java"</span>;</span><br><span class="line">        String s2 = <span class="string">"Core Java"</span>;</span><br><span class="line">        System.out.println(s1.charAt(<span class="number">3</span>));<span class="comment">//提取下标为3的字符</span></span><br><span class="line">        System.out.println(s2.length());<span class="comment">//字符串的长度</span></span><br><span class="line">        System.out.println(s1.equals(s2));<span class="comment">//比较两个字符串是否相等</span></span><br><span class="line">        System.out.println(s1.equalsIgnoreCase(s2));<span class="comment">//比较两个字符串（忽略大小写）</span></span><br><span class="line">        System.out.println(s1.indexOf(<span class="string">"Java"</span>));<span class="comment">//字符串s1中是否包含Java</span></span><br><span class="line">        System.out.println(s1.indexOf(<span class="string">"apple"</span>));<span class="comment">//字符串s1中是否包含apple</span></span><br><span class="line">        String s = s1.replace(<span class="string">' '</span>, <span class="string">'&amp;'</span>);<span class="comment">//将s1中的空格替换成&amp;</span></span><br><span class="line">        System.out.println(<span class="string">"result is :"</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711221252703.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p>示例：String类常用方法二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringTest2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s = <span class="string">""</span>;</span><br><span class="line">        String s1 = <span class="string">"How are you?"</span>;</span><br><span class="line">        System.out.println(s1.startsWith(<span class="string">"How"</span>));<span class="comment">//是否以How开头</span></span><br><span class="line">        System.out.println(s1.endsWith(<span class="string">"you"</span>));<span class="comment">//是否以you结尾</span></span><br><span class="line">        s = s1.substring(<span class="number">4</span>);<span class="comment">//提取子字符串：从下标为4的开始到字符串结尾为止</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">        s = s1.substring(<span class="number">4</span>, <span class="number">7</span>);<span class="comment">//提取子字符串：下标[4, 7) 不包括7</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">        s = s1.toLowerCase();<span class="comment">//转小写</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">        s = s1.toUpperCase();<span class="comment">//转大写</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">        String s2 = <span class="string">"  How old are you!! "</span>;</span><br><span class="line">        s = s2.trim();<span class="comment">//去除字符串首尾的空格。注意：中间的空格不能去除</span></span><br><span class="line">        System.out.println(s);</span><br><span class="line">        System.out.println(s2);<span class="comment">//因为String是不可变字符串，所以s2不变</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711221309858.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="字符串相等的判断"><a href="#字符串相等的判断" class="headerlink" title="字符串相等的判断"></a>字符串相等的判断</h2><ol>
<li><kbd>equals</kbd>方法用来检测两个字符串内容是否相等。如果字符串s和t内容相等，则s.equals(t)返回true，否则返回false。</li>
<li>要测试两个字符串除了大小写区别外是否是相等的，需要使用<kbd>equalsIgnoreCase</kbd>方法。</li>
<li>判断字符串是否相等不要使用”==”。</li>
</ol>
<p>示例：忽略大小写的字符串比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="string">"Hello"</span>.equalsIgnoreCase(<span class="string">"hellO"</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>示例：字符串的比较”==”与equals()方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStringEquals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String g1 = <span class="string">"北京尚学堂"</span>;</span><br><span class="line">        String g2 = <span class="string">"北京尚学堂"</span>;</span><br><span class="line">        String g3 = <span class="keyword">new</span> String(<span class="string">"北京尚学堂"</span>);</span><br><span class="line">        System.out.println(g1 == g2); <span class="comment">// true  指向同样的字符串常量对象</span></span><br><span class="line">        System.out.println(g1 == g3); <span class="comment">// false  g3是新创建的对象</span></span><br><span class="line">        System.out.println(g1.equals(g3)); <span class="comment">// true  g1和g3里面的字符串内容是一样的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711221547565.png" alt=""></p>
<p>上例的内存分析如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711221616244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><p><kbd>开闭原则(Open-Closed Principle)</kbd>就是让设计的系统对扩展开放，对修改封闭。</p>
<ul>
<li>对扩展开放：</li>
</ul>
<blockquote>
<p>就是指，应对需求变化要灵活。 要增加新功能时，不需要修改已有的代码，增加新代码即可。</p>
</blockquote>
<ul>
<li>对修改封闭：</li>
</ul>
<blockquote>
<p>就是指，核心部分经过精心设计后，不再因为需求变化而改变。</p>
<p>在实际开发中，我们无法完全做到，但应尽量遵守开闭原则。</p>
</blockquote>
<h1 id="模板方法模式和回调机制"><a href="#模板方法模式和回调机制" class="headerlink" title="模板方法模式和回调机制"></a>模板方法模式和回调机制</h1><blockquote>
<p>模板方法模式很常用，其目的是在一个方法中定义一个算法骨架，而将一些步骤延迟到子类中。模板方法使得子类可以在不改变算法结构的情况下，重新定义算法的某些步骤。在标准的模板方法模式实现中，主要是使用继承的方式，来让父类在运行期间可以调用到子类的方法。 详见抽象类部分示例。</p>
<p>其实在Java开发中，还有另外一个方法可以实现同样的功能，那就是Java回调技术。回调是一种双向的调用模式，也就是说，被调用的接口被调用时也会调用对方的接口，简单点说明就是：A类中调用B类中的C方法，然后B类中的C方法中反过来调用A类中的D方法，那么D这个方法就叫回调方法。</p>
</blockquote>
<p><strong>回调的具体过程如下</strong>：</p>
<ol>
<li>Class A实现接口CallBack —— 背景1</li>
<li>class A中包含class B的引用 ——背景2</li>
<li>class B有一个参数为CallBack的方法C ——背景3</li>
<li>前三条是我们的准备条件，接下来A的对象调用B的方法C</li>
<li>然后class B就可以在C方法中调用A的方法D</li>
</ol>
<blockquote>
<p>这样说大家可能还是不太理解，下面我们根据下例来说明回调机制。该示例的生活背景为：有一天小刘遇到一个很难的问题“学习Java选哪家机构呢?”，于是就打电话问小高，小高一时也不太了解行情，就跟小刘说，我现在还有事，等忙完了给你咨询咨询，小刘也不会傻傻的拿着电话去等小高的答案，于是小刘对小高说，先挂电话吧，你知道答案后再打我电话告诉我吧，于是挂了电话。小高先去办自己的事情去了，过了几个小时，小高打电话给小刘，告诉他答案是“学Java当然去……”。</p>
</blockquote>
<p>示例：回调机制示例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 回调接口  </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">CallBack</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小高知道答案后告诉小刘时需要调用的方法，即回调方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> result 是问题的答案 </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answer</span><span class="params">(String result)</span></span>;  </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 小刘类：实现了回调接口CallBack（背景一） </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Liu</span> <span class="keyword">implements</span> <span class="title">CallBack</span> </span>&#123;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 包含小高对象的引用 （背景二） </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="keyword">private</span> Gao gao;   </span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Liu</span><span class="params">(Gao gao)</span></span>&#123;  </span><br><span class="line">        <span class="keyword">this</span>.gao = gao;  </span><br><span class="line">    &#125;  </span><br><span class="line">       </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小刘通过这个方法去问小高 </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> question  小刘问的问题“学习Java选哪家机构呢？” </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">askQuestion</span><span class="params">(String question)</span></span>&#123;  </span><br><span class="line">        <span class="comment">//小刘问小高问题</span></span><br><span class="line">        gao.execute(Liu.<span class="keyword">this</span>, question);          </span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 小高知道答案后调用此方法告诉小刘</span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">answer</span><span class="params">(String result)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小高告诉小刘的答案是："</span> + result);        </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * 小高类 </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gao</span> </span>&#123;</span><br><span class="line">     <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 相当于class B有一个参数为CallBack的方法C（背景三） </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">(CallBack callBack, String question)</span></span>&#123;  </span><br><span class="line">        System.out.println(<span class="string">"小刘问的问题是："</span> + question);  </span><br><span class="line">        <span class="comment">//模拟小高挂点后先办自己的事情花了很长时间  </span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//小高办完自己的事情后想到了答案 </span></span><br><span class="line">        String result = <span class="string">"学Java当然去......"</span>;  </span><br><span class="line">        <span class="comment">//小高打电话把答案告诉小刘，相当于class B 反过来调用class A 的D方法 </span></span><br><span class="line">        callBack.answer(result);         </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Gao  gao= <span class="keyword">new</span> Gao();  </span><br><span class="line">        Liu liu = <span class="keyword">new</span> Liu(gao);  </span><br><span class="line">        <span class="comment">//小刘问问题</span></span><br><span class="line">        liu.askQuestion(<span class="string">"学习Java选哪家机构呢？"</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/2020071122234056.png" alt=""></p>
<blockquote>
<p>通过回调在接口中定义的方法，调用到具体的实现类中的方法，其本质是利用Java的动态绑定技术，在这种实现中，可以不把实现类写成单独的类，而使用内部类或匿名内部类来实现回调方法。</p>
</blockquote>
<h1 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h1><blockquote>
<p>组合模式是将对象组合成树形结构以表示“部分-整体”的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。</p>
</blockquote>
<p>示例：对象的组合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cpu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"quickly........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainBoard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"connect..........."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"store........"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span> </span>&#123;</span><br><span class="line">    Cpu cpu;</span><br><span class="line">    Memory memory;</span><br><span class="line">    MainBoard mainBoard;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">work</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        cpu.run();</span><br><span class="line">        memory.store();</span><br><span class="line">        mainBoard.connect();</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">        computer.cpu = <span class="keyword">new</span> Cpu();</span><br><span class="line">        computer.mainBoard = <span class="keyword">new</span> MainBoard();</span><br><span class="line">        computer.memory = <span class="keyword">new</span> Memory();</span><br><span class="line">        computer.work();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200711222514542.png" alt=""></p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数据类型、运算符及控制语句</title>
    <url>/posts/df6ba488.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>本文介绍了Java的<code>注释</code>、<code>标识符</code>、<code>关键字/保留字</code>、<code>变量</code>、<code>常量</code>、<code>基本数据类型</code>、<code>运算符</code>、<code>类型转换</code>、<code>简单的键盘输入和输出</code>、<code>控制语句</code>、<code>方法重载</code>。</p>
</blockquote>
<a id="more"></a>


<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><blockquote>
<p>为了方便程序的阅读，Java语言允许程序员在程序中写上一些说明性的文字，用来提高程序的可读性，这些文字性的说明就称为注释。 注释不会出现在字节码文件中，即Java编译器编译时会跳过注释语句。 在Java中根据注释的功能不同，主要分为单行注释、多行注释和文档注释。</p>
</blockquote>
<ul>
<li><code>单行注释</code>：使用“//”开头，“//”后面的单行内容均为注释。</li>
<li><code>多行注释</code>：以“/*”开头以“*/”结尾，在“/*”和“*/”之间的内容为注释，我们也可以使用多行注释作为行内注释。但是在使用时要注意，多行注释不能嵌套使用。</li>
<li><code>文档注释</code>：以“/**”开头以“*/”结尾，注释中包含一些说明性的文字及一些JavaDoc标签(后期写项目时，可以生成项目的API)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Welcome类（我是文档注释）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 高淇</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Welcome</span> </span>&#123;</span><br><span class="line">    <span class="comment">//我是单行注释</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args<span class="comment">/*我是行内注释 */</span>)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello World!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       我是多行注释！</span></span><br><span class="line"><span class="comment">       我是多行注释！</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><blockquote>
<p>标识符是用来给变量、类、方法以及包进行命名的，如Welcome、main、System、age、name、gender等。标识符需要遵守一定的规则：</p>
</blockquote>
<ul>
<li>标识符必须以字母、下划线_、美元符号$开头。  </li>
<li>标识符其它部分可以是字母、下划线“_”、美元符“$”和数字的任意组合。</li>
<li>Java 标识符大小写敏感，且长度无限制。</li>
<li>标识符不可以是Java的关键字。</li>
</ul>
<p><strong>标识符的使用规范</strong></p>
<ul>
<li>表示类名的标识符：每个单词的首字母大写，如Man, GoodMan</li>
<li>表示方法和变量的标识符：第一个单词小写，从第二个单词开始首字母大写，我们称之为“驼峰原则”，如eat(), eatFood()</li>
</ul>
<p><strong>【注意】</strong>：Java不采用通常语言使用的ASCII字符集，而是采用Unicode这样标准的国际字符集。因此，这里字母的含义不仅仅是英文，还包括汉字等等。但是不建议大家使用汉字来定义标识符！</p>
<p>示例：合法的标识符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>  a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>  _123 = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>  $<span class="number">12</span>aa = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>  变量<span class="number">1</span> = <span class="number">55</span>;  <span class="comment">//合法，但是不建议使用中文命名的标识符</span></span><br></pre></td></tr></table></figure>

<p>示例：不合法的标识符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>  <span class="number">1</span>a = <span class="number">3</span>;   <span class="comment">//不能用数字开头</span></span><br><span class="line">int  a# = 3;   //不能包含#这样的特殊字符</span><br><span class="line"><span class="keyword">int</span>  <span class="keyword">int</span> = <span class="number">3</span>;  <span class="comment">//不能使用关键字</span></span><br></pre></td></tr></table></figure>

<h1 id="关键字-保留字"><a href="#关键字-保留字" class="headerlink" title="关键字/保留字"></a>关键字/保留字</h1><blockquote>
<p>Java关键字是Java语言保留供内部使用的，如class用于定义类。 关键字也可以称为保留字，它们的意思是一样的，我们不能使用关键字作为变量名或方法名。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200708142653224.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="变量的本质"><a href="#变量的本质" class="headerlink" title="变量的本质"></a>变量的本质</h2><blockquote>
<p><code>变量</code>本质上就是代表一个”可操作的存储空间”，空间位置是确定的，但是里面放置什么值不确定。我们可通过变量名来访问“对应的存储空间”，从而操纵这个“存储空间”存储的值。</p>
<p>Java是一种<code>强类型语言</code>，每个变量都必须声明其数据类型。变量的数据类型决定了变量占据存储空间的大小。 比如，int a=3; 表示a变量的空间大小为4个字节。</p>
<p>变量作为程序中最基本的存储单元，其要素包括变量名，<code>变量类型</code>和<code>作用域</code>。变量在使用前必须对其声明, 只有在变量声明以后，才能为其分配相应长度的存储空间。</p>
</blockquote>
<p><strong>变量的声明格式为：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">type  varName [=value][,varName[=value]...]; </span><br><span class="line"><span class="comment">//[]中的内容为可选项，即可有可无</span></span><br><span class="line">数据类型  变量名  [=初始值] [,变量名  [=初始值]…];</span><br></pre></td></tr></table></figure>

<p>示例：声明变量：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span>  salary;</span><br><span class="line"><span class="keyword">long</span>  earthPopulation;</span><br><span class="line"><span class="keyword">int</span>  age;</span><br></pre></td></tr></table></figure>

<p>不同数据类型的常量会在内存中分配不同的空间，如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/2020070814305622.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p><strong>注意事项</strong></p>
<ul>
<li>每个变量都有类型，类型可以是基本类型，也可以是引用类型。</li>
<li>变量名必须是合法的标识符</li>
<li>变量声明是一条完整的语句，因此每一个声明都必须以分号结束</li>
</ul>
<p>示例：在一行中声明多个变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>  i ,j; <span class="comment">// 两个变量的数据类型都是int</span></span><br></pre></td></tr></table></figure>

<p><strong>建议</strong>：不提倡这种”一行声明多个变量”风格，逐一声明每一个变量可以提高程序可读性。</p>
<p>示例：可以将变量的声明和初始化放在同一行中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>  age = <span class="number">18</span>;    </span><br><span class="line"><span class="keyword">double</span>  e = <span class="number">2.718281828</span>;</span><br></pre></td></tr></table></figure>

<h2 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h2><blockquote>
<p>从整体上可将变量划分为局部变量、成员变量(也称为实例变量)和静态变量。</p>
</blockquote>
<table>
<thead>
<tr>
<th>类型</th>
<th>声明位置</th>
<th>从属于</th>
<th>生命周期</th>
</tr>
</thead>
<tbody><tr>
<td>局部变量</td>
<td>方法或语句块内部</td>
<td>方法/语句块</td>
<td>从声明位置开始，直到方法或语句块执行完毕，局部变量消失</td>
</tr>
<tr>
<td>成员变量(实例变量)</td>
<td>类内部，方法外部</td>
<td>对象</td>
<td>对象创建，成员变量也跟着创建。对象消失，成员变量也跟着消失；</td>
</tr>
<tr>
<td>静态变量(类变量)</td>
<td>类内部，static修饰</td>
<td>类</td>
<td>类被加载，静态变量就有效；类被卸载，静态变量消失。</td>
</tr>
</tbody></table>
<ol>
<li>局部变量（local  variable）</li>
</ol>
<blockquote>
<p>方法或语句块内部定义的变量。生命周期是从声明位置开始到到方法或语句块执行完毕为止。局部变量在使用前必须先声明、初始化(赋初值)再使用。</p>
</blockquote>
<p>示例：局部变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   <span class="keyword">int</span> j = i+<span class="number">5</span> ; <span class="comment">// 编译出错，变量i还未被初始化 </span></span><br><span class="line">&#125; </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> i;</span><br><span class="line">   i=<span class="number">10</span>;</span><br><span class="line">   <span class="keyword">int</span> j = i+<span class="number">5</span> ; <span class="comment">// 编译正确</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>成员变量（也叫实例变量 member variable）</li>
</ol>
<blockquote>
<p>方法外部、类的内部定义的变量。从属于对象，生命周期伴随对象始终。如果不自行初始化，它会自动初始化成该类型的默认初始值。</p>
</blockquote>
<table>
<thead>
<tr>
<th>数据类型</th>
<th>初始值</th>
</tr>
</thead>
<tbody><tr>
<td>int</td>
<td>0</td>
</tr>
<tr>
<td>double</td>
<td>0.0</td>
</tr>
<tr>
<td>char</td>
<td>‘\u0000’</td>
</tr>
<tr>
<td>boolean</td>
<td>false</td>
</tr>
</tbody></table>
<p>示例：实例变量的声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>静态变量（类变量 static variable）</li>
</ol>
<blockquote>
<p>使用static定义。 从属于类，生命周期伴随类始终，从类加载到卸载。 (注：讲完内存分析后我们再深入！先放一放这个概念！)如果不自行初始化，与成员变量相同会自动初始化成该类型的默认初始值，如表上所示。</p>
</blockquote>
<p><strong>测试代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试变量</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 高淇</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestVariable</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">int</span> a;            <span class="comment">//成员变量, 从属于对象； 成员变量会自动被初始化</span></span><br><span class="line">    <span class="keyword">static</span>  <span class="keyword">int</span>  size;   <span class="comment">//静态变量，从属于类</span></span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"> </span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> age;        <span class="comment">//局部变量，从属于语句块；</span></span><br><span class="line">            age = <span class="number">18</span>;</span><br><span class="line">        &#125;</span><br><span class="line">         </span><br><span class="line">        <span class="keyword">int</span> salary = <span class="number">3000</span>;    <span class="comment">//局部变量，从属于方法</span></span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> gao = <span class="number">13</span>;</span><br><span class="line">        System.out.println(gao);</span><br><span class="line"> </span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">    <span class="comment">//    int j = i + 5; // 编译出错，变量i还未被初始化</span></span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1><blockquote>
<p>常量通常指的是一个固定的值，例如：1、2、3、’a’、’b’、true、false、”helloWorld”等。</p>
<p>在Java语言中，主要是利用关键字<kbd>final</kbd>来定义一个常量。 常量一旦被初始化后不能再更改其值。</p>
</blockquote>
<p><strong>声明格式为</strong>：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span>  type  varName = value;</span><br></pre></td></tr></table></figure>

<p><strong>常量的声明及使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestConstants</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">double</span> PI = <span class="number">3.14</span>;</span><br><span class="line">        <span class="comment">// PI = 3.15; //编译错误，不能再被赋值！ </span></span><br><span class="line">        <span class="keyword">double</span> r = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">double</span> area = PI * r * r;</span><br><span class="line">        <span class="keyword">double</span> circle = <span class="number">2</span> * PI * r;</span><br><span class="line">        System.out.println(<span class="string">"area = "</span> + area);</span><br><span class="line">        System.out.println(<span class="string">"circle = "</span> + circle);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>为了更好的区分和表述，一般将1、2、3、’a’、’b’、true、false、”helloWorld”等称为字面常量，而使用final修饰的PI等称为符号常量。</p>
</blockquote>
<p><strong>变量和常量命名规范</strong>：</p>
<ul>
<li>所有变量、方法、类名：见名知意</li>
<li>类成员变量：首字母小写和驼峰原则:  monthSalary</li>
<li>局部变量：首字母小写和驼峰原则</li>
<li>常量：大写字母和下划线：MAX_VALUE</li>
<li>类名：首字母大写和驼峰原则:  Man, GoodMan</li>
<li>方法名：首字母小写和驼峰原则: run(), runRun()</li>
</ul>
<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><blockquote>
<p>Java是一种强类型语言，每个变量都必须声明其数据类型。 Java的数据类型可分为两大类：基本数据类型（primitive data type）和引用数据类型（reference data type）。</p>
</blockquote>
<p>Java中定义了<code>3类8种</code>基本数据类型：</p>
<ul>
<li>数值型－ byte、 short、int、 long、float、 double</li>
<li>字符型－ char</li>
<li>布尔型－ boolean </li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200708145310989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p><strong>注意事项</strong>：引用数据类型的大小统一为4个字节，记录的是其引用对象的地址！</p>
<h2 id="整型变量-常量"><a href="#整型变量-常量" class="headerlink" title="整型变量/常量"></a>整型变量/常量</h2><blockquote>
<p>整型用于表示没有小数部分的数值，它允许是负数。整型的范围与运行Java代码的机器无关，这正是Java程序具有很强移植能力的原因之一。与此相反，C和C++程序需要针对不同的处理器选择最有效的整型。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200708145534216.png" alt=""></p>
<p>Java 语言整型常量的<code>四种</code>表示形式：</p>
<ul>
<li>十进制整数，如：99, -500, 0</li>
<li>八进制整数，要求以 0 开头，如：015</li>
<li>十六进制数，要求 0x 或 0X 开头，如：0x15</li>
<li>二进制数，要求0b或0B开头，如：0b01110011</li>
</ul>
<p>Java语言的整型常数默认为 int 型，<strong>声明 long 型常量可以后加‘ l ’或‘ L ’</strong> 。</p>
<p>示例：长整型常数的声明</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> a = <span class="number">55555555</span>;  <span class="comment">//编译成功，在int表示的范围内(21亿内)。</span></span><br><span class="line"><span class="keyword">long</span> b = <span class="number">55555555555</span>;<span class="comment">//不加L编译错误，已经超过int表示的范围。</span></span><br></pre></td></tr></table></figure>

<p>我们修改成long类型的常量即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">long</span> b = <span class="number">55555555555L</span>;</span><br></pre></td></tr></table></figure>

<h2 id="浮点型变量-常量"><a href="#浮点型变量-常量" class="headerlink" title="浮点型变量/常量"></a>浮点型变量/常量</h2><blockquote>
<p>带小数的数据在Java中称为浮点型。浮点型可分为float类型和double类型。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200708145835353.png" alt=""></p>
<blockquote>
<p>float 类型又被称作<code>单精度类型</code>，尾数可以精确到7位有效数字，在很多情况下，float类型的精度很难满足需求。而double表示这种类型的数值精度约是float类型的两倍，又被称作双精度类型，绝大部分应用程序都采用double类型。浮点型常量默认类型也是double。</p>
</blockquote>
<p>Java浮点类型常量有两种表示形式</p>
<ul>
<li>十进制数形式，例如:3.14       314.0      0.314 </li>
<li>科学记数法形式，如314e2      314E2      314E-2 </li>
</ul>
<p>示例：使用科学记数法给浮点型变量赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> f = <span class="number">314e2</span>;  <span class="comment">//314*10^2--&gt;31400.0</span></span><br><span class="line"><span class="keyword">double</span> f2 = <span class="number">314e-2</span>; <span class="comment">//314*10^(-2)--&gt;3.14</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>float类型的数值有一个后缀F或者f</strong> ，没有后缀F/f的浮点数值默认为double类型。也可以在浮点数值后添加后缀D或者d， 以明确其为double类型。</p>
</blockquote>
<p>示例：float类型赋值时需要添加后缀F/f</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span>  f = <span class="number">3.14F</span>;</span><br><span class="line"><span class="keyword">double</span> d1  = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">double</span> d2 = <span class="number">3.14</span>D;</span><br></pre></td></tr></table></figure>

<p><strong>建议</strong>：浮点类型float，double的数据不适合在不容许舍入误差的金融计算领域。如果需要进行不产生舍入误差的精确数字计算，需要使用<code>BigDecimal</code>类。</p>
<p>示例：浮点数的比较一 </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> f = <span class="number">0.1f</span>;</span><br><span class="line"><span class="keyword">double</span> d = <span class="number">1.0</span>/<span class="number">10</span>;</span><br><span class="line">System.out.println(f==d);<span class="comment">//结果为false</span></span><br></pre></td></tr></table></figure>

<p>示例：浮点数的比较二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">float</span> d1 = <span class="number">423432423f</span>;</span><br><span class="line"><span class="keyword">float</span> d2 = d1+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(d1==d2)&#123;</span><br><span class="line">   System.out.println(<span class="string">"d1==d2"</span>);<span class="comment">//输出结果为d1==d2</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"d1!=d2"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行以上两个示例，发现示例2-13的结果是“false”，而示例2-14的输出结果是“d1==d2”。这是因为由于字长有限，浮点数能够精确表示的数是有限的，因而也是离散的。 浮点数一般都存在舍入误差，很多数字无法精确表示(例如0.1)，其结果只能是接近， 但不等于。二进制浮点数不能精确的表示0.1、0.01、0.001这样10的负次幂。并不是所有的小数都能可以精确的用二进制浮点数表示。</p>
<p>java.math包下面的两个有用的类：<code>BigInteger</code>和<code>BigDecimal</code>，这两个类可以处理任意长度的数值。BigInteger实现了任意精度的整数运算。BigDecimal实现了任意精度的浮点运算。</p>
<p><strong>菜鸟雷区</strong>：</p>
<p><strong><kbd>不要使用浮点数进行比较！</kbd></strong>很多新人甚至很多理论不扎实的有工作经验的程序员也会犯这个错误！需要比较请使用<code>BigDecimal</code>类</p>
<p>示例：使用<code>BigDecimal</code>进行浮点数的比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.math.BigDecimal;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        BigDecimal bd = BigDecimal.valueOf(<span class="number">1.0</span>);</span><br><span class="line">        bd = bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">        bd = bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">        bd = bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">        bd = bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">        bd = bd.subtract(BigDecimal.valueOf(<span class="number">0.1</span>));</span><br><span class="line">        System.out.println(bd);<span class="comment">//0.5</span></span><br><span class="line">        System.out.println(<span class="number">1.0</span> - <span class="number">0.1</span> - <span class="number">0.1</span> - <span class="number">0.1</span> - <span class="number">0.1</span> - <span class="number">0.1</span>);<span class="comment">//0.5000000000000001</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符型变量-常量"><a href="#字符型变量-常量" class="headerlink" title="字符型变量/常量"></a>字符型变量/常量</h2><blockquote>
<p><code>字符型</code>在内存中占2个字节，在Java中使用<code>单引号</code>来表示<code>字符常量</code>。例如’A’是一个字符，它与”A”是不同的，”A”表示含有一个字符的<code>字符串</code>。</p>
<p><code>char</code>类型用来表示在<code>Unicode</code>编码表中的字符。<code>Unicode</code>编码被设计用来处理各种语言的文字，它占2个字节，可允许有65536个字符。</p>
</blockquote>
<p>示例：字符型举例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> eChar = <span class="string">'a'</span>; </span><br><span class="line"><span class="keyword">char</span> cChar =<span class="string">'中'</span>;</span><br></pre></td></tr></table></figure>

<p><code>Unicode</code>具有从0到65535之间的编码，他们通常用从<code>’\u0000’</code>到<code>’\uFFFF’</code>之间的十六进制值来表示（前缀为u表示Unicode） </p>
<p>示例：字符型的十六进制值表示方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c = <span class="string">'\u0061'</span>;</span><br></pre></td></tr></table></figure>

<p>Java 语言中还允许使用转义字符 ‘\’ 来将其后的字符转变为其它的含义。常用的转义字符及其含义和Unicode值如下表所示。</p>
<p>示例：转义字符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> c2 = <span class="string">'\n'</span>;  <span class="comment">//代表换行符</span></span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200708151347305.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p><strong>注意事项</strong>：String类，其实是字符序列(char sequence)。</p>
<h2 id="boolean类型变量-常量"><a href="#boolean类型变量-常量" class="headerlink" title="boolean类型变量/常量"></a>boolean类型变量/常量</h2><blockquote>
<p>boolean类型有两个常量值，true和false，在内存中占一位（不是一个字节），不可以使用 0 或非 0 的整数替代 true 和 false ，这点和C语言不同。 boolean 类型用来判断逻辑条件，一般用于程序流程控制 。</p>
</blockquote>
<p>示例：boolean类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">boolean</span> flag ;</span><br><span class="line">flag = <span class="keyword">true</span>;   <span class="comment">//或者flag=false;</span></span><br><span class="line"><span class="keyword">if</span>(flag) &#123;</span><br><span class="line">            <span class="comment">// true分支</span></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//  false分支</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><blockquote>
<p>计算机的最基本用途之一就是执行数学运算，作为一门计算机语言，Java也提供了一套丰富的运算符来操作变量。</p>
</blockquote>
<p>运算符分类</p>
<p><img src="https://img-blog.csdnimg.cn/20200708152007213.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><blockquote>
<p>算术运算符中+，-，*，/，%属于二元运算符，二元运算符指的是需要两个操作数才能完成运算的运算符。其中的%是取模运算符，就是我们常说的求余数操作。</p>
</blockquote>
<p>二元运算符的运算规则：</p>
<ol>
<li>整数运算：</li>
</ol>
<ul>
<li>如果两个操作数有一个为Long, 则结果也为long。</li>
<li>没有long时，结果为int。即使操作数全为short，byte，结果也是int。</li>
</ul>
<ol start="2">
<li>浮点运算：</li>
</ol>
<ul>
<li>如果两个操作数有一个为double，则结果为double。</li>
<li>只有两个操作数都是float，则结果才为float。</li>
</ul>
<ol start="3">
<li>取模运算：</li>
</ol>
<ul>
<li>其操作数可以为浮点数,一般使用整数，结果是“余数”，“余数”符号和左边操作数相同，如：7%3=1，-7%3=-1，7%-3=1。</li>
</ul>
<p>算术运算符中++，–属于一元运算符，该类运算符只需要一个操作数。</p>
<p>示例：一元运算符++与--</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b = a++;   <span class="comment">//执行完后,b=3。先给b赋值，再自增。</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+a+<span class="string">"\nb="</span>+b);</span><br><span class="line">a = <span class="number">3</span>;</span><br><span class="line">b = ++a;   <span class="comment">//执行完后,c=5。a先自增，再给c赋值</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+a+<span class="string">"\nb="</span>+b);</span><br></pre></td></tr></table></figure>

<p>运行该程序，执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200708152356795.png" alt=""></p>
<h2 id="赋值及其扩展赋值运算符"><a href="#赋值及其扩展赋值运算符" class="headerlink" title="赋值及其扩展赋值运算符"></a>赋值及其扩展赋值运算符</h2><p>赋值及其扩展运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>用法举例</th>
<th>等效的表达式</th>
</tr>
</thead>
<tbody><tr>
<td>+=</td>
<td>a += b</td>
<td>a = a+b</td>
</tr>
<tr>
<td>-=</td>
<td>a -= b</td>
<td>a = a-b</td>
</tr>
<tr>
<td>*=</td>
<td>a *= b</td>
<td>a = a*b</td>
</tr>
<tr>
<td>/=</td>
<td>a *= b</td>
<td>a = a/b</td>
</tr>
<tr>
<td>%=</td>
<td>a *= b</td>
<td>a = a%b</td>
</tr>
</tbody></table>
<p>示例：扩展运算符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">4</span>;</span><br><span class="line">a+=b;<span class="comment">//相当于a=a+b;</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+a+<span class="string">"\nb="</span>+b);</span><br><span class="line">a=<span class="number">3</span>;</span><br><span class="line">a*=b+<span class="number">3</span>;<span class="comment">//相当于a=a*(b+3)</span></span><br><span class="line">System.out.println(<span class="string">"a="</span>+a+<span class="string">"\nb="</span>+b);</span><br></pre></td></tr></table></figure>

<p>运行该程序，执行结果如下图所示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200708152749433.png" alt="在这里插入图片描述"></p>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><blockquote>
<p>关系运算符用来进行比较运算，如表2-9所示。关系运算的结果是布尔值：true/false；</p>
</blockquote>
<p>关系运算符</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>含义</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>==</td>
<td>等于</td>
<td>a==b</td>
</tr>
<tr>
<td>!=</td>
<td>不等于</td>
<td>a!=b</td>
</tr>
<tr>
<td>&gt;</td>
<td>大于</td>
<td>a&gt;b</td>
</tr>
<tr>
<td>&lt;</td>
<td>小于</td>
<td>a&lt;b</td>
</tr>
<tr>
<td>&gt;=</td>
<td>大于或等于</td>
<td>a&gt;=b</td>
</tr>
<tr>
<td>&lt;=</td>
<td>小于或等于</td>
<td>a&lt;=b</td>
</tr>
</tbody></table>
<p><strong>注意事项</strong></p>
<ul>
<li><p>=是赋值运算符，而真正的判断两个操作数是否相等的运算符是==。</p>
</li>
<li><p>==、!= 是所有（基本和引用）数据类型都可以使用</p>
</li>
<li><p>&gt; 、&gt;=、 &lt;、 &lt;= 仅针对数值类型（byte/short/int/long,  float/double。以及char）</p>
</li>
</ul>
<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>Java中的逻辑运算符如下表所示。逻辑运算的操作数和运算结果都是boolean值。</p>
<table>
<thead>
<tr>
<th>运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>逻辑与</td>
<td>&amp;( 与)    两个操作数为true，结果才是true，否则是false</td>
</tr>
<tr>
<td>逻辑或</td>
<td>|(或)    两个操作数有一个是true，结果就是true</td>
</tr>
<tr>
<td>短路与</td>
<td>&amp;&amp;( 与)    只要有一个为false，则直接返回false</td>
</tr>
<tr>
<td>短路或</td>
<td>||(或)    只要有一个为true， 则直接返回true</td>
</tr>
<tr>
<td>逻辑非</td>
<td>!（非）    取反：!false为true，!true为false</td>
</tr>
<tr>
<td>逻辑异或</td>
<td>^（异或）    相同为false，不同为true</td>
</tr>
</tbody></table>
<p>短路与和短路或采用短路的方式。从左到右计算，如果只通过运算符左边的操作数就能够确定该逻辑表达式的值，则不会继续计算运算符右边的操作数，提高效率。</p>
<p>示例：短路与和逻辑与</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1&gt;2的结果为false，那么整个表达式的结果即为false，将不再计算2&gt;(3/0)</span></span><br><span class="line"><span class="keyword">boolean</span> c = <span class="number">1</span>&gt;<span class="number">2</span> &amp;&amp; <span class="number">2</span>&gt;(<span class="number">3</span>/<span class="number">0</span>);</span><br><span class="line">System.out.println(c);</span><br><span class="line"><span class="comment">//1&gt;2的结果为false，那么整个表达式的结果即为false，还要计算2&gt;(3/0)，0不能做除数，//会输出异常信息</span></span><br><span class="line"><span class="keyword">boolean</span> d = <span class="number">1</span>&gt;<span class="number">2</span> &amp; <span class="number">2</span>&gt;(<span class="number">3</span>/<span class="number">0</span>);</span><br><span class="line">System.out.println(d);</span><br></pre></td></tr></table></figure>

<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><p>位运算指的是进行二进制位的运算，常用的位运算符如下表所示。</p>
<table>
<thead>
<tr>
<th>位运算符</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>~</td>
<td>取反</td>
</tr>
<tr>
<td>&amp;</td>
<td>按位与</td>
</tr>
<tr>
<td>|</td>
<td>按位或</td>
</tr>
<tr>
<td>^</td>
<td>按位异或</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>左移运算符，左移1位相当于乘2</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>右移运算符，右移1位相当于除2取商</td>
</tr>
</tbody></table>
<p>示例：左移运算和右移运算</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">3</span>*<span class="number">2</span>*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">3</span>&lt;&lt;<span class="number">2</span>; <span class="comment">//相当于：3*2*2;</span></span><br><span class="line"><span class="keyword">int</span> c = <span class="number">12</span>/<span class="number">2</span>/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> d = <span class="number">12</span>&gt;&gt;<span class="number">2</span>; <span class="comment">//相当于12/2/2;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong></p>
<ul>
<li>&amp;和|既是逻辑运算符，也是位运算符。如果两侧操作数都是boolean类型，就作为逻辑运算符。如果两侧的操作数是整数类型，就是位运算符。</li>
<li>不要把“^”当做数学运算“乘方”，是“位的异或”操作。</li>
</ul>
<h2 id="字符串连接符"><a href="#字符串连接符" class="headerlink" title="字符串连接符"></a>字符串连接符</h2><blockquote>
<p>“+”运算符两侧的操作数中只要有一个是字符串(String)类型，系统会自动将另一个操作数转换为字符串然后再进行连接。</p>
</blockquote>
<p>示例：连接符“+”</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">12</span>;</span><br><span class="line">System.out.println(<span class="string">"a="</span>+a);<span class="comment">//输出结果: a=12</span></span><br></pre></td></tr></table></figure>

<h2 id="条件运算符"><a href="#条件运算符" class="headerlink" title="条件运算符"></a>条件运算符</h2><p>语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x ? y : z</span><br></pre></td></tr></table></figure>

<p>其中 x 为 boolean 类型表达式，先计算 x 的值，若为true，则整个运算的结果为表达式 y 的值，否则整个运算结果为表达式 z 的值。</p>
<p>示例：三目条件运算符</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> score = <span class="number">80</span>; </span><br><span class="line"><span class="keyword">int</span> x = -<span class="number">100</span>;</span><br><span class="line">String type =score&lt;<span class="number">60</span>?<span class="string">"不及格"</span>:<span class="string">"及格"</span>; </span><br><span class="line"><span class="keyword">int</span> flag = x &gt; <span class="number">0</span> ? <span class="number">1</span> : (x == <span class="number">0</span> ? <span class="number">0</span> : -<span class="number">1</span>);</span><br><span class="line">System.out.println(<span class="string">"type= "</span> + type);</span><br><span class="line">System.out.println(<span class="string">"flag= "</span>+ flag);</span><br></pre></td></tr></table></figure>

<p>运行结果如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200708153943874.png" alt=""></p>
<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><table>
<thead>
<tr>
<th>优先级</th>
<th>运算符</th>
<th>类</th>
<th>结合性</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>()</td>
<td>括号运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>2</td>
<td>!、+（正号）、-（负号）</td>
<td>一元运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>2</td>
<td>~</td>
<td>位逻辑运算符</td>
<td>由右至左</td>
</tr>
<tr>
<td>2</td>
<td>++、–</td>
<td>递增与递减运算符</td>
<td>由右至左</td>
</tr>
<tr>
<td>3</td>
<td>*、/、%</td>
<td>算术运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>4</td>
<td>+、-</td>
<td>算术运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>5</td>
<td>&lt;&lt;、&gt;&gt;</td>
<td>位左移、右移运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>6</td>
<td>&gt;、&gt;=、&lt;、&lt;=</td>
<td>关系运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>7</td>
<td>==、!=</td>
<td>关系运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>8</td>
<td>&amp;</td>
<td>位运算符、逻辑运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>9</td>
<td>^</td>
<td>位运算符、逻辑运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>10</td>
<td>|</td>
<td>位运算符、逻辑运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>11</td>
<td>&amp;&amp;</td>
<td>逻辑运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>12</td>
<td>||</td>
<td>逻辑运算符</td>
<td>由左至右</td>
</tr>
<tr>
<td>13</td>
<td>? :</td>
<td>条件运算符</td>
<td>由右至左</td>
</tr>
<tr>
<td>14</td>
<td>=、+=、-=、*=、/=、%=</td>
<td>赋值运算符、扩展运算符</td>
<td>由右至左</td>
</tr>
</tbody></table>
<p><strong>建议</strong>：</p>
<ul>
<li>逻辑与、逻辑或、逻辑非的优先级一定要熟悉！<strong>（逻辑非&gt;逻辑与&gt;逻辑或）</strong>。如：</li>
<li>a||b&amp;&amp;c的运算结果是：a||(b&amp;&amp;c)，而不是(a||b)&amp;&amp;c </li>
</ul>
<h1 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h1><h2 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h2><blockquote>
<p>自动类型转换指的是容量小的数据类型可以自动转换为容量大的数据类型。如图2-6所示，黑色的实线表示无数据丢失的自动类型转换，而虚线表示在转换时可能会有精度的损失。</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200708154720402.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p>可以将整型常量直接赋值给byte、 short、 char等类型变量，而不需要进行强制类型转换，只要不超出其表数范围即可。</p>
<p>示例：自动类型转换特例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">short</span>  b = <span class="number">12</span>;  <span class="comment">//合法</span></span><br><span class="line"><span class="keyword">short</span>  b = <span class="number">1234567</span>;<span class="comment">//非法，1234567超出了short的表数范围</span></span><br></pre></td></tr></table></figure>

<h2 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h2><blockquote>
<p>强制类型转换，又被称为造型，用于显式的转换一个数值的类型。在有可能丢失信息的情况下进行的转换是通过造型来完成的，但可能造成精度降低或溢出。</p>
</blockquote>
<p>语法格式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">(type)<span class="keyword">var</span></span><br></pre></td></tr></table></figure>

<p>运算符“()”中的type表示将值var想要转换成的目标数据类型。</p>
<p>示例：强制类型转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">double</span> x  = <span class="number">3.14</span>; </span><br><span class="line"><span class="keyword">int</span> nx = (<span class="keyword">int</span>)x;   <span class="comment">//值为3</span></span><br><span class="line"><span class="keyword">char</span> c = <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">int</span> d = c+<span class="number">1</span>;</span><br><span class="line">System.out.println(nx);</span><br><span class="line">System.out.println(d);</span><br><span class="line">System.out.println((<span class="keyword">char</span>)d);</span><br></pre></td></tr></table></figure>

<p>运行结果如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200708154950918.png" alt=""></p>
<p>当将一种类型强制转换成另一种类型，而又超出了目标类型的表数范围，就会被截断成为一个完全不同的值。</p>
<p>示例：强制类型转换特例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">300</span>;</span><br><span class="line"><span class="keyword">byte</span> bx = (<span class="keyword">byte</span>)x;    <span class="comment">//值为44</span></span><br></pre></td></tr></table></figure>

<p><strong>注：不能在布尔类型和任何数值类型之间做强制类型转换</strong></p>
<h2 id="基本类型转化时常见错误和问题"><a href="#基本类型转化时常见错误和问题" class="headerlink" title="基本类型转化时常见错误和问题"></a>基本类型转化时常见错误和问题</h2><ol>
<li>操作比较大的数时，要留意是否溢出，尤其是整数操作时。</li>
</ol>
<p>示例：常见问题一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> money = <span class="number">1000000000</span>; <span class="comment">//10亿</span></span><br><span class="line"><span class="keyword">int</span> years = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//返回的total是负数，超过了int的范围</span></span><br><span class="line"><span class="keyword">int</span> total = money*years;</span><br><span class="line">System.out.println(<span class="string">"total="</span>+total);</span><br><span class="line"><span class="comment">//返回的total仍然是负数。默认是int，因此结果会转成int值，再转成long。但是已经发生//了数据丢失</span></span><br><span class="line"><span class="keyword">long</span> total1 = money*years; </span><br><span class="line">System.out.println(<span class="string">"total1="</span>+total1);</span><br><span class="line"><span class="comment">//返回的total2正确:先将一个因子变成long，整个表达式发生提升。全部用long来计算。</span></span><br><span class="line"><span class="keyword">long</span> total2 = money*((<span class="keyword">long</span>)years); </span><br><span class="line">System.out.println(<span class="string">"total2="</span>+total2);</span><br></pre></td></tr></table></figure>

<p>运行结果如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200708155314935.png" alt=""></p>
<ol start="2">
<li><code>L</code> 和 <code>l</code> 的问题：</li>
</ol>
<p>不要命名名字为 <code>l</code> 的变量，<code>l</code> 容易和 <code>1</code> 混淆。<code>long</code> 类型使用大写 <code>L</code> 不要用小写。</p>
<p>示例：常见问题二</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> l = <span class="number">2</span>; <span class="comment">//分不清是L还是1,</span></span><br><span class="line"><span class="keyword">long</span> a = <span class="number">23451l</span>;<span class="comment">//建议使用大写L</span></span><br><span class="line">System.out.println(l+<span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<h1 id="简单的键盘输入和输出"><a href="#简单的键盘输入和输出" class="headerlink" title="简单的键盘输入和输出"></a>简单的键盘输入和输出</h1><blockquote>
<p>为了我们能写出更加复杂的程序，可以让我们的程序和用户可以通过键盘交互，我们先学习一下简单的键盘输入和输出。</p>
</blockquote>
<p>示例：使用Scanner获取键盘输入</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  java.util.Scanner;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 测试获得键盘输入</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 高淇</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestScanner</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Scanner   scanner =  <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入名字："</span>);</span><br><span class="line">        String   name =  scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入你的爱好："</span>);</span><br><span class="line">        String  favor = scanner.nextLine();</span><br><span class="line">        System.out.println(<span class="string">"请输入你的年龄："</span>);</span><br><span class="line">        <span class="keyword">int</span>   age = scanner.nextInt();</span><br><span class="line">         </span><br><span class="line">        System.out.println(<span class="string">"###############"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        System.out.println(favor);</span><br><span class="line">        System.out.println(<span class="string">"来到地球的天数："</span>+age*<span class="number">365</span>);</span><br><span class="line">        System.out.println(<span class="string">"离开地球的天数："</span>+(<span class="number">72</span>-age)*<span class="number">365</span>);</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果如下图所示。</p>
<p><img src="https://img-blog.csdnimg.cn/20200708155550445.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="控制语句"><a href="#控制语句" class="headerlink" title="控制语句"></a>控制语句</h1><h2 id="带标签的break和continue"><a href="#带标签的break和continue" class="headerlink" title="带标签的break和continue"></a>带标签的<code>break</code>和<code>continue</code></h2><blockquote>
<p>goto关键字很早就在程序设计语言中出现。尽管goto仍是Java的一个保留字，但并未在Java语言中得到正式使用;Java没有goto语句。然而，在<code>break</code>和<code>continue</code>这两个关键字的身上，我们仍然能看出一些goto的影子—带标签的break和continue。</p>
<p>“<code>标签</code>”是指后面跟一个冒号的标识符，例如：“label:”。<strong>对Java来说唯一用到标签的地方是在循环语句之前</strong>。而在循环之前设置标签的唯一理由是：我们希望在其中嵌套另一个循环，由于<code>break</code>和<code>continue</code>关键字通常只中断当前循环，但若随同标签使用，它们就会中断到存在标签的地方。</p>
<p>在 “goto有害”论中，最有问题的就是标签，而非goto， 随着标签在一个程序里数量的增多，产生错误的机会也越来越多。 但Java标签不会造成这方面的问题，因为它们的活动场所已被限死，不可通过特别的方式到处传递程序的控制权。由此也引出了一个有趣的问题：通过限制语句的能力，反而能使一项语言特性更加有用。</p>
</blockquote>
<p>示例：带标签break和continue：控制嵌套循环跳转(打印101-150之间所有的质数)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test18</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span> </span>&#123;</span><br><span class="line">        outer: <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">101</span>; i &lt; <span class="number">150</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt; i / <span class="number">2</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i % j == <span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span> outer;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.print(i + <span class="string">"  "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="switch多选择结构"><a href="#switch多选择结构" class="headerlink" title="switch多选择结构"></a>switch多选择结构</h2><p>语法结构：　</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span> (表达式) &#123;</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">1</span>: </span><br><span class="line">语句序列<span class="number">1</span>;</span><br><span class="line">[<span class="keyword">break</span>];</span><br><span class="line"><span class="keyword">case</span> 值<span class="number">2</span>:</span><br><span class="line"> 语句序列<span class="number">2</span>;</span><br><span class="line">[<span class="keyword">break</span>];</span><br><span class="line">     … … … … …</span><br><span class="line">[<span class="keyword">default</span>:</span><br><span class="line"> 默认语句;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>switch</code>语句会根据表达式的值从相匹配的<code>case</code>标签处开始执行，一直执行到<code>break</code>语句处或者是<code>switch</code>语句的末尾。如果表达式的值与任一<code>case</code>值不匹配，则进入<code>default</code>语句(如果存在<code>default</code>语句的情况)。</p>
<p>根据表达式值的不同可以执行许多不同的操作。<code>switch</code>语句中<code>case</code>标签在JDK1.5之前必须是整数(<code>long</code>类型除外)或者枚举，不能是字符串，在JDK1.7之后允许使用字符串(<code>String</code>)。</p>
<p>注意，当布尔表达式是等值判断的情况，可以使用if-else if-else多选择结构或者switch结构，如果布尔表达式区间判断的情况，则只能使用if-else if-else多选择结构。</p>
</blockquote>
<h1 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h1><blockquote>
<p>方法的重载是指一个类中可以定义多个方法名相同，但参数不同的方法。 调用时，会根据不同的参数自动匹配对应的方法。</p>
</blockquote>
<p><strong>注</strong>：重载的方法，实际是完全不同的方法，只是名称相同而已!</p>
<p><strong>构成方法重载的条件</strong>：</p>
<ol>
<li><p>不同的含义：<code>形参类型</code>、<code>形参个数</code>、<code>形参顺序</code>不同</p>
</li>
<li><p>只有返回值不同不构成方法的重载，如：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不构成方法重载</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(String str)</span></span>&#123;&#125;与 <span class="function"><span class="keyword">void</span> <span class="title">a</span><span class="params">(String str)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>只有形参的名称不同，不构成方法的重载，如：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不构成方法重载</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(String str)</span></span>&#123;&#125;与<span class="function"><span class="keyword">int</span> <span class="title">a</span><span class="params">(String s)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>示例：方法重载</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test21</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(add(<span class="number">3</span>, <span class="number">5</span>));<span class="comment">// 8</span></span><br><span class="line">        System.out.println(add(<span class="number">3</span>, <span class="number">5</span>, <span class="number">10</span>));<span class="comment">// 18</span></span><br><span class="line">        System.out.println(add(<span class="number">3.0</span>, <span class="number">5</span>));<span class="comment">// 8.0</span></span><br><span class="line">        System.out.println(add(<span class="number">3</span>, <span class="number">5.0</span>));<span class="comment">// 8.0</span></span><br><span class="line">        <span class="comment">// 我们已经见过的方法的重载</span></span><br><span class="line">        System.out.println();<span class="comment">// 0个参数</span></span><br><span class="line">        System.out.println(<span class="number">1</span>);<span class="comment">// 参数是1个int</span></span><br><span class="line">        System.out.println(<span class="number">3.0</span>);<span class="comment">// 参数是1个double</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** 求和的方法 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = n1 + n2;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法名相同，参数个数不同，构成重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2, <span class="keyword">int</span> n3)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> sum = n1 + n2 + n3;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法名相同，参数类型不同，构成重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = n1 + n2;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 方法名相同，参数顺序不同，构成重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">double</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = n1 + n2;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编译错误：只有返回值不同，不构成方法的重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n1, <span class="keyword">int</span> n2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = n1 + n2;</span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//编译错误：只有参数名称不同，不构成方法的重载</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> n2, <span class="keyword">int</span> n1)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">double</span> sum = n1 + n2;         </span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>学习记录</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown常用语法介绍</title>
    <url>/posts/b21c3463.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>如果你想学习如何使用<code>Markdown</code>编辑器, 可以仔细阅读这篇文章，了解一下<code>Markdown</code>的基本语法知识。</p>
</blockquote>
<a id="more"></a>

<h1 id="功能快捷键"><a href="#功能快捷键" class="headerlink" title="功能快捷键"></a>功能快捷键</h1><table>
<thead>
<tr>
<th>功能</th>
<th>快捷键</th>
</tr>
</thead>
<tbody><tr>
<td>撤销：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>Z</kbd></td>
</tr>
<tr>
<td>重做：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>Y</kbd></td>
</tr>
<tr>
<td>加粗：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>B</kbd></td>
</tr>
<tr>
<td>斜体：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>I</kbd></td>
</tr>
<tr>
<td>标题：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>H</kbd></td>
</tr>
<tr>
<td>无序列表：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>U</kbd></td>
</tr>
<tr>
<td>有序列表：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>O</kbd></td>
</tr>
<tr>
<td>检查列表：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>C</kbd></td>
</tr>
<tr>
<td>插入代码：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>K</kbd></td>
</tr>
<tr>
<td>插入链接：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>L</kbd></td>
</tr>
<tr>
<td>插入图片：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>Shift</kbd> + <kbd>G</kbd></td>
</tr>
<tr>
<td>查找：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>F</kbd></td>
</tr>
<tr>
<td>替换：</td>
<td><kbd>Ctrl/Command</kbd> + <kbd>G</kbd></td>
</tr>
</tbody></table>
<h1 id="生成目录索引"><a href="#生成目录索引" class="headerlink" title="生成目录索引"></a>生成目录索引</h1><p><img src="https://img-blog.csdnimg.cn/20200706144916507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">//生成目录索引</span><br><span class="line">@[<span class="string">TOC</span>](<span class="link">目录</span>)</span><br></pre></td></tr></table></figure>

<h1 id="创建标题"><a href="#创建标题" class="headerlink" title="创建标题"></a>创建标题</h1><p>直接输入1次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成1级标题。<br>输入2次<kbd>#</kbd>，并按下<kbd>space</kbd>后，将生成2级标题。<br>以此类推，我们支持6级标题。有助于使用<code>TOC</code>语法后生成一个完美的目录。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">直接输入1次<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>#<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>，并按下<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>space<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>后，将生成1级标题。</span><br><span class="line">输入2次<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>#<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>，并按下<span class="tag">&lt;<span class="name">kbd</span>&gt;</span>space<span class="tag">&lt;/<span class="name">kbd</span>&gt;</span>后，将生成2级标题。</span><br><span class="line">以此类推，我们支持6级标题。有助于使用`TOC`语法后生成一个完美的目录。</span><br></pre></td></tr></table></figure>

<h1 id="改变文本样式"><a href="#改变文本样式" class="headerlink" title="改变文本样式"></a>改变文本样式</h1><p><img src="https://img-blog.csdnimg.cn/20200706141420646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">*强调文本* _强调文本_</span><br><span class="line"></span><br><span class="line">**加粗文本** __加粗文本__</span><br><span class="line"></span><br><span class="line">==标记文本==</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br><span class="line"></span><br><span class="line">&gt; 引用文本</span><br><span class="line"></span><br><span class="line">H~<span class="number">2</span>~O <span class="keyword">is</span>是液体。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>^<span class="number">10</span>^ 运算结果是 <span class="number">1024.</span></span><br></pre></td></tr></table></figure>

<h1 id="插入链接与图片"><a href="#插入链接与图片" class="headerlink" title="插入链接与图片"></a>插入链接与图片</h1><ul>
<li>链接: <a href="https://mp.csdn.net" target="_blank" rel="noopener">link</a>.</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">链接: [<span class="string">link</span>](<span class="link">https://mp.csdn.net</span>).</span><br></pre></td></tr></table></figure>

<blockquote>
<p>外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接<a href="https://i.imgur.com/sXa5LvP.jpg" target="_blank" rel="noopener">上传</a></p>
</blockquote>
<ul>
<li>图片: </li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>带尺寸的图片: </li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>居中的图片: </li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>居中并且带尺寸的图片: </li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">Alt</span>](<span class="link">https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30</span>)</span><br></pre></td></tr></table></figure>
<p>当然，为了让用户更加便捷，还增加了图片拖拽功能。</p>
<h1 id="插入代码片"><a href="#插入代码片" class="headerlink" title="插入代码片"></a>插入代码片</h1><p>去<a href="https://mp.csdn.net/configure" target="_blank" rel="noopener">博客设置</a>页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 <code>代码片</code>.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// An highlighted block</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="string">'bar'</span>;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200706133753354.png" alt=""></p>
<h1 id="生成一个列表"><a href="#生成一个列表" class="headerlink" title="生成一个列表"></a>生成一个列表</h1><ul>
<li>项目<ul>
<li>项目<ul>
<li>项目</li>
</ul>
</li>
</ul>
</li>
</ul>
<ol>
<li>项目1</li>
<li>项目2</li>
<li>项目3</li>
</ol>
<ul>
<li><input disabled="" type="checkbox"> 计划任务</li>
<li><input checked="" disabled="" type="checkbox"> 完成任务</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>项目</span><br><span class="line"><span class="bullet">  - </span>项目</span><br><span class="line"><span class="bullet">    - </span>项目</span><br><span class="line"></span><br><span class="line"><span class="bullet">1. </span>项目1</span><br><span class="line"><span class="bullet">2. </span>项目2</span><br><span class="line"><span class="bullet">3. </span>项目3</span><br><span class="line"></span><br><span class="line"><span class="bullet">- </span>[ ] 计划任务</span><br><span class="line"><span class="bullet">- </span>[x] 完成任务</span><br></pre></td></tr></table></figure>

<h1 id="创建一个表格"><a href="#创建一个表格" class="headerlink" title="创建一个表格"></a>创建一个表格</h1><table>
<thead>
<tr>
<th>项目</th>
<th>Value</th>
</tr>
</thead>
<tbody><tr>
<td>电脑</td>
<td>$1600</td>
</tr>
<tr>
<td>手机</td>
<td>$12</td>
</tr>
<tr>
<td>导管</td>
<td>$1</td>
</tr>
</tbody></table>
<figure class="highlight 1c"><table><tr><td class="code"><pre><span class="line">项目     <span class="string">| Value</span></span><br><span class="line">-------- <span class="string">| -----</span></span><br><span class="line">电脑  <span class="string">| $1600</span></span><br><span class="line">手机  <span class="string">| $12</span></span><br><span class="line">导管  <span class="string">| $1</span></span><br></pre></td></tr></table></figure>

<h2 id="设定内容居中-居左-居右"><a href="#设定内容居中-居左-居右" class="headerlink" title="设定内容居中/居左/居右"></a>设定内容居中/居左/居右</h2><p>使用<code>:---------:</code>居中<br>使用<code>:----------</code>居左<br>使用<code>----------:</code>居右</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">| 第一列       | 第二列         | 第三列        |</span><br><span class="line">|<span class="symbol">:-----------</span><span class="symbol">:|</span> -------------<span class="symbol">:|</span><span class="symbol">:-------------|</span></span><br><span class="line">| 第一列文本居中 | 第二列文本居右  | 第三列文本居左 |</span><br></pre></td></tr></table></figure>

<h2 id="SmartyPants"><a href="#SmartyPants" class="headerlink" title="SmartyPants"></a>SmartyPants</h2><p>SmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：</p>
<table>
<thead>
<tr>
<th>TYPE</th>
<th>ASCII</th>
<th>HTML</th>
</tr>
</thead>
<tbody><tr>
<td>Single backticks</td>
<td><code>&#39;Isn&#39;t this fun?&#39;</code></td>
<td>‘Isn’t this fun?’</td>
</tr>
<tr>
<td>Quotes</td>
<td><code>&quot;Isn&#39;t this fun?&quot;</code></td>
<td>“Isn’t this fun?”</td>
</tr>
<tr>
<td>Dashes</td>
<td><code>-- is en-dash, --- is em-dash</code></td>
<td>– is en-dash, — is em-dash</td>
</tr>
</tbody></table>
<figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string"> TYPE </span>|<span class="string"> ASCII </span>|<span class="string"> HTML </span>|</span><br><span class="line">|<span class="string">----------------</span>|<span class="string">------------------</span>|<span class="string">----------------</span>|</span><br><span class="line">|<span class="string">Single backticks</span>|<span class="string">`'Isn't this fun?'`            </span>|<span class="string">'Isn't this fun?'            </span>|</span><br><span class="line">|<span class="string">Quotes          </span>|<span class="string">`"Isn't this fun?"`            </span>|<span class="string">"Isn't this fun?"            </span>|</span><br><span class="line">|<span class="string">Dashes          </span>|<span class="string">`-- is en-dash, --- is em-dash`</span>|<span class="string">-- is en-dash, --- is em-dash</span>|</span><br></pre></td></tr></table></figure>

<h1 id="创建一个自定义列表"><a href="#创建一个自定义列表" class="headerlink" title="创建一个自定义列表"></a>创建一个自定义列表</h1><p><img src="https://img-blog.csdnimg.cn/20200706142841637.png" alt=""></p>
<figure class="highlight pgsql"><table><tr><td class="code"><pre><span class="line">Markdown</span><br><span class="line">:  <span class="type">Text</span>-<span class="keyword">to</span>-HTML <span class="keyword">conversion</span> tool</span><br><span class="line"></span><br><span class="line">Authors</span><br><span class="line">:  John</span><br><span class="line">:  Luke</span><br></pre></td></tr></table></figure>

<h1 id="创建一个注脚"><a href="#创建一个注脚" class="headerlink" title="创建一个注脚"></a>创建一个注脚</h1><p><img src="https://img-blog.csdnimg.cn/20200706142916499.png" alt=""></p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">一个具有注脚的文本。[^2]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^2</span>]: <span class="link">注脚的解释</span></span><br></pre></td></tr></table></figure>

<h1 id="添加注释"><a href="#添加注释" class="headerlink" title="添加注释"></a>添加注释</h1><p><img src="https://img-blog.csdnimg.cn/20200706142945193.png" alt=""></p>
<figure class="highlight armasm"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Markdown将文本转换为 </span>HTML。</span><br><span class="line"></span><br><span class="line">*[HTML]:   超文本标记语言</span><br></pre></td></tr></table></figure>

<h1 id="KaTeX-数学公式"><a href="#KaTeX-数学公式" class="headerlink" title="KaTeX 数学公式"></a>KaTeX 数学公式</h1><p>您可以使用渲染LaTeX数学表达式 <a href="https://khan.github.io/KaTeX/" target="_blank" rel="noopener">KaTeX</a>:</p>
<p><img src="https://img-blog.csdnimg.cn/20200706143255509.png" alt=""></p>
<figure class="highlight gams"><table><tr><td class="code"><pre><span class="line"><span class="built-in">Gamma</span>公式展示 <span class="symbol">$</span>\<span class="built-in">Gamma</span>(n) = (n<span class="number">-1</span>)!\quad\forall</span><br><span class="line">n\in\mathbb N<span class="symbol">$</span> 是通过欧拉积分</span><br><span class="line"></span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br><span class="line">\<span class="built-in">Gamma</span>(z) = \int_0^\infty t^&#123;z<span class="number">-1</span>&#125;e^&#123;-t&#125;dt\,.</span><br><span class="line"><span class="symbol">$</span><span class="symbol">$</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>你可以找到更多关于的信息 <strong>LaTeX</strong> 数学表达式<a href="http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference" target="_blank" rel="noopener">here</a>.</p>
</blockquote>
<figure class="highlight prolog"><table><tr><td class="code"><pre><span class="line">&gt; 你可以找到更多关于的信息 **<span class="symbol">LaTeX</span>** 数学表达式[here][<span class="number">1</span>].</span><br></pre></td></tr></table></figure>

<h1 id="甘特图功能"><a href="#甘特图功能" class="headerlink" title="甘特图功能"></a>甘特图功能</h1><p><img src="https://img-blog.csdnimg.cn/20200706143339709.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<ul>
<li>关于 <strong>甘特图</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">这儿</a>.</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200706134506518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h1 id="UML-图表"><a href="#UML-图表" class="headerlink" title="UML 图表"></a>UML 图表</h1><p>可以使用UML图表进行渲染。 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">Mermaid</a>. 例如下面产生的一个序列图：</p>
<p><img src="https://img-blog.csdnimg.cn/20200706144113771.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/20200706134544588.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p>这将产生一个流程图。:</p>
<p><img src="https://img-blog.csdnimg.cn/20200706144213275.png" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/2020070613460575.png" alt=""></p>
<ul>
<li>关于 <strong>Mermaid</strong> 语法，参考 <a href="https://mermaidjs.github.io/" target="_blank" rel="noopener">这儿</a>.</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>关于 <span class="strong">**Mermaid**</span> 语法，参考 [<span class="string">这儿</span>][<span class="symbol">3</span>].</span><br></pre></td></tr></table></figure>

<h1 id="FLowchart-流程图"><a href="#FLowchart-流程图" class="headerlink" title="FLowchart 流程图"></a>FLowchart 流程图</h1><p>我们依旧会支持flowchart的流程图：</p>
<p><img src="https://img-blog.csdnimg.cn/20200706144237484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/20200706134648411.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<ul>
<li>关于 <strong>Flowchart流程图</strong> 语法，参考 <a href="http://adrai.github.io/flowchart.js/" target="_blank" rel="noopener">这儿</a>.</li>
</ul>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">- </span>关于 <span class="strong">**Flowchart流程图**</span> 语法，参考 [<span class="string">这儿</span>][<span class="symbol">4</span>].</span><br></pre></td></tr></table></figure>

<h1 id="导出与导入"><a href="#导出与导入" class="headerlink" title="导出与导入"></a>导出与导入</h1><h2 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h2><blockquote>
<p>如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 <strong>文章导出</strong> ，生成一个.md文件或者.html文件进行本地保存。</p>
</blockquote>
<h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><blockquote>
<p>如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，续你的创作。</p>
</blockquote>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="symbol">1</span>]: <span class="link">http://meta.math.stackexchange.com/questions/5020/mathjax-basic-tutorial-and-quick-reference</span></span><br><span class="line">[<span class="symbol">2</span>]: <span class="link">https://mermaidjs.github.io/</span></span><br><span class="line">[<span class="symbol">3</span>]: <span class="link">https://mermaidjs.github.io/</span></span><br><span class="line">[<span class="symbol">4</span>]: <span class="link">http://adrai.github.io/flowchart.js/</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具使用</category>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>简析十种排序算法</title>
    <url>/posts/b4ecf97e.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p>排序算法可以分以下几种：<code>冒泡排序</code>、<code>选择排序</code>、<code>插入排序</code>、<code>希尔排序</code>、<code>归并排序</code>、<code>快速排序</code>、<code>堆排序</code>、<code>计数排序</code>、<code>桶排序</code>、<code>基数排序</code>。</p>
</blockquote>
<a id="more"></a>

<h1 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h1><p><strong>排序定义</strong></p>
<ul>
<li>对一序列对象根据某个关键字进行排序。</li>
</ul>
<p><strong>术语说明</strong></p>
<ul>
<li>稳定 ：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；</li>
<li>不稳定 ：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面；</li>
<li>内排序 ：所有排序操作都在内存中完成；</li>
<li>外排序 ：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行；</li>
<li>时间复杂度 ： 一个算法执行所耗费的时间。</li>
<li>空间复杂度 ：运行完一个程序所需内存的大小。</li>
</ul>
<h1 id="复杂度"><a href="#复杂度" class="headerlink" title="复杂度"></a>复杂度</h1><p><img src="https://img-blog.csdnimg.cn/20200705223709613.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p><strong>图片名词解释</strong>：</p>
<ul>
<li>n: 数据规模</li>
<li>k: “桶”的个数</li>
<li>In-place: 占用常数内存，不占用额外内存</li>
<li>Out-place: 占用额外内存</li>
</ul>
<h1 id="算法分类"><a href="#算法分类" class="headerlink" title="算法分类"></a>算法分类</h1><p><img src="https://img-blog.csdnimg.cn/20200707145832350.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p><img src="https://img-blog.csdnimg.cn/20200707161450656.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<p><strong>比较和非比较的区别</strong></p>
<blockquote>
<p>常见的<code>快速排序</code>、<code>归并排序</code>、<code>堆排序</code>、<code>冒泡排序</code>等属于<kbd>比较排序</kbd> 。在排序的最终结果里，元素之间的次序依赖于它们之间的比较。每个数都必须和其他数进行比较，才能确定自己的位置 。</p>
<p>在<code>冒泡排序</code>之类的排序中，问题规模为n，又因为需要比较n次，所以平均时间复杂度为O(n²)。在<code>归并排序</code>、<code>快速排序</code>之类的排序中，问题规模通过分治法消减为logN次，所以时间复杂度平均O(nlogn)。</p>
<p><kbd>比较排序</kbd>的优势是，适用于各种规模的数据，也不在乎数据的分布，都能进行排序。可以说，<strong>比较排序适用于一切需要排序的情况</strong>。</p>
<p><code>计数排序</code>、<code>基数排序</code>、<code>桶排序</code>则属于<kbd>非比较排序</kbd>。<kbd>非比较排序</kbd>是通过确定每个元素之前，应该有多少个元素来排序。针对数组arr，计算arr[i]之前有多少个元素，则唯一确定了arr[i]在排序后数组中的位置 。</p>
<p><kbd>非比较排序</kbd>只要确定每个元素之前的已有的元素个数即可，所有一次遍历即可解决。算法时间复杂度O(n)。</p>
<p><kbd>非比较排序</kbd>时间复杂度底，但由于<kbd>非比较排序</kbd>需要占用空间来确定唯一位置。所以对数据规模和数据分布有一定的要求。</p>
</blockquote>
<h1 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h1><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><blockquote>
<p><kbd>冒泡排序</kbd>是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果它们的顺序错误就把它们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<ul>
<li>步骤1: 比较相邻的元素。如果第一个比第二个大，就交换它们两个；</li>
<li>步骤2: 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对，这样在最后的元素应该会是最大的数；</li>
<li>步骤3: 针对所有的元素重复以上的步骤，除了最后一个；</li>
<li>步骤4: 重复步骤1~3，直到排序完成。</li>
</ul>
<ol start="2">
<li>动图演示</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMjMyMzg0NDktMjE0NjE2OTE5Ny5naWY" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 冒泡排序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] bubbleSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - <span class="number">1</span> - i; j++)</span><br><span class="line">          <span class="keyword">if</span> (array[j + <span class="number">1</span>] &lt; array[j]) &#123;</span><br><span class="line">              <span class="keyword">int</span> temp = array[j + <span class="number">1</span>];</span><br><span class="line">              array[j + <span class="number">1</span>] = array[j];</span><br><span class="line">              array[j] = temp;</span><br><span class="line">          &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<ul>
<li>最佳情况：T(n) = O(n)</li>
<li>最差情况：T(n) = O(n2)</li>
<li>平均情况：T(n) = O(n2)</li>
</ul>
<h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote>
<p><kbd>选择排序</kbd>是表现最稳定的排序算法之一 ，因为无论什么数据进去都是O(n2)的时间复杂度 ，所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。理论上讲，选择排序可能也是平时排序一般人想到的最多的排序方法了吧。</p>
<p><kbd>选择排序(Selection-sort)</kbd>是一种简单直观的排序算法。它的工作原理：首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。以此类推，直到所有元素均排序完毕。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<blockquote>
<p>n个记录的直接选择排序可经过n-1趟直接选择排序得到有序结果。具体算法描述如下：</p>
</blockquote>
<ul>
<li>步骤1：初始状态：无序区为R[1…n]，有序区为空；</li>
<li>步骤2：第i趟排序(i=1,2,3…n-1)开始时，当前有序区和无序区分别为R[1…i-1]和R(i…n）。该趟排序从当前无序区中-选出关键字最小的记录 R[k]，将它与无序区的第1个记录R交换，使R[1…i]和R[i+1…n)分别变为记录个数增加1个的新有序区和记录个数减少1个的新无序区；</li>
<li>步骤3：n-1趟结束，数组有序化了。</li>
</ul>
<ol start="2">
<li>动图演示</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMjQ3MTk1OTAtMTQzMzIxOTgyNC5naWY" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 选择排序</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] selectionSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> minIndex = i;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; array.length; j++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (array[j] &lt; array[minIndex]) <span class="comment">//找到最小的数</span></span><br><span class="line">              minIndex = j; <span class="comment">//将最小数的索引保存</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> temp = array[minIndex];</span><br><span class="line">      array[minIndex] = array[i];</span><br><span class="line">      array[i] = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<ul>
<li>最佳情况：T(n) = O(n2)</li>
<li>最差情况：T(n) = O(n2)</li>
<li>平均情况：T(n) = O(n2)</li>
</ul>
<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><blockquote>
<p><kbd>插入排序（Insertion-Sort）</kbd>的算法描述是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。插入排序在实现上，通常采用in-place排序（即只需用到O(1)的额外空间的排序），因而在从后向前扫描过程中，需要反复把已排序元素逐步向后挪位，为最新元素提供插入空间。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<blockquote>
<p>一般来说，插入排序都采用in-place在数组上实现。具体算法描述如下：</p>
</blockquote>
<ul>
<li>步骤1: 从第一个元素开始，该元素可以认为已经被排序；</li>
<li>步骤2: 取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>
<li>步骤3: 如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>
<li>步骤4: 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>
<li>步骤5: 将新元素插入到该位置后；</li>
<li>步骤6: 重复步骤2~5。</li>
</ul>
<ol start="2">
<li>动图演示</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMjU2NDUyNzctMTE1MTEwMDAwMC5naWY" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 插入排序</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] insertionSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">0</span>)</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">  <span class="keyword">int</span> current;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">      current = array[i + <span class="number">1</span>];</span><br><span class="line">      <span class="keyword">int</span> preIndex = i;</span><br><span class="line">      <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; current &lt; array[preIndex]) &#123;</span><br><span class="line">          array[preIndex + <span class="number">1</span>] = array[preIndex];</span><br><span class="line">          preIndex--;</span><br><span class="line">      &#125;</span><br><span class="line">      array[preIndex + <span class="number">1</span>] = current;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<ul>
<li>最佳情况：T(n) = O(n)</li>
<li>最坏情况：T(n) = O(n2)</li>
<li>平均情况：T(n) = O(n2)</li>
</ul>
<h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><blockquote>
<p><kbd>希尔排序</kbd>是希尔（Donald Shell） 于1959年提出的一种排序算法。希尔排序也是一种插入排序，它是简单插入排序经过改进之后的一个更高效的版本，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。它与插入排序的不同之处在于，它会优先比较距离较远的元素。希尔排序又叫缩小增量排序。</p>
<p><kbd>希尔排序</kbd>是把记录按下表的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<blockquote>
<p>我们来看下希尔排序的基本步骤，在此我们选择增量gap=length/2，缩小增量继续以gap = gap/2的方式，这种增量选择我们可以用一个序列来表示，{n/2,(n/2)/2…1}，称为增量序列。希尔排序的增量序列的选择与证明是个数学难题，我们选择的这个增量序列是比较常用的，也是希尔建议的增量，称为希尔增量，但其实这个增量序列不是最优的。此处我们做示例使用希尔增量。</p>
<p>先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，具体算法描述：</p>
</blockquote>
<ul>
<li>步骤1：选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；</li>
<li>步骤2：按增量序列个数k，对序列进行k 趟排序；</li>
<li>步骤3：每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</li>
</ul>
<ol start="2">
<li>过程演示</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200707153128339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 希尔排序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] ShellSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">  <span class="keyword">int</span> len = array.length;</span><br><span class="line">  <span class="keyword">int</span> temp, gap = len / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">while</span> (gap &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = gap; i &lt; len; i++) &#123;</span><br><span class="line">          temp = array[i];</span><br><span class="line">          <span class="keyword">int</span> preIndex = i - gap;</span><br><span class="line">          <span class="keyword">while</span> (preIndex &gt;= <span class="number">0</span> &amp;&amp; array[preIndex] &gt; temp) &#123;</span><br><span class="line">              array[preIndex + gap] = array[preIndex];</span><br><span class="line">              preIndex -= gap;</span><br><span class="line">          &#125;</span><br><span class="line">          array[preIndex + gap] = temp;</span><br><span class="line">      &#125;</span><br><span class="line">      gap /= <span class="number">2</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<ul>
<li>最佳情况：T(n) = O(nlog2 n)</li>
<li>最坏情况：T(n) = O(nlog2 n)</li>
<li>平均情况：T(n) =O(nlog2n)</li>
</ul>
<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><blockquote>
<p>和选择排序一样，<kbd>归并排序</kbd>的性能不受输入数据的影响，但表现比选择排序好的多，因为始终都是O(n log n）的时间复杂度。代价是需要额外的内存空间。</p>
<p><kbd>归并排序</kbd>是建立在归并操作上的一种有效的排序算法。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为2-路归并。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<ul>
<li>步骤1：把长度为n的输入序列分成两个长度为n/2的子序列；</li>
<li>步骤2：对这两个子序列分别采用归并排序；</li>
<li>步骤3：将两个排序好的子序列合并成一个最终的排序序列。</li>
</ul>
<ol start="2">
<li>动图演示</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMzA1NTcwNDMtMzczNzUwMTAuZ2lm" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 归并排序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] MergeSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length &lt; <span class="number">2</span>) <span class="keyword">return</span> array;</span><br><span class="line">  <span class="keyword">int</span> mid = array.length / <span class="number">2</span>;</span><br><span class="line">  <span class="keyword">int</span>[] left = Arrays.copyOfRange(array, <span class="number">0</span>, mid);</span><br><span class="line">  <span class="keyword">int</span>[] right = Arrays.copyOfRange(array, mid, array.length);</span><br><span class="line">  <span class="keyword">return</span> merge(MergeSort(left), MergeSort(right));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 归并排序——将两段排序好的数组结合成一个排序数组</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> left</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> right</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] merge(<span class="keyword">int</span>[] left, <span class="keyword">int</span>[] right) &#123;</span><br><span class="line">  <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[left.length + right.length];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> index = <span class="number">0</span>, i = <span class="number">0</span>, j = <span class="number">0</span>; index &lt; result.length; index++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (i &gt;= left.length)</span><br><span class="line">          result[index] = right[j++];</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (j &gt;= right.length)</span><br><span class="line">          result[index] = left[i++];</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (left[i] &gt; right[j])</span><br><span class="line">          result[index] = right[j++];</span><br><span class="line">      <span class="keyword">else</span></span><br><span class="line">          result[index] = left[i++];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<ul>
<li>最佳情况：T(n) = O(n)</li>
<li>最差情况：T(n) = O(nlogn)</li>
<li>平均情况：T(n) = O(nlogn)</li>
</ul>
<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><blockquote>
<p><kbd>快速排序</kbd>的基本思想：通过一趟排序将待排记录分隔成独立的两部分，其中一部分记录的关键字均比另一部分的关键字小，则可分别对这两部分记录继续进行排序，以达到整个序列有序。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<blockquote>
<p>快速排序使用分治法来把一个串（list）分为两个子串（sub-lists）。具体算法描述如下：</p>
</blockquote>
<ul>
<li>步骤1：从数列中挑出一个元素，称为 “基准”（pivot ）；</li>
<li>步骤2：重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>
<li>步骤3：递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li>
</ul>
<ol start="2">
<li>动图演示</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMzA5MzYzNzEtMTQxMzUyMzQxMi5naWY" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 快速排序方法</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] QuickSort(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length &lt; <span class="number">1</span> || start &lt; <span class="number">0</span> || end &gt;= array.length || start &gt; end) <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  <span class="keyword">int</span> smallIndex = partition(array, start, end);</span><br><span class="line">  <span class="keyword">if</span> (smallIndex &gt; start)</span><br><span class="line">      QuickSort(array, start, smallIndex - <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (smallIndex &lt; end)</span><br><span class="line">      QuickSort(array, smallIndex + <span class="number">1</span>, end);</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 快速排序算法——partition</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> start</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> end</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> pivot = (<span class="keyword">int</span>) (start + Math.random() * (end - start + <span class="number">1</span>));</span><br><span class="line">  <span class="keyword">int</span> smallIndex = start - <span class="number">1</span>;</span><br><span class="line">  swap(array, pivot, end);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = start; i &lt;= end; i++)</span><br><span class="line">      <span class="keyword">if</span> (array[i] &lt;= array[end]) &#123;</span><br><span class="line">          smallIndex++;</span><br><span class="line">          <span class="keyword">if</span> (i &gt; smallIndex)</span><br><span class="line">              swap(array, i, smallIndex);</span><br><span class="line">      &#125;</span><br><span class="line">  <span class="keyword">return</span> smallIndex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 交换数组内两个元素</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> j</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp = array[i];</span><br><span class="line">  array[i] = array[j];</span><br><span class="line">  array[j] = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<ul>
<li>最佳情况：T(n) = O(nlogn)</li>
<li>最差情况：T(n) = O(n2)</li>
<li>平均情况：T(n) = O(nlogn)</li>
</ul>
<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><blockquote>
<p><kbd>堆排序（Heapsort）</kbd>是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<ul>
<li>步骤1：将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；</li>
<li>步骤2：将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；</li>
<li>步骤3：由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</li>
</ul>
<ol start="2">
<li>动图演示</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMzEzMDg2OTktMzU2MTM0MjM3LmdpZg" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<ul>
<li>注意：这里用到了完全二叉树的部分性质：详情见数据结构二叉树知识点</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明全局变量，用于记录数组array的长度；</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> len;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 堆排序算法</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] HeapSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">    len = array.length;</span><br><span class="line">    <span class="keyword">if</span> (len &lt; <span class="number">1</span>) <span class="keyword">return</span> array;</span><br><span class="line">    <span class="comment">//1.构建一个最大堆</span></span><br><span class="line">    buildMaxHeap(array);</span><br><span class="line">    <span class="comment">//2.循环将堆首位（最大值）与末位交换，然后在重新调整最大堆</span></span><br><span class="line">    <span class="keyword">while</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        swap(array, <span class="number">0</span>, len - <span class="number">1</span>);</span><br><span class="line">        len--;</span><br><span class="line">        adjustHeap(array, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 建立最大堆</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">buildMaxHeap</span><span class="params">(<span class="keyword">int</span>[] array)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//从最后一个非叶子节点开始向上构造最大堆</span></span><br><span class="line">    <span class="comment">//for循环这样写会更好一点：i的左子树和右子树分别2i+1和2(i+1)</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = (len/<span class="number">2</span>- <span class="number">1</span>); i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        adjustHeap(array, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 调整使之成为最大堆</span></span><br><span class="line"><span class="comment">  *</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> i</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span>[] array, <span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> maxIndex = i;</span><br><span class="line">    <span class="comment">//如果有左子树，且左子树大于父节点，则将最大指针指向左子树</span></span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">2</span> &lt; len &amp;&amp; array[i * <span class="number">2</span>] &gt; array[maxIndex])</span><br><span class="line">        maxIndex = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//如果有右子树，且右子树大于父节点，则将最大指针指向右子树</span></span><br><span class="line">    <span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt; len &amp;&amp; array[i * <span class="number">2</span> + <span class="number">1</span>] &gt; array[maxIndex])</span><br><span class="line">        maxIndex = i * <span class="number">2</span> + <span class="number">2</span>; </span><br><span class="line">    <span class="comment">//如果父节点不是最大值，则将父节点与最大值交换，并且递归调整与父节点交换的位置。</span></span><br><span class="line">    <span class="keyword">if</span> (maxIndex != i) &#123;</span><br><span class="line">        swap(array, maxIndex, i);</span><br><span class="line">        adjustHeap(array, maxIndex);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<ul>
<li>最佳情况：T(n) = O(nlogn)</li>
<li>最差情况：T(n) = O(nlogn)</li>
<li>平均情况：T(n) = O(nlogn)</li>
</ul>
<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><blockquote>
<p><kbd>计数排序</kbd>的核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>
<p><kbd>计数排序(Counting sort)</kbd>是一种稳定的排序算法。计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<ul>
<li>步骤1：找出待排序的数组中最大和最小的元素；</li>
<li>步骤2：统计数组中每个值为i的元素出现的次数，存入数组C的第i项；</li>
<li>步骤3：对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）；</li>
<li>步骤4：反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1。</li>
</ul>
<ol start="2">
<li>动图演示</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMzE3NDA4NDAtNjk2ODE4MS5naWY" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 计数排序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] CountingSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array.length == <span class="number">0</span>) <span class="keyword">return</span> array;</span><br><span class="line">  <span class="keyword">int</span> bias, min = array[<span class="number">0</span>], max = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array[i] &gt; max)</span><br><span class="line">          max = array[i];</span><br><span class="line">      <span class="keyword">if</span> (array[i] &lt; min)</span><br><span class="line">          min = array[i];</span><br><span class="line">  &#125;</span><br><span class="line">  bias = <span class="number">0</span> - min;</span><br><span class="line">  <span class="keyword">int</span>[] bucket = <span class="keyword">new</span> <span class="keyword">int</span>[max - min + <span class="number">1</span>];</span><br><span class="line">  Arrays.fill(bucket, <span class="number">0</span>);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      bucket[array[i] + bias]++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> index = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (index &lt; array.length) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bucket[i] != <span class="number">0</span>) &#123;</span><br><span class="line">          array[index] = i - bias;</span><br><span class="line">          bucket[i]--;</span><br><span class="line">          index++;</span><br><span class="line">      &#125; <span class="keyword">else</span></span><br><span class="line">          i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<blockquote>
<p>当输入的元素是<code>n</code>个0到k之间的整数时，它的运行时间是 O(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。</p>
</blockquote>
<ul>
<li>最佳情况：T(n) = O(n+k)</li>
<li>最差情况：T(n) = O(n+k)</li>
<li>平均情况：T(n) = O(n+k)</li>
</ul>
<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><blockquote>
<p><kbd>桶排序</kbd>是计数排序的升级版。它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p>
<p><kbd>桶排序(Bucket sort)</kbd>的工作的原理：<br>假设输入数据服从均匀分布，将数据分到有限数量的有序桶里，每个桶再分别排序（有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序），再把每个桶里的数据按照顺序依次取出，组成的序列就是有序的了。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<ul>
<li>步骤1：人为设置一个BucketSize，作为每个桶所能放置多少个不同数值（例如当BucketSize==5时，该桶可以存放｛1,2,3,4,5｝这几种数字，但是容量不限，即可以存放100个3）；</li>
<li>步骤2：遍历输入数据，并且把数据一个一个放到对应的桶里去；</li>
<li>步骤3：对每个不是空的桶进行排序，可以使用其它排序方法，也可以递归使用桶排序；</li>
<li>步骤4：从不是空的桶里把排好序的数据拼接起来。</li>
</ul>
<blockquote>
<p>注意，如果递归使用桶排序为各个桶排序，则当桶数量为1时要手动减小BucketSize增加下一循环桶的数量，否则会陷入死循环，导致内存溢出。</p>
</blockquote>
<ol start="2">
<li>图片演示</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200707155047185.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 桶排序</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> bucketSize</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ArrayList&lt;Integer&gt; <span class="title">BucketSort</span><span class="params">(ArrayList&lt;Integer&gt; array, <span class="keyword">int</span> bucketSize)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.size() &lt; <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">  <span class="keyword">int</span> max = array.get(<span class="number">0</span>), min = array.get(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 找到最大值最小值</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (array.get(i) &gt; max)</span><br><span class="line">          max = array.get(i);</span><br><span class="line">      <span class="keyword">if</span> (array.get(i) &lt; min)</span><br><span class="line">          min = array.get(i);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> bucketCount = (max - min) / bucketSize + <span class="number">1</span>;</span><br><span class="line">  ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketArr = <span class="keyword">new</span> ArrayList&lt;&gt;(bucketCount);</span><br><span class="line">  ArrayList&lt;Integer&gt; resultArr = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">      bucketArr.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.size(); i++) &#123;</span><br><span class="line">      bucketArr.get((array.get(i) - min) / bucketSize).add(array.get(i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; bucketCount; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (bucketSize == <span class="number">1</span>) &#123; <span class="comment">// 如果带排序数组中有重复数字时</span></span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucketArr.get(i).size(); j++)</span><br><span class="line">              resultArr.add(bucketArr.get(i).get(j));</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (bucketCount == <span class="number">1</span>)</span><br><span class="line">              bucketSize--;</span><br><span class="line">          ArrayList&lt;Integer&gt; temp = BucketSort(bucketArr.get(i), bucketSize);</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; temp.size(); j++)</span><br><span class="line">              resultArr.add(temp.get(j));</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> resultArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<blockquote>
<p>桶排序最好情况下使用线性时间O(n)，桶排序的时间复杂度，取决与对各个桶之间数据进行排序的时间复杂度，因为其它部分的时间复杂度都为O(n)。很显然，桶划分的越小，各个桶之间的数据越少，排序所用的时间也会越少。但相应的空间消耗就会增大。</p>
</blockquote>
<ul>
<li>最佳情况：T(n) = O(n+k)</li>
<li>最差情况：T(n) = O(n+k)</li>
<li>平均情况：T(n) = O(n2)</li>
</ul>
<h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><blockquote>
<p><kbd>基数排序</kbd>也是非比较的排序算法，对每一位进行排序，从最低位开始排序，复杂度为O(kn),为数组长度，k为数组中的数的最大的位数；</p>
<p><kbd>基数排序</kbd>是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。</p>
</blockquote>
<ol>
<li>算法描述</li>
</ol>
<ul>
<li>步骤1：取得数组中的最大数，并取得位数；</li>
<li>步骤2：arr为原始数组，从最低位开始取每个位组成radix数组；</li>
<li>步骤3：对radix进行计数排序（利用计数排序适用于小范围数的特点）；</li>
</ul>
<ol start="2">
<li>动图演示</li>
</ol>
<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE3LmNuYmxvZ3MuY29tL2Jsb2cvODQ5NTg5LzIwMTcxMC84NDk1ODktMjAxNzEwMTUyMzI0NTM2NjgtMTM5NzY2MjUyNy5naWY" alt=""></p>
<ol start="3">
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 基数排序</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> array</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] RadixSort(<span class="keyword">int</span>[] array) &#123;</span><br><span class="line">  <span class="keyword">if</span> (array == <span class="keyword">null</span> || array.length &lt; <span class="number">2</span>)</span><br><span class="line">      <span class="keyword">return</span> array;</span><br><span class="line">  <span class="comment">// 1.先算出最大数的位数；</span></span><br><span class="line">  <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">      max = Math.max(max, array[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> maxDigit = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (max != <span class="number">0</span>) &#123;</span><br><span class="line">      max /= <span class="number">10</span>;</span><br><span class="line">      maxDigit++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">int</span> mod = <span class="number">10</span>, div = <span class="number">1</span>;</span><br><span class="line">  ArrayList&lt;ArrayList&lt;Integer&gt;&gt; bucketList = <span class="keyword">new</span> ArrayList&lt;ArrayList&lt;Integer&gt;&gt;();</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">      bucketList.add(<span class="keyword">new</span> ArrayList&lt;Integer&gt;());</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxDigit; i++, mod *= <span class="number">10</span>, div *= <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length; j++) &#123;</span><br><span class="line">          <span class="keyword">int</span> num = (array[j] % mod) / div;</span><br><span class="line">          bucketList.get(num).add(array[j]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; bucketList.size(); j++) &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; bucketList.get(j).size(); k++)</span><br><span class="line">              array[index++] = bucketList.get(j).get(k);</span><br><span class="line">          bucketList.get(j).clear();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>算法分析</li>
</ol>
<ul>
<li>最佳情况：T(n) = O(n * k)</li>
<li>最差情况：T(n) = O(n * k)</li>
<li>平均情况：T(n) = O(n * k)</li>
</ul>
<p><strong>基数排序有两种方法：</strong></p>
<ul>
<li>MSD 从高位开始进行排序</li>
<li>LSD 从低位开始进行排序</li>
</ul>
<p><strong>基数排序 vs 计数排序 vs 桶排序</strong></p>
<p>这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异：</p>
<ul>
<li>基数排序： 根据键值的每位数字来分配桶</li>
<li>计数排序： 每个桶只存储单一键值</li>
<li>桶排序： 每个桶存储一定范围的数值</li>
</ul>
]]></content>
      <categories>
        <category>算法分析</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Boyer-Moore 投票算法</title>
    <url>/posts/1724aac2.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote>
<p><kbd>摩尔投票算法</kbd>也可以叫做<kbd>多数投票算法</kbd>，是在 leetcode 169（Majority Element）题目中涉及到的算法。</p>
</blockquote>
<a id="more"></a>

<h1 id="题目介绍"><a href="#题目介绍" class="headerlink" title="题目介绍"></a>题目介绍</h1><blockquote>
<p>给定一个大小为 n 的数组，找到其中的多数元素。多数元素是指在数组中出现次数大于 ⌊ n/2 ⌋ 的元素。（你可以假设数组是非空的，并且给定的数组总是存在多数元素）</p>
</blockquote>
<h1 id="算法实现"><a href="#算法实现" class="headerlink" title="算法实现"></a>算法实现</h1><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><blockquote>
<p>如果我们把众数记为 +1，把其他数记为 -1，将它们全部加起来，显然和大于 0，从结果本身我们可以看出众数比其他数多。</p>
</blockquote>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><blockquote>
<p>Boyer-Moore 算法的本质和<kbd>分治法</kbd>十分类似。我们首先给出 Boyer-Moore 算法的详细步骤：</p>
</blockquote>
<ul>
<li><p>我们维护一个候选众数 <kbd>candidate</kbd> 和它出现的次数 <kbd>count</kbd>。初始时 candidate 可以为任意值，count 为 0；</p>
</li>
<li><p>我们遍历数组 <kbd>nums</kbd> 中的所有元素，对于每个元素 <kbd>x</kbd>，在判断 x 之前，如果 count 的值为 0，我们先将 x 的值赋予 candidate，随后我们判断 x：</p>
</li>
<li><p>如果 x 与 candidate 相等，那么计数器 count 的值增加 1；</p>
</li>
<li><p>如果 x 与 candidate 不等，那么计数器 count 的值减少 1。</p>
</li>
<li><p>在遍历完成后，<strong>candidate 即为整个数组的众数</strong>。</p>
</li>
</ul>
<p>我们举一个具体的例子，例如下面的这个数组：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span> | <span class="number">5</span>, <span class="number">7</span> | <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span> | <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<p>在遍历到数组中的第一个元素以及每个在 | 之后的元素时，candidate 都会因为 count 的值变为 0 而发生改变。最后一次 candidate 的值从 5 变为 7，也就是这个数组中的众数。</p>
<p>Boyer-Moore 算法的正确性较难证明，这里给出一种较为详细的用例子辅助证明的思路，供读者参考：</p>
<p>首先我们根据算法步骤中对 count 的定义，可以发现：在对整个数组进行遍历的过程中，count 的值一定非负。这是因为如果 count 的值为 0，那么在这一轮遍历的开始时刻，我们会将 x 的值赋予 candidate 并在接下来的一步中将 count 的值增加 1。因此 count 的值在遍历的过程中一直保持非负。</p>
<p>那么 count 本身除了计数器之外，还有什么更深层次的意义呢？我们还是以数组</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">[<span class="number">7</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">5</span>, <span class="number">1</span> | <span class="number">5</span>, <span class="number">7</span> | <span class="number">5</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">7</span> | <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">7</span>]</span><br></pre></td></tr></table></figure>

<p>作为例子，首先写下它在每一步遍历时 candidate 和 count 的值：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nums:</span>      <span class="string">[7,</span> <span class="number">7</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">1</span> <span class="string">|</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span> <span class="string">|</span> <span class="number">5</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span> <span class="string">|</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span><span class="string">]</span></span><br><span class="line"><span class="attr">candidate:</span>  <span class="number">7</span>  <span class="number">7</span>  <span class="number">7</span>  <span class="number">7</span>  <span class="number">7</span>  <span class="number">7</span>   <span class="number">5</span>  <span class="number">5</span>   <span class="number">5</span>  <span class="number">5</span>  <span class="number">5</span>  <span class="number">5</span>   <span class="number">7</span>  <span class="number">7</span>  <span class="number">7</span>  <span class="number">7</span></span><br><span class="line"><span class="attr">count:</span>      <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>   <span class="number">1</span>  <span class="number">0</span>   <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>我们再定义一个变量 <kbd>value</kbd>，它和真正的众数 <kbd>maj</kbd> 绑定。在每一步遍历时，如果当前的数 x 和 maj 相等，那么 value 的值加 1，否则减 1。value 的实际意义即为：到当前的这一步遍历为止，众数出现的次数比非众数多出了多少次。我们将 value 的值也写在下方：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nums:</span>      <span class="string">[7,</span> <span class="number">7</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">1</span> <span class="string">|</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span> <span class="string">|</span> <span class="number">5</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span> <span class="string">|</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span><span class="string">]</span></span><br><span class="line"><span class="attr">value:</span>      <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">-1</span>  <span class="number">0</span>  <span class="number">-1</span> <span class="number">-2</span> <span class="number">-1</span>  <span class="number">0</span>   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>有没有发现什么？我们将 count 和 value 放在一起：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nums:</span>      <span class="string">[7,</span> <span class="number">7</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">1</span> <span class="string">|</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span> <span class="string">|</span> <span class="number">5</span><span class="string">,</span> <span class="number">5</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span> <span class="string">|</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span><span class="string">,</span> <span class="number">7</span><span class="string">]</span></span><br><span class="line"><span class="attr">count:</span>      <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>   <span class="number">1</span>  <span class="number">0</span>   <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br><span class="line"><span class="attr">value:</span>      <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">2</span>  <span class="number">1</span>  <span class="number">0</span>  <span class="number">-1</span>  <span class="number">0</span>  <span class="number">-1</span> <span class="number">-2</span> <span class="number">-1</span>  <span class="number">0</span>   <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>发现在每一步遍历中，count 和 value 要么相等，要么互为相反数！并且在候选众数 candidate 就是 maj 时，它们相等，candidate 是其它的数时，它们互为相反数！</p>
<p>为什么会有这么奇妙的性质呢？这并不难证明：我们将候选众数 candidate 保持不变的连续的遍历称为「一段」。在同一段中，count 的值是根据 candidate == x 的判断进行加减的。那么如果 candidate 恰好为 maj，那么在这一段中，count 和 value 的变化是同步的；如果 candidate 不为 maj，那么在这一段中 count 和 value 的变化是相反的。因此就有了这样一个奇妙的性质。</p>
<p>这样以来，由于：</p>
<p>我们证明了 count 的值一直为非负，在最后一步遍历结束后也是如此；</p>
<p>由于 value 的值与真正的众数 maj 绑定，并且它表示「众数出现的次数比非众数多出了多少次」，那么在最后一步遍历结束后，value 的值为正数；</p>
<p>在最后一步遍历结束后，count 非负，value 为正数，所以它们不可能互为相反数，只可能相等，即 count == value。因此在最后「一段」中，count 的 value 的变化是同步的，也就是说，candidate 中存储的候选众数就是真正的众数 maj。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">majorityElement</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        Integer candidate = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (count == <span class="number">0</span>) &#123;</span><br><span class="line">                candidate = num;</span><br><span class="line">            &#125;</span><br><span class="line">            count += (num == candidate) ? <span class="number">1</span> : -<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> candidate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h1><ul>
<li><p>时间复杂度：O(n)。Boyer-Moore 算法只对数组进行了一次遍历。</p>
</li>
<li><p>空间复杂度：O(1)。Boyer-Moore 算法只需要常数级别的额外空间。</p>
</li>
</ul>
<hr>
<p><strong>参考：</strong></p>
<ul>
<li><a href="https://leetcode-cn.com/problems/majority-element/solution/duo-shu-yuan-su-by-leetcode-solution/" target="_blank" rel="noopener">LeetCode官方题解</a></li>
</ul>
]]></content>
      <categories>
        <category>算法分析</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>IntelliJ IDEA 快捷键说明大全</title>
    <url>/posts/5e63e6f3.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img-blog.csdnimg.cn/2020063010551598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<a id="more"></a>

<hr>
<h1 id="编辑【Editing】"><a href="#编辑【Editing】" class="headerlink" title="编辑【Editing】"></a>编辑【Editing】</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + Space</td>
<td>Basic code completion (the name of any class, method or variable)</td>
<td>补全代码，由于经常与操作系统的输入法的切换冲突，所以实际很少用。一般直接在 idea 中开启输入自动补全机制。</td>
</tr>
<tr>
<td>Ctrl + Shift + Space</td>
<td>Smart code completion (filters the list of methods and variables by expected type</td>
<td>在列出的可选项中只显示出你所输入的关键字最相关的信息。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + Enter</td>
<td>Complete statement</td>
<td>代码补全后，自动在代码末尾添加分号结束符</td>
</tr>
<tr>
<td>Ctrl + P</td>
<td>Parameter info (within method call arguments)</td>
<td>在某个方法中，调用该按键后，会展示出这个方法的调用参数列表信息。</td>
</tr>
<tr>
<td>Ctrl + Q</td>
<td>Quick documentation lookup</td>
<td>展示某个类或者方法的 API 说明文档</td>
</tr>
<tr>
<td>Ctrl + mouse</td>
<td>over code Brief Info</td>
<td>跳进到某个类或者方法源代码中进行查看。（常用）</td>
</tr>
<tr>
<td>Alt + Insert</td>
<td>Generate code… (Getters, Setters, Constructors, hashCode/equals, toString)</td>
<td>自动生成某个类的 Getters, Setters, Constructors, hashCode/equals, toString 等代码。（常用）</td>
</tr>
<tr>
<td>Ctrl + O</td>
<td>Override methods</td>
<td>展示该类中所有覆盖或者实现的方法列表，注意这里是字母小写的 O！</td>
</tr>
<tr>
<td>Ctrl + Alt + T</td>
<td>Surround with… (if..else,try..catch, for, synchronized, etc.)</td>
<td>自动生成具有环绕性质的代码，比如：if..else,try..catch, for, synchronized 等等，使用前要先选择好需要环绕的代码块。（常用）</td>
</tr>
<tr>
<td>Ctrl + /</td>
<td>Comment/uncomment with line comment</td>
<td>对单行代码，添加或删除注释。分为两种情况：如果只是光标停留在某行，那么连续使用该快捷键，会不断注释掉下一行的代码；如果选定了某行代码（选定了某行代码一部分也算这种情况），那么连续使用该快捷键，会在添加或删除该行注释之间来回切换。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + /</td>
<td>Comment/uncomment with block comment</td>
<td>对代码块，添加或删除注释。它与 Ctrl + / 的区别是，它只会在代码块的开头与结尾添加注释符号！（常用）</td>
</tr>
<tr>
<td>Ctrl + W</td>
<td>Select successively increasing code blocks</td>
<td>选中当前光标所在的代码块，多次触发，代码块会逐级变大。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + W</td>
<td>Decrease current selection to previous state</td>
<td>是 Ctrl + W 的反向操作，多次触发，代码块会逐级变小，最小变为光标。</td>
</tr>
<tr>
<td>Alt + Q</td>
<td>Context info</td>
<td>展示包含当前光标所在代码的父节点信息，比如在 java 方法中调用，就会展示方法签名信息。</td>
</tr>
<tr>
<td>Alt + Enter</td>
<td>Show intention actions and quick-fixes</td>
<td>展示当前当前光标所在代码，可以变化的扩展操作</td>
</tr>
<tr>
<td>Ctrl + Alt + L</td>
<td>Reformat code</td>
<td>格式化代码 （常用）</td>
</tr>
<tr>
<td>Ctrl + Alt + O</td>
<td>Optimize imports</td>
<td>去除没有实际用到的包，这在 java 类中特别有用。（常用）</td>
</tr>
<tr>
<td>Ctrl + Alt + I</td>
<td>Auto-indent line(s)</td>
<td>按照缩进的设定，自动缩进所选择的代码段。</td>
</tr>
<tr>
<td>Tab / Shift + Tab</td>
<td>Indent/unindent selected lines</td>
<td>缩进或者不缩进一次所选择的代码段。（常用）</td>
</tr>
<tr>
<td>Ctrl + X 或 Shift Delete</td>
<td>Cut current line or selected lock to clipboard</td>
<td>剪切当前代码。 （常用）</td>
</tr>
<tr>
<td>Ctrl + C 或 Ctrl + Insert</td>
<td>Copy current line or selected block to clipboard</td>
<td>拷贝当前代码。 （常用）</td>
</tr>
<tr>
<td>Ctrl + V 或 Shift + Insert</td>
<td>Paste from clipboard</td>
<td>粘贴之前剪切或拷贝的代码。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + V</td>
<td>Paste from recent buffers…</td>
<td>从之前的剪切或拷贝的代码历史记录中，选择现在需要粘贴的内容。（常用）</td>
</tr>
<tr>
<td>Ctrl + D</td>
<td>Duplicate current line or selected block</td>
<td>复制当前选中的代码。（常用）</td>
</tr>
<tr>
<td>Ctrl + Y</td>
<td>Delete line at caret</td>
<td>删除当前光标所在的代码行。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + J</td>
<td>Smart line join</td>
<td>把下一行的代码接续到当前的代码行。</td>
</tr>
<tr>
<td>Ctrl + Enter</td>
<td>Smart line split</td>
<td>当前代码行与下一行代码之间插入一个空行，原来所在的光标不变。（常用）</td>
</tr>
<tr>
<td>Shift + Enter</td>
<td>Start new line</td>
<td>当前代码行与下一行代码之间插入一个空行，原来光标现在处于新加的空上。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + U</td>
<td>Toggle case for word at caret or selected block</td>
<td>所选择的内容进行大小写转换。。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + ]/[</td>
<td>Select till code block end/start</td>
<td>从当前光标所在位置开始，一直选择到当前光标所在代码段起始或者结束位置。</td>
</tr>
<tr>
<td>Ctrl + Delete</td>
<td>Delete to word end</td>
<td>删除从当前光标所在位置开始，直到这个单词的结尾的内容。</td>
</tr>
<tr>
<td>Ctrl + NumPad(+/-)</td>
<td>Expand/collapse code block</td>
<td>展开或收缩代码段。 （常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + NumPad(+)</td>
<td>Expand all</td>
<td>展开所有代码段。</td>
</tr>
<tr>
<td>Ctrl + Shift + NumPad(-)</td>
<td>Collapse all</td>
<td>收缩所有代码段。</td>
</tr>
<tr>
<td>Ctrl + F4</td>
<td>Close active editor tab</td>
<td>关闭当前标签页。</td>
</tr>
<tr>
<td>Shift + F6</td>
<td></td>
<td>修改名字。（常用）</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Shift-Space-示例（智能补全）"><a href="#Ctrl-Shift-Space-示例（智能补全）" class="headerlink" title="Ctrl + Shift + Space 示例（智能补全）"></a>Ctrl + Shift + Space 示例（智能补全）</h2><blockquote>
<p>使用前，用于补全的列表，默认是以输入的关键字作为前缀的：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630112209562.png" alt=""></p>
<blockquote>
<p>使用后，用于补全的列表，会把与输入的关键字最相关的信息排到最前面，比如这里的 Resource 的实现类会直接过滤出来，很方便吧：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630112325266.png" alt=""></p>
<h2 id="Ctrl-P-示例（方法参数列表）"><a href="#Ctrl-P-示例（方法参数列表）" class="headerlink" title="Ctrl + P 示例（方法参数列表）"></a>Ctrl + P 示例（方法参数列表）</h2><p><img src="https://img-blog.csdnimg.cn/2020063011240818.png" alt=""></p>
<h2 id="Ctrl-Q-示例（API-说明文档）"><a href="#Ctrl-Q-示例（API-说明文档）" class="headerlink" title="Ctrl + Q 示例（API 说明文档）"></a>Ctrl + Q 示例（API 说明文档）</h2><p><img src="https://img-blog.csdnimg.cn/20200630112457731.png" alt=""></p>
<h2 id="Alt-Insert-示例（自动生成与类相关的代码）"><a href="#Alt-Insert-示例（自动生成与类相关的代码）" class="headerlink" title="Alt + Insert 示例（自动生成与类相关的代码）"></a>Alt + Insert 示例（自动生成与类相关的代码）</h2><blockquote>
<p>如果绑定了 Spring 框架，还能自动生成与 Spring 相关的依赖参数：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630112550710.png" alt=""></p>
<h2 id="Ctrl-O-示例（该类中所有覆盖或者实现的方法列表）"><a href="#Ctrl-O-示例（该类中所有覆盖或者实现的方法列表）" class="headerlink" title="Ctrl + O 示例（该类中所有覆盖或者实现的方法列表）"></a>Ctrl + O 示例（该类中所有覆盖或者实现的方法列表）</h2><p><img src="https://img-blog.csdnimg.cn/20200630112653153.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="Ctrl-Alt-T-示例（生成具有环绕性质的代码）"><a href="#Ctrl-Alt-T-示例（生成具有环绕性质的代码）" class="headerlink" title="Ctrl + Alt + T 示例（生成具有环绕性质的代码）"></a>Ctrl + Alt + T 示例（生成具有环绕性质的代码）</h2><blockquote>
<p>再强调一遍，使用前要先选择好需要环绕的代码块！没有选择代码块，还做环绕干嘛呢</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/2020063011280416.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<blockquote>
<p>在右边的 Surround with 列表，就是目前支持的自动代码环绕功能，可以直接通过列表最左边的快捷键选择，是不是很方便呀 O(∩_∩)O~ 它还支持自定义的代码模板（Live templates）呢，很强大吧。</p>
</blockquote>
<h2 id="Ctrl-Shift-V-示例（剪切或拷贝的代码历史记录中，选择粘贴的内容）"><a href="#Ctrl-Shift-V-示例（剪切或拷贝的代码历史记录中，选择粘贴的内容）" class="headerlink" title="Ctrl + Shift + V 示例（剪切或拷贝的代码历史记录中，选择粘贴的内容）"></a>Ctrl + Shift + V 示例（剪切或拷贝的代码历史记录中，选择粘贴的内容）</h2><blockquote>
<p>这是一个很酷的功能 O(∩_∩)O~，它会把之前剪切或拷贝的代码历史记录（最近 5 条）展示出来，让你来选择哦。可惜的是，列表选项如果是中文会乱码，还好内容可以正常显示：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630112901375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<hr>
<h1 id="查找或替换【Search-Replace】"><a href="#查找或替换【Search-Replace】" class="headerlink" title="查找或替换【Search/Replace】"></a>查找或替换【Search/Replace】</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F</td>
<td>Find</td>
<td>在当前标签页中进行查找，还支持正则表达式哦。（常用）</td>
</tr>
<tr>
<td>F3</td>
<td>Find next</td>
<td>如果找到了多个查找结果，每调用一次就会跳到下一个结果，很方便哦。</td>
</tr>
<tr>
<td>Shift + F3</td>
<td>Find previous</td>
<td>是 F3 的反向操作，即每调用一次就会跳到上一个结果。</td>
</tr>
<tr>
<td>Ctrl + R</td>
<td>Replace</td>
<td>在当前标签页中进行替换操作。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + F</td>
<td>Find in path</td>
<td>通过路径查找。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + R</td>
<td>Replace in path</td>
<td>通过路径替换。（常用）</td>
</tr>
</tbody></table>
<h2 id="Ctrl-F-（查找）"><a href="#Ctrl-F-（查找）" class="headerlink" title="Ctrl + F （查找）"></a>Ctrl + F （查找）</h2><blockquote>
<p>触发后，会打开一个查找面板：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630113106753.png" alt=""></p>
<blockquote>
<p>具体含义如下：</p>
</blockquote>
<table>
<thead>
<tr>
<th>图示</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>向上箭头</td>
<td>就是 快捷键【Shift + F3】，每调用一次就会跳到上一个结果。</td>
</tr>
<tr>
<td>向下箭头</td>
<td>就是 快捷键【F3】，每调用一次就会跳到下一个结果。</td>
</tr>
<tr>
<td>加号符号</td>
<td>把当前的高亮项加入到选中的列表中。</td>
</tr>
<tr>
<td>减号符号</td>
<td>把当前的高亮项从选中的列表中移除。</td>
</tr>
<tr>
<td>勾选符号</td>
<td>把所有的查找结果同时选中，这很适合批量操作。</td>
</tr>
<tr>
<td>文本内的向上箭头</td>
<td>打开查询结果列表面板。</td>
</tr>
<tr>
<td>两个框加一个向下箭头</td>
<td>更多选项。</td>
</tr>
<tr>
<td>Match Case</td>
<td>是否大小写敏感。</td>
</tr>
<tr>
<td>Regex</td>
<td>正则表达式。</td>
</tr>
<tr>
<td>Words</td>
<td>匹配单词。</td>
</tr>
<tr>
<td>x matches</td>
<td>x 表示的是找到的记录数。</td>
</tr>
</tbody></table>
<blockquote>
<p>勾选符号选中效果：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630113526162.png" alt=""></p>
<blockquote>
<p>点击文本内的向上箭头，打开后的查询结果列表面板：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630113609308.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<blockquote>
<p>两个框加一个向下箭头，会变成一个大文本输入框，而且还多出一个查看搜索历史的按钮：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630113627979.png" alt=""></p>
<h2 id="Ctrl-Shift-F-（通过路径查找）"><a href="#Ctrl-Shift-F-（通过路径查找）" class="headerlink" title="Ctrl + Shift + F （通过路径查找）"></a>Ctrl + Shift + F （通过路径查找）</h2><p><img src="https://img-blog.csdnimg.cn/2020063011370152.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<hr>
<h1 id="查看使用情况【Usage-Search】"><a href="#查看使用情况【Usage-Search】" class="headerlink" title="查看使用情况【Usage Search】"></a>查看使用情况【Usage Search】</h1><blockquote>
<p>主要是查看当前光标所在内容使用情况。</p>
</blockquote>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody><tr>
<td>Alt + F7</td>
<td>Find usages</td>
<td>在当前项目中的使用情况，会打开一个使用情况面板。</td>
</tr>
<tr>
<td>Ctrl + F7</td>
<td>Find usages in file</td>
<td>在当前文件中的使用情况，找的内容会低亮显示。</td>
</tr>
<tr>
<td>Ctrl + Shift + F7</td>
<td></td>
<td>在当前文件中的使用情况，找的内容会高亮显示。</td>
</tr>
<tr>
<td>Ctrl + Alt + F7</td>
<td>Show usages</td>
<td>打开使用情况列表。（常用）</td>
</tr>
</tbody></table>
<h2 id="Ctrl-Alt-F7（打开使用情况列表）"><a href="#Ctrl-Alt-F7（打开使用情况列表）" class="headerlink" title="Ctrl + Alt + F7（打开使用情况列表）"></a>Ctrl + Alt + F7（打开使用情况列表）</h2><p><img src="https://img-blog.csdnimg.cn/20200630113751200.png" alt=""></p>
<hr>
<h1 id="编译与运行【Compile-and-Run】"><a href="#编译与运行【Compile-and-Run】" class="headerlink" title="编译与运行【Compile and Run】"></a>编译与运行【Compile and Run】</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + F9</td>
<td>Make project (compile modifed and dependent)</td>
<td>编译项目（如果之前有编译过，那么只会编译那些修改的类或者依赖的包）。</td>
</tr>
<tr>
<td>Ctrl + Shift + F9</td>
<td>Compile selected file, package or module</td>
<td>编译所中的范围（如果在某个类中，那么只会编译当前类）。</td>
</tr>
<tr>
<td>Alt + Shift + F10</td>
<td>Select configuration and run</td>
<td>会打开一个已经配置的运行列表，让你选择一个后，再运行。</td>
</tr>
<tr>
<td>Alt + Shift + F9</td>
<td></td>
<td>Select configuration and debug</td>
</tr>
<tr>
<td>Shift + F10</td>
<td>Run</td>
<td>立即运行当前配置的运行实例，这个在单元测试中特别好用。（常用）</td>
</tr>
<tr>
<td>Shift + F9</td>
<td>Debug</td>
<td>立即以编译模式运行当前配置的运行实例。</td>
</tr>
<tr>
<td>Ctrl + Shift + F10</td>
<td>Run context configuration from editor</td>
<td>按照编辑器绑定的文件类型，运行相关的程序。比如一个 html 页面，调用后，会直接打开一个浏览器。</td>
</tr>
</tbody></table>
<h2 id="Alt-Shift-F10（打开运行列表，选择一个运行）"><a href="#Alt-Shift-F10（打开运行列表，选择一个运行）" class="headerlink" title="Alt + Shift + F10（打开运行列表，选择一个运行）"></a>Alt + Shift + F10（打开运行列表，选择一个运行）</h2><p><img src="https://img-blog.csdnimg.cn/20200630113850366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<hr>
<h1 id="调试【Debugging】"><a href="#调试【Debugging】" class="headerlink" title="调试【Debugging】"></a>调试【Debugging】</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody><tr>
<td>F8</td>
<td>Step over</td>
<td>跳到当前代码下一行。 （常用）</td>
</tr>
<tr>
<td>F7</td>
<td>Step into</td>
<td>跳入到调用的方法内部代码。 （常用）</td>
</tr>
<tr>
<td>Shift + F7</td>
<td>Smart step into</td>
<td>会打开一个面板，让你选择具体要跳入的类方法，这个在复杂的嵌套代码中特别有用。</td>
</tr>
<tr>
<td>Shift + F8</td>
<td>Step out</td>
<td>跳出当前的类，到上一级。 （常用）</td>
</tr>
<tr>
<td>Alt + F9</td>
<td>Run to cursor</td>
<td>让代码运行到当前光标所在处，非常棒的功能。 （常用）</td>
</tr>
<tr>
<td>Alt + F8</td>
<td>Evaluate expression</td>
<td>打开一个表达式面板，然后进行进一步的计算。</td>
</tr>
<tr>
<td>F9</td>
<td>Resume program</td>
<td>结束当前断点的本轮调试（因为有可能代码会被调用多次，所以调用后只会结束当前的这一次）；如果有下一个断点会跳到下一个断点中。（常用）</td>
</tr>
<tr>
<td>Ctrl + F8</td>
<td>Toggle breakpoint</td>
<td>在当前光标处，添加或者删除断点。</td>
</tr>
<tr>
<td>Ctrl + Shift + F8</td>
<td>View breakpoints</td>
<td>打开当前断点的面板，可以进行条件过滤哦。</td>
</tr>
</tbody></table>
<h2 id="Shift-F7（选择具体要跳入的类方法）"><a href="#Shift-F7（选择具体要跳入的类方法）" class="headerlink" title="Shift + F7（选择具体要跳入的类方法）"></a>Shift + F7（选择具体要跳入的类方法）</h2><p><img src="https://img-blog.csdnimg.cn/20200630114043675.png" alt=""></p>
<h2 id="Alt-F8-（计算表达式）"><a href="#Alt-F8-（计算表达式）" class="headerlink" title="Alt + F8 （计算表达式）"></a>Alt + F8 （计算表达式）</h2><blockquote>
<p>注意：要在当前断点之前的代码中，选择某一个变量运行才有效，因为只有代码运行过了，才会有值</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630114104225.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<h2 id="Ctrl-Shift-F8-（当前断点的面板）"><a href="#Ctrl-Shift-F8-（当前断点的面板）" class="headerlink" title="Ctrl + Shift + F8 （当前断点的面板）"></a>Ctrl + Shift + F8 （当前断点的面板）</h2><p><img src="https://img-blog.csdnimg.cn/20200630114130670.png" alt=""></p>
<hr>
<h1 id="导航【Navigation】"><a href="#导航【Navigation】" class="headerlink" title="导航【Navigation】"></a>导航【Navigation】</h1><table>
<thead>
<tr>
<th>快捷键</th>
<th>英文说明</th>
<th>中文说明</th>
</tr>
</thead>
<tbody><tr>
<td>Ctrl + N</td>
<td>Go to class</td>
<td>打开类查询框。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + N</td>
<td>Go to file</td>
<td>打开文件查询框。（常用）</td>
</tr>
<tr>
<td>Alt + 右箭头/左箭头</td>
<td>Go to next/previous editor tab</td>
<td>跳到下一个/上一个编辑器标签。</td>
</tr>
<tr>
<td>F12</td>
<td>Go back to previous tool window</td>
<td>如果当前在编辑窗口，触发后，会跳到之前操作过的工具栏上。</td>
</tr>
<tr>
<td>ESC</td>
<td>Go to editor (from tool window)</td>
<td>从工具栏上，再跳回原来的编辑窗口，一般与 F12 配合使用。</td>
</tr>
<tr>
<td>Shift + ESC</td>
<td>Hide active or last active window</td>
<td>隐藏最后一个处于活跃状态的工具窗口。</td>
</tr>
<tr>
<td>Ctrl + Shift + F4</td>
<td>Close active run/messages/find/… tab</td>
<td>同时关闭处于活动状态的某些工具栏窗口。</td>
</tr>
<tr>
<td>Ctrl + G</td>
<td>Go to line</td>
<td>跳转至某一行代码。。（常用）</td>
</tr>
<tr>
<td>Ctrl + E</td>
<td>Recent files popup</td>
<td>打开曾经操作过的文件历史列表。</td>
</tr>
<tr>
<td>Ctrl + Alt + 右箭头/左箭头</td>
<td>Navigate back/forward</td>
<td>在曾经浏览过的代码行中来回跳</td>
</tr>
<tr>
<td>Ctrl + Shift + Backspace</td>
<td>Navigate to last edit location</td>
<td>跳转到最近的编辑位置（如果曾经编辑过代码）。</td>
</tr>
<tr>
<td>Alt + F1</td>
<td>Select current file or symbol in any view</td>
<td>打开一个类型列表，选择后会导航到当前文件或者内容的具体与类型相关的面板中。</td>
</tr>
<tr>
<td>Ctrl + B 或 Ctrl + 鼠标左键</td>
<td>Go to declaration</td>
<td>如果是类，那么会跳转到当前光标所在的类定义或者接口；如果是变量，会打开一个变量被引用的列表。（常用）</td>
</tr>
<tr>
<td>Ctrl + Alt + B</td>
<td>Go to implementation(s)</td>
<td>跳转到实现类，而不是接口。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + I</td>
<td>Open quick definition lookup</td>
<td>打开一个面板，里面包含类代码。</td>
</tr>
<tr>
<td>Ctrl + Shift + B</td>
<td>Go to type declaration</td>
<td>打开变量的类型所对应的类代码，只对变量有用。</td>
</tr>
<tr>
<td>Ctrl + U</td>
<td>Go to super-method/super-class</td>
<td>打开方法的超类方法或者类的超类，只对有超类的方法或者类有效。</td>
</tr>
<tr>
<td>Alt + 上/下箭头</td>
<td>Go to previous/next method</td>
<td>在某个类中，跳到上一个/下一个方法的签名上。</td>
</tr>
<tr>
<td>Ctrl + ]/[</td>
<td>Move to code block end/start</td>
<td>移动光标到类定义的终止右大括号或者起始左大括号。</td>
</tr>
<tr>
<td>Ctrl + F12</td>
<td>File structure popup</td>
<td>打开类的结构列表。（常用）</td>
</tr>
<tr>
<td>Ctrl + H</td>
<td>Type hierarchy</td>
<td>打开类的继承关系列表。（常用）</td>
</tr>
<tr>
<td>Ctrl + Shift + H</td>
<td>Method hierarchy</td>
<td>打开某个类方法的继承关系列表。</td>
</tr>
<tr>
<td>Ctrl + Alt + H</td>
<td>Call hierarchy</td>
<td>打开所有类的方法列表，这些方法都调用了当前光标所处的某个类方法。（常用）</td>
</tr>
<tr>
<td>F2/Shift + F2</td>
<td>Next/previous highlighted error</td>
<td>在编译错误的代码行中来回跳。</td>
</tr>
<tr>
<td>F4</td>
<td>Edit source</td>
<td>打开当前光标所在处的方法或类源码。</td>
</tr>
<tr>
<td>Alt + Home</td>
<td>Show navigation bar</td>
<td>激活包路径的导航栏。</td>
</tr>
<tr>
<td>F11</td>
<td>Toggle bookmark</td>
<td>把光标所处的代码行添加为书签或者从书签中删除。（常用）</td>
</tr>
<tr>
<td>Ctrl + F11</td>
<td>Toggle bookmark with mnemonic</td>
<td>把光标所处的代码行添加为带快捷键的书签或者从快捷键书签中删除。</td>
</tr>
<tr>
<td>Ctrl + [0-9]</td>
<td>Go to numbered bookmark</td>
<td>跳转到之前定义的快捷键书签。</td>
</tr>
<tr>
<td>Shift + F11</td>
<td>Show bookmarks</td>
<td>打开书签列表。（常用）</td>
</tr>
</tbody></table>
<h2 id="Ctrl-N-（打开类查询框）"><a href="#Ctrl-N-（打开类查询框）" class="headerlink" title="Ctrl + N （打开类查询框）"></a>Ctrl + N （打开类查询框）</h2><blockquote>
<p>键入类名的关键字，会自动出现相关的类哦，右侧还有一个勾选项，能够把引用的 jar 包中的类也加进来，很强大</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630114610196.png" alt=""></p>
<h2 id="Ctrl-Alt-右箭头-左箭头（在曾经浏览过的代码行中来回跳）"><a href="#Ctrl-Alt-右箭头-左箭头（在曾经浏览过的代码行中来回跳）" class="headerlink" title="Ctrl + Alt + 右箭头/左箭头（在曾经浏览过的代码行中来回跳）"></a>Ctrl + Alt + 右箭头/左箭头（在曾经浏览过的代码行中来回跳）</h2><blockquote>
<p>如果操作系统装的是 NVIDIA 显卡驱动程序，那么触发这个热键，会把旋转显示内容，而不是触发 idea 的功能，因为 idea 热键被 NVIDIA 显卡驱动给劫持咯。解决方法是禁用 NVIDIA 显卡驱动所有快捷键，：</p>
</blockquote>
<ol>
<li><p>控制面板-》显示-》屏幕分辨率：<br><img src="https://img-blog.csdnimg.cn/20200630114638616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
</li>
<li><p>点击【高级设置】-》核芯显卡控制面板：<br><img src="https://img-blog.csdnimg.cn/2020063011470314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
</li>
<li><p>图形属性-》选项与支持-》禁用所有快捷键（这些快捷键几乎没有什么用处！）<br><img src="https://img-blog.csdnimg.cn/20200630114720854.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
</li>
</ol>
<h2 id="Alt-F1（打开一个类型列表）"><a href="#Alt-F1（打开一个类型列表）" class="headerlink" title="Alt + F1（打开一个类型列表）"></a>Alt + F1（打开一个类型列表）</h2><p><img src="https://img-blog.csdnimg.cn/20200630114816731.png" alt=""></p>
<h2 id="F11（添加为书签或者从书签中删除）"><a href="#F11（添加为书签或者从书签中删除）" class="headerlink" title="F11（添加为书签或者从书签中删除）"></a>F11（添加为书签或者从书签中删除）</h2><blockquote>
<p>书签不是默认视图，所以我们要把它添加到当前视图中：View -&gt; Tool Windows -&gt; Favorites，打开 Favorites 面板：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630114846598.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<blockquote>
<p>Favorites 面板中的 Bookmarks 就是我们添加的书签：</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630114913389.png" alt=""></p>
<blockquote>
<p>或者直接使用 Shift + F11，打开书签列表也可以</p>
</blockquote>
<h2 id="Ctrl-F11-（添加或删除带快捷键的书签）"><a href="#Ctrl-F11-（添加或删除带快捷键的书签）" class="headerlink" title="Ctrl + F11 （添加或删除带快捷键的书签）"></a>Ctrl + F11 （添加或删除带快捷键的书签）</h2><blockquote>
<p>会打开一个设置快捷键的面板，比如这里点击了 1，那么它的快捷键就是 Ctrl + 1。 注意不要选择面板提供的 26 个大写字母，因为这会与 idea 的其他快捷键冲突，不知道 idea 为什么要把它们放在这里？好奇怪</p>
</blockquote>
<p><img src="https://img-blog.csdnimg.cn/20200630115036382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<hr>
<p><strong>参考：</strong></p>
<ul>
<li><a href="https://juejin.im/post/5a90810b6fb9a063606eefe0" target="_blank" rel="noopener">IntelliJ IDEA 快捷键说明大全（中英对照、带图示详解）</a></li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>编辑器</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+NexT博客搭建</title>
    <url>/posts/63c4b34f.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img-blog.csdnimg.cn/20200712223249386.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<a id="more"></a>

<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><ol>
<li>简介</li>
</ol>
<ul>
<li>Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</li>
<li>详细内容请查看<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></li>
</ul>
<ol start="2">
<li>安装</li>
</ol>
<p>安装Hexo前，需先安装下列应用程序：</p>
<ul>
<li><a href="http://nodejs.org/" target="_blank" rel="noopener">Node.js</a> (Node.js 版本需不低于8.6，建议使用 Node.js 10.0 及以上版本)</li>
<li><a href="http://git-scm.com/" target="_blank" rel="noopener">Git</a></li>
</ul>
<p>安装完成之后，在Git Bash命令行输入下列命令即可自行下载安装hexo</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>


<h1 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h1><ol>
<li>安装Hexo完成后，执行下列命令，Hexo将会在指定文件夹中新建所需要的文件。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;folder&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;folder&gt;	</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure>

<p>新建完成后，指定文件夹的目录如下：</p>
<figure class="highlight sqf"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── <span class="variable">_config</span>.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── <span class="variable">_drafts</span></span><br><span class="line">|   └── <span class="variable">_posts</span></span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure>

<ul>
<li><p>hexo相关命令均在站点目录下，用Git Bash运行。</p>
</li>
<li><p>站点配置文件：站点目录下的<kbd>_config.yml</kbd>。路径为<kbd>&lt;folder>\_config.yml</kbd></p>
</li>
<li><p>主题配置文件：站点目录下的<kbd>themes</kbd>文件夹下的，主题文件夹下的<kbd>_config.yml</kbd>。路径为<kbd>&lt;folder>\themes\<主题文件夹>\_config.yml</kbd></p>
</li>
</ul>
<ol start="2">
<li>修改站点配置文件，以下信息都在站点配置文件中，具体内容根据用户自身情况修改。</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>网站标题</td>
</tr>
<tr>
<td>subtitle</td>
<td>网站副标题</td>
</tr>
<tr>
<td>description</td>
<td>网站描述</td>
</tr>
<tr>
<td>keywords</td>
<td>网站的关键词。使用半角逗号 , 分隔多个关键词。</td>
</tr>
<tr>
<td>author</td>
<td>您的名字</td>
</tr>
<tr>
<td>language</td>
<td>网站使用的语言，简体中文为 zh-CN</td>
</tr>
<tr>
<td>timezone</td>
<td>网站时区。Hexo 默认使用您电脑的时区。时区列表。比如说：America/New_York, Japan, 和 UTC 。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>url</td>
<td>网址</td>
<td></td>
</tr>
<tr>
<td>root</td>
<td>网站根目录</td>
<td></td>
</tr>
<tr>
<td>permalink</td>
<td>文章的 永久链接 格式</td>
<td>:year/:month/:day/:title/</td>
</tr>
<tr>
<td>permalink_defaults</td>
<td>永久链接中各部分的默认值</td>
<td></td>
</tr>
<tr>
<td>pretty_urls</td>
<td>改写 permalink 的值来美化 URL</td>
<td></td>
</tr>
<tr>
<td>pretty_urls.trailing_index</td>
<td>是否在永久链接中保留尾部的 index.html，设置为 false 时去除</td>
<td>true</td>
</tr>
</tbody></table>
<p>此外站点配置文件中的<kbd>new_post_name</kbd>参数是设置通过命令行的方式新建文章时该文章所对应.md文件的名字，例如你可以修改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="comment"># File name of new posts</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:year-:month-:day-:title.md</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>网站存放在子目录</strong></li>
</ul>
<p>如果您的网站存放在子目录中，例如 <a href="http://yoursite.com/blog，则请将您的" target="_blank" rel="noopener">http://yoursite.com/blog，则请将您的</a> url 设为 <a href="http://yoursite.com/blog" target="_blank" rel="noopener">http://yoursite.com/blog</a> 并把 root 设为/blog/。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 比如，一个页面的永久链接是 http://example.com/foo/bar/index.html</span></span><br><span class="line"><span class="attr">pretty_urls:</span></span><br><span class="line">	<span class="attr">trailing_index:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># 此时页面的永久链接会变为 http://example.com/foo/bar/</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>或简写为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo s</span><br></pre></td></tr></table></figure>


<ol start="4">
<li>浏览器访问网址： <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>，便可预览Hexo博客。</li>
</ol>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><ol>
<li><p>在你的GitHub账号里新建仓库， 仓库名为：&lt;Github账号名称&gt;.github.io，并添加SSH key。</p>
</li>
<li><p>修改<kbd>_config.yml</kbd>（在站点目录下）。文件末尾修改为：</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">	<span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">	<span class="attr">repo:</span>  <span class="string">https://github.com/&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git</span></span><br><span class="line">	<span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装<kbd>hexo-deployer-git</kbd>插件。在命令行（即Git Bash）运行以下命令即可：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>推送到GithubPages。在命令行（即Git Bash）依次输入以下命令， 返回INFO Deploy done: git即成功推送：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure>

<p>或输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure>

<p>或输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo d -g</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>等待1分钟左右，浏览器访问网址：https://&lt;Github账号名称&gt;.github.io</li>
</ol>
<h1 id="选择主题"><a href="#选择主题" class="headerlink" title="选择主题"></a>选择主题</h1><ul>
<li><p>Hexo默认的主题是landscape，选择自己喜欢的<a href="https://github.com/search?q=hexo-theme" target="_blank" rel="noopener">主题</a>并下载。</p>
</li>
<li><p>推荐使用Next，查看<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">官方使用文档，请点击这里</a></p>
</li>
</ul>
<h1 id="应用主题"><a href="#应用主题" class="headerlink" title="应用主题"></a>应用主题</h1><ol>
<li>将下载好的主题文件夹，粘贴到站点目录的themes下。</li>
<li>更改站点配置文件_config.yml 的theme字段，为主题文件夹的名称：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">&lt;主题文件夹的名称&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="主题优化"><a href="#主题优化" class="headerlink" title="主题优化"></a>主题优化</h1><p>以下均为 Next 7+ 版本的主题优化，Next主题配置文件中已经提供了很多功能，需要使用时只需稍微修改即可。</p>
<h2 id="设定站点建立时间"><a href="#设定站点建立时间" class="headerlink" title="设定站点建立时间"></a>设定站点建立时间</h2><ul>
<li>打开themes/next/下的_config.yml，查找since（默认为当前年份）：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">footer:</span></span><br><span class="line">  <span class="comment"># Specify the date when the site was setup.</span></span><br><span class="line">  <span class="comment"># If not defined, current year will be used.</span></span><br><span class="line">  <span class="comment">#since: 2019</span></span><br></pre></td></tr></table></figure>

<h2 id="设置主题风格"><a href="#设置主题风格" class="headerlink" title="设置主题风格"></a>设置主题风格</h2><ul>
<li>打开themes/next/下的_config.yml，查找Schemes，根据个人爱好选择不同的主题风格，将前面的注释“#”删除即可应用该风格。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment">#scheme: Muse</span></span><br><span class="line"><span class="comment">#scheme: Mist</span></span><br><span class="line"><span class="comment">#scheme: Pisces</span></span><br><span class="line"><span class="attr">scheme:</span> <span class="string">Gemini</span></span><br></pre></td></tr></table></figure>


<h2 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h2><ol>
<li>在站点配置文件中的highlight字段可以设置代码格式：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 是否显示行号</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 自动识别，不同类型的标识符显示不同颜色，设置为false时代码只有一种颜色</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">''</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>NexT 使用 Tomorrow Theme 作为代码高亮，共有5款主题供你选择。 NexT 默认使用的是 白色的 normal 主题，可选的值有 normal，night， night blue， night bright， night eighties，依次如下图所示：</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200211181703478.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<ul>
<li>更改主题配置文件中的 highlight_theme 字段，将其值设定成你所喜爱的高亮主题，<kbd>copy_button.style</kbd>字段可以设置代码块复制按钮的风格，例如：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">codeblock:</span></span><br><span class="line">  <span class="comment"># Code Highlight theme</span></span><br><span class="line">  <span class="comment"># Available value: normal | night | night eighties | night blue | night bright</span></span><br><span class="line">  <span class="comment"># https://github.com/chriskempson/tomorrow-theme</span></span><br><span class="line">  <span class="attr">highlight_theme:</span> <span class="string">night</span> <span class="string">eighties</span></span><br><span class="line">  <span class="comment"># Add copy button on codeblock</span></span><br><span class="line">  <span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span>                 <span class="comment"># 在每个代码块显示复制按钮</span></span><br><span class="line">    <span class="comment"># Show text copy result.</span></span><br><span class="line">    <span class="attr">show_result:</span> <span class="literal">true</span>            <span class="comment"># 复制成功后，显示提示信息</span></span><br><span class="line">    <span class="comment"># Available values: default | flat | mac</span></span><br><span class="line">    <span class="attr">style:</span> <span class="string">mac</span>                   <span class="comment"># 复制按钮风格</span></span><br></pre></td></tr></table></figure>


<h2 id="代码块Mac-Panel特效"><a href="#代码块Mac-Panel特效" class="headerlink" title="代码块Mac Panel特效"></a>代码块Mac Panel特效</h2><ol>
<li><p>在上述设置代码高亮主题中将<kbd>copy_button</kbd>设为 true，并将<kbd>style</kbd>设置为 mac；</p>
</li>
<li><p>打开F:\themes\next\source\css\_common\scaffolding\highlight\copy-code.styl文件，做如下修改，具体值可自行设定：</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">if (hexo-config('codeblock.copy_button.style') == 'mac') &#123;</span><br><span class="line">  <span class="selector-class">.highlight-wrap</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#21252b</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">    <span class="attribute">padding-top</span>: <span class="number">33px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">18px</span> <span class="number">18px</span> <span class="number">15px</span> <span class="number">0px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.4</span>);</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">35px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">margin-bottom</span>: <span class="number">28px</span>;</span><br><span class="line"></span><br><span class="line">    ::-webkit-scrollbar &#123;</span><br><span class="line">      <span class="selector-tag">height</span>: 10<span class="selector-tag">px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">::-webkit-scrollbar-track</span> &#123;  <span class="comment">/*滚动条框*/</span></span><br><span class="line">      <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.3</span>);</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-pseudo">::-webkit-scrollbar-thumb</span> &#123;  <span class="comment">/*滚动条里面小方块*/</span></span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">-webkit-box-shadow</span>: inset <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="built_in">rgba</span>(<span class="number">150</span>, <span class="number">150</span>, <span class="number">150</span>, <span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &amp;<span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">      <span class="attribute">background</span>: <span class="number">#fc625d</span>;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">#fdbc40</span>, <span class="number">40px</span> <span class="number">0</span> <span class="number">#35cd4b</span>;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">' '</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">12px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">16px</span>;</span><br><span class="line">      <span class="attribute">margin-top</span>: -<span class="number">22px</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">12px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*代码块圆角边框设置*/</span></span><br><span class="line">  <span class="selector-class">.highlight</span> &#123;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.table-container</span> &#123;</span><br><span class="line">    <span class="attribute">border-bottom-left-radius</span>: <span class="number">5px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="设置文本框圆角边框"><a href="#设置文本框圆角边框" class="headerlink" title="设置文本框圆角边框"></a>设置文本框圆角边框</h2><ul>
<li>在\themes\next\source\css\_variables目录下边，根据自己选择的主题风格打开相应的文件，修改相关参数即可：</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">// $border-radius-inner     = initial;</span><br><span class="line">// $border-radius           = initial;</span><br><span class="line">$border-radius-inner   = 15px;</span><br><span class="line">$border-radius         = 15px;</span><br></pre></td></tr></table></figure>


<h2 id="设置板块透明度"><a href="#设置板块透明度" class="headerlink" title="设置板块透明度"></a>设置板块透明度</h2><ol>
<li>打开themes\next\source\css\_schemes目录，根据自己选择的主题风格，进入相应的目录，分别打开相应版块的文件，修改background参数：</li>
</ol>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background: rgba(255,255,255,0.6);  //0.6是透明度，可自行修改</span><br></pre></td></tr></table></figure>


<h2 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h2><ul>
<li>打开themes/next/下的_config.yml，查找avatar</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.gif</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span>    <span class="comment"># 如果为true，则头像将显示为圆形。</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span>    <span class="comment"># 如果为true，则头像将随着光标旋转。</span></span><br></pre></td></tr></table></figure>

<h2 id="添加背景图片"><a href="#添加背景图片" class="headerlink" title="添加背景图片"></a>添加背景图片</h2><ol>
<li><p>将背景图片放在 themes/next/source/images 目录下；</p>
</li>
<li><p>在 themes/next/source/css/_schemes/ 目录下自己选择的主题下的 index.styl 文件中添加以下代码：</p>
</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//添加背景图片</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(../images/background.jpg);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//以下代码根据自己的情况添加</span><br><span class="line"></span><br><span class="line">//设置表格透明度</span><br><span class="line"><span class="selector-tag">table</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//设置标题字体大小</span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.6em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//设置按钮样式</span><br><span class="line"><span class="selector-class">.btn</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f4f4f4</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#555</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">0.9em</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边栏背景颜色及透明度</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//设置侧边栏目录字体大小</span><br><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">1.15em</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//回到顶部按钮边框及透明度</span><br><span class="line"><span class="selector-class">.back-to-top</span><span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="设置动画效果"><a href="#设置动画效果" class="headerlink" title="设置动画效果"></a>设置动画效果</h2><ul>
<li><p>NexT 默认开启动画效果，效果使用 JavaScript 编写，因此需要等待 JavaScript 脚本完全加载完毕后才会显示内容。 如果您比较在乎速度，可以将设置此字段的值为 false 来关闭动画。</p>
</li>
<li><p>编辑 主题配置文件， 搜索 use_motion，根据您的需求设置值为 true 或者 false 即可：</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">use_motion:</span> <span class="literal">true</span>  <span class="comment"># 开启动画效果</span></span><br><span class="line"><span class="attr">use_motion:</span> <span class="literal">false</span> <span class="comment"># 关闭动画效果</span></span><br></pre></td></tr></table></figure>

<h2 id="设置背景动画"><a href="#设置背景动画" class="headerlink" title="设置背景动画"></a>设置背景动画</h2><p>共有两种动画，其中three_waves 在版本 5.1.1 中引入。只能同时开启一种背景动画效果。</p>
<ul>
<li>第一种</li>
</ul>
<ol>
<li>下载插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-canvas-nest <span class="built_in">source</span>/lib/canvas-nest</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编辑主题配置文件，搜索 canvas_nest </li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">canvas_nest:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">onmobile:</span> <span class="literal">false</span> <span class="comment"># Display on mobile or not</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"0,0,255"</span> <span class="comment"># RGB values, use `,` to separate</span></span><br><span class="line">  <span class="attr">opacity:</span> <span class="number">0.6</span> <span class="comment"># The opacity of line: 0~1</span></span><br><span class="line">  <span class="attr">zIndex:</span> <span class="number">-1</span> <span class="comment"># z-index property of the background</span></span><br><span class="line">  <span class="attr">count:</span> <span class="number">99</span> <span class="comment"># The number of lines</span></span><br></pre></td></tr></table></figure>

<ul>
<li>第二种</li>
</ul>
<ol>
<li><p>进入theme/next目录</p>
</li>
<li><p>执行命令：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/theme-next/theme-next-three <span class="built_in">source</span>/lib/three</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将themes/next/_config.yml中查找three字段，将想要的效果改为true即可：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># three_waves</span></span><br><span class="line"><span class="attr">three_waves:</span> <span class="literal">false</span></span><br><span class="line"><span class="comment"># canvas_lines</span></span><br><span class="line"><span class="attr">canvas_lines:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># canvas_sphere</span></span><br><span class="line"><span class="attr">canvas_sphere:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


<h2 id="添加背景音乐"><a href="#添加背景音乐" class="headerlink" title="添加背景音乐"></a>添加背景音乐</h2><ol>
<li>修改 themes/next/layout/_macro/sidebar.swig 文件，在如下位置添加音乐播放器内容：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"site-overview-wrap sidebar-panel"</span>&gt;</span></span><br><span class="line">  &#123;&#123; partial('_partials/sidebar/site-overview.swig', &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line"></span><br><span class="line">  &#123;&#123;- next_inject('sidebar') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">	  </span><br><span class="line"><span class="comment">&lt;!--以下为新增内容--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  &#123;% if theme.background_music %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">iframe</span> <span class="attr">frameborder</span>=<span class="string">"no"</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">marginwidth</span>=<span class="string">"0"</span> <span class="attr">marginheight</span>=<span class="string">"0"</span> <span class="attr">width</span>=<span class="string">210</span> <span class="attr">height</span>=<span class="string">88</span>" <span class="attr">src</span>=<span class="string">"&#123;&#123; theme.background_music &#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ol start="2">
<li><p>注册网易云账号，新建歌单，添加音乐，获取歌单的外链；</p>
</li>
<li><p>将复制出的代码中src字段的内容加入themes/next/_config.yml 配置文件中，将height=90改成66，具体格式如下：</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">background_music:</span> <span class="string">//music.163.com/outchain/player?type=0&amp;id=4261269969&amp;auto=1&amp;height=66"</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>这样以后只需要修改网易云音乐的歌单，博客的背景音乐就会自动修改了。</p>
</li>
<li><p>如果出现音乐不自动播放，那是资源的问题，自己上网易云音乐生成外链的页面看看会不会自动播放。把坏资源删除就OK了。</p>
</li>
</ul>
<h2 id="设置鼠标点击特效"><a href="#设置鼠标点击特效" class="headerlink" title="设置鼠标点击特效"></a>设置鼠标点击特效</h2><ul>
<li>实现后效果如下：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200217135952784.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<ol>
<li>在主题配置文件_config.yml中添加动态配置项：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">cursor_effect:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">love</span>  <span class="comment"># fireworks：礼花 | explosion：爆炸 | love：浮出爱心 | text：浮出文字</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在文件/themes/next/layout/_custom/custom.swig中添加如下代码：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.cursor_effect %&#125;</span><br><span class="line">  &#123;% if theme.cursor_effect.type == "fireworks" %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/cursor/fireworks.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  &#123;% elseif theme.cursor_effect.type == "explosion" %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">canvas</span> <span class="attr">class</span>=<span class="string">"fireworks"</span> <span class="attr">style</span>=<span class="string">"position: fixed;left: 0;top: 0;z-index: 1; pointer-events: none;"</span> &gt;</span><span class="tag">&lt;/<span class="name">canvas</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn.bootcss.com/animejs/2.2.0/anime.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/cursor/explosion.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  &#123;% elseif theme.cursor_effect.type == "love" %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/cursor/love.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  &#123;% elseif theme.cursor_effect.type == "text" %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/js/cursor/text.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  &#123;% endif %&#125;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是第一次使用这个 custom.swig ，则需要在 /themes/next/layout/_layout.swig 中引入：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% include '_custom/custom.swig' %&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>将以下4个 JS 文件复制到目录 /themes/next/source/js/cursor/ 下：</li>
</ol>
<ul>
<li>fireworks.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(&#123; origin, speed, color, angle, context &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin</span><br><span class="line">    <span class="keyword">this</span>.position = &#123; ...this.origin &#125;</span><br><span class="line">    <span class="keyword">this</span>.color = color</span><br><span class="line">    <span class="keyword">this</span>.speed = speed</span><br><span class="line">    <span class="keyword">this</span>.angle = angle</span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.renderCount = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.fillStyle = <span class="keyword">this</span>.color</span><br><span class="line">    <span class="keyword">this</span>.context.beginPath()</span><br><span class="line">    <span class="keyword">this</span>.context.arc(<span class="keyword">this</span>.position.x, <span class="keyword">this</span>.position.y, <span class="number">2</span>, <span class="number">0</span>, <span class="built_in">Math</span>.PI * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">this</span>.context.fill()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    <span class="keyword">this</span>.position.x = (<span class="built_in">Math</span>.sin(<span class="keyword">this</span>.angle) * <span class="keyword">this</span>.speed) + <span class="keyword">this</span>.position.x</span><br><span class="line">    <span class="keyword">this</span>.position.y = (<span class="built_in">Math</span>.cos(<span class="keyword">this</span>.angle) * <span class="keyword">this</span>.speed) + <span class="keyword">this</span>.position.y + (<span class="keyword">this</span>.renderCount * <span class="number">0.3</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderCount++</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Boom</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span> (&#123; origin, context, circleCount = <span class="number">16</span>, area &#125;) &#123;</span><br><span class="line">    <span class="keyword">this</span>.origin = origin</span><br><span class="line">    <span class="keyword">this</span>.context = context</span><br><span class="line">    <span class="keyword">this</span>.circleCount = circleCount</span><br><span class="line">    <span class="keyword">this</span>.area = area</span><br><span class="line">    <span class="keyword">this</span>.stop = <span class="literal">false</span></span><br><span class="line">    <span class="keyword">this</span>.circles = []</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomArray(range) &#123;</span><br><span class="line">    <span class="keyword">const</span> length = range.length</span><br><span class="line">    <span class="keyword">const</span> randomIndex = <span class="built_in">Math</span>.floor(length * <span class="built_in">Math</span>.random())</span><br><span class="line">    <span class="keyword">return</span> range[randomIndex]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomColor() &#123;</span><br><span class="line">    <span class="keyword">const</span> range = [<span class="string">'8'</span>, <span class="string">'9'</span>, <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>]</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'#'</span> + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range) + <span class="keyword">this</span>.randomArray(range)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  randomRange(start, end) &#123;</span><br><span class="line">    <span class="keyword">return</span> (end - start) * <span class="built_in">Math</span>.random() + start</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.circleCount; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(&#123;</span><br><span class="line">        context: <span class="keyword">this</span>.context,</span><br><span class="line">        origin: <span class="keyword">this</span>.origin,</span><br><span class="line">        color: <span class="keyword">this</span>.randomColor(),</span><br><span class="line">        angle: <span class="keyword">this</span>.randomRange(<span class="built_in">Math</span>.PI - <span class="number">1</span>, <span class="built_in">Math</span>.PI + <span class="number">1</span>),</span><br><span class="line">        speed: <span class="keyword">this</span>.randomRange(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">this</span>.circles.push(circle)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  move() &#123;</span><br><span class="line">    <span class="keyword">this</span>.circles.forEach(<span class="function">(<span class="params">circle, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (circle.position.x &gt; <span class="keyword">this</span>.area.width || circle.position.y &gt; <span class="keyword">this</span>.area.height) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.circles.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      circle.move()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.circles.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">this</span>.stop = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  draw() &#123;</span><br><span class="line">    <span class="keyword">this</span>.circles.forEach(<span class="function"><span class="params">circle</span> =&gt;</span> circle.draw())</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CursorSpecialEffects</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">this</span>.computerCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderCanvas = <span class="built_in">document</span>.createElement(<span class="string">'canvas'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.computerContext = <span class="keyword">this</span>.computerCanvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line">    <span class="keyword">this</span>.renderContext = <span class="keyword">this</span>.renderCanvas.getContext(<span class="string">'2d'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.globalWidth = <span class="built_in">window</span>.innerWidth</span><br><span class="line">    <span class="keyword">this</span>.globalHeight = <span class="built_in">window</span>.innerHeight</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.booms = []</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handleMouseDown(e) &#123;</span><br><span class="line">    <span class="keyword">const</span> boom = <span class="keyword">new</span> Boom(&#123;</span><br><span class="line">      origin: &#123; <span class="attr">x</span>: e.clientX, <span class="attr">y</span>: e.clientY &#125;,</span><br><span class="line">      context: <span class="keyword">this</span>.computerContext,</span><br><span class="line">      area: &#123;</span><br><span class="line">        width: <span class="keyword">this</span>.globalWidth,</span><br><span class="line">        height: <span class="keyword">this</span>.globalHeight</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    boom.init()</span><br><span class="line">    <span class="keyword">this</span>.booms.push(boom)</span><br><span class="line">    <span class="keyword">this</span>.running || <span class="keyword">this</span>.run()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  handlePageHide() &#123;</span><br><span class="line">    <span class="keyword">this</span>.booms = []</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  init() &#123;</span><br><span class="line">    <span class="keyword">const</span> style = <span class="keyword">this</span>.renderCanvas.style</span><br><span class="line">    style.position = <span class="string">'fixed'</span></span><br><span class="line">    style.top = style.left = <span class="number">0</span></span><br><span class="line">    style.zIndex = <span class="string">'999999999999999999999999999999999999999999'</span></span><br><span class="line">    style.pointerEvents = <span class="string">'none'</span></span><br><span class="line"></span><br><span class="line">    style.width = <span class="keyword">this</span>.renderCanvas.width = <span class="keyword">this</span>.computerCanvas.width = <span class="keyword">this</span>.globalWidth</span><br><span class="line">    style.height = <span class="keyword">this</span>.renderCanvas.height = <span class="keyword">this</span>.computerCanvas.height = <span class="keyword">this</span>.globalHeight</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.body.append(<span class="keyword">this</span>.renderCanvas)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'mousedown'</span>, <span class="keyword">this</span>.handleMouseDown.bind(<span class="keyword">this</span>))</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">'pagehide'</span>, <span class="keyword">this</span>.handlePageHide.bind(<span class="keyword">this</span>))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  run() &#123;</span><br><span class="line">    <span class="keyword">this</span>.running = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.booms.length == <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.running = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    requestAnimationFrame(<span class="keyword">this</span>.run.bind(<span class="keyword">this</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.computerContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.globalWidth, <span class="keyword">this</span>.globalHeight)</span><br><span class="line">    <span class="keyword">this</span>.renderContext.clearRect(<span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.globalWidth, <span class="keyword">this</span>.globalHeight)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.booms.forEach(<span class="function">(<span class="params">boom, index</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (boom.stop) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.booms.splice(index, <span class="number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      boom.move()</span><br><span class="line">      boom.draw()</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">this</span>.renderContext.drawImage(<span class="keyword">this</span>.computerCanvas, <span class="number">0</span>, <span class="number">0</span>, <span class="keyword">this</span>.globalWidth, <span class="keyword">this</span>.globalHeight)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> cursorSpecialEffects = <span class="keyword">new</span> CursorSpecialEffects()</span><br><span class="line">cursorSpecialEffects.init()</span><br></pre></td></tr></table></figure>

<ul>
<li>explosion.min.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;<span class="string">"use strict"</span>;<span class="function"><span class="keyword">function</span> <span class="title">updateCoords</span>(<span class="params">e</span>)</span>&#123;pointerX=(e.clientX||e.touches[<span class="number">0</span>].clientX)-canvasEl.getBoundingClientRect().left,pointerY=e.clientY||e.touches[<span class="number">0</span>].clientY-canvasEl.getBoundingClientRect().top&#125;<span class="function"><span class="keyword">function</span> <span class="title">setParticuleDirection</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> t=anime.random(<span class="number">0</span>,<span class="number">360</span>)*<span class="built_in">Math</span>.PI/<span class="number">180</span>,a=anime.random(<span class="number">50</span>,<span class="number">180</span>),n=[<span class="number">-1</span>,<span class="number">1</span>][anime.random(<span class="number">0</span>,<span class="number">1</span>)]*a;<span class="keyword">return</span>&#123;<span class="attr">x</span>:e.x+n*<span class="built_in">Math</span>.cos(t),<span class="attr">y</span>:e.y+n*<span class="built_in">Math</span>.sin(t)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">createParticule</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=colors[anime.random(<span class="number">0</span>,colors.length<span class="number">-1</span>)],a.radius=anime.random(<span class="number">16</span>,<span class="number">32</span>),a.endPos=setParticuleDirection(a),a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.fillStyle=a.color,ctx.fill()&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a=&#123;&#125;;<span class="keyword">return</span> a.x=e,a.y=t,a.color=<span class="string">"#F00"</span>,a.radius=<span class="number">0.1</span>,a.alpha=<span class="number">0.5</span>,a.lineWidth=<span class="number">6</span>,a.draw=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.globalAlpha=a.alpha,ctx.beginPath(),ctx.arc(a.x,a.y,a.radius,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI,!<span class="number">0</span>),ctx.lineWidth=a.lineWidth,ctx.strokeStyle=a.color,ctx.stroke(),ctx.globalAlpha=<span class="number">1</span>&#125;,a&#125;<span class="function"><span class="keyword">function</span> <span class="title">renderParticule</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> t=<span class="number">0</span>;t&lt;e.animatables.length;t++)&#123;e.animatables[t].target.draw()&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">animateParticules</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> a=createCircle(e,t),n=[],i=<span class="number">0</span>;i&lt;numberOfParticules;i++)&#123;n.push(createParticule(e,t))&#125;anime.timeline().add(&#123;<span class="attr">targets</span>:n,<span class="attr">x</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.x&#125;,<span class="attr">y</span>:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">return</span> e.endPos.y&#125;,<span class="attr">radius</span>:<span class="number">0.1</span>,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule&#125;).add(&#123;<span class="attr">targets</span>:a,<span class="attr">radius</span>:anime.random(<span class="number">80</span>,<span class="number">160</span>),<span class="attr">lineWidth</span>:<span class="number">0</span>,<span class="attr">alpha</span>:&#123;<span class="attr">value</span>:<span class="number">0</span>,<span class="attr">easing</span>:<span class="string">"linear"</span>,<span class="attr">duration</span>:anime.random(<span class="number">600</span>,<span class="number">800</span>)&#125;,<span class="attr">duration</span>:anime.random(<span class="number">1200</span>,<span class="number">1800</span>),<span class="attr">easing</span>:<span class="string">"easeOutExpo"</span>,<span class="attr">update</span>:renderParticule,<span class="attr">offset</span>:<span class="number">0</span>&#125;)&#125;<span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">e,t</span>)</span>&#123;<span class="keyword">var</span> a;<span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> n=<span class="keyword">this</span>,i=<span class="built_in">arguments</span>;clearTimeout(a),a=setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;e.apply(n,i)&#125;,t)&#125;&#125;<span class="keyword">var</span> canvasEl=<span class="built_in">document</span>.querySelector(<span class="string">".fireworks"</span>);<span class="keyword">if</span>(canvasEl)&#123;<span class="keyword">var</span> ctx=canvasEl.getContext(<span class="string">"2d"</span>),numberOfParticules=<span class="number">30</span>,pointerX=<span class="number">0</span>,pointerY=<span class="number">0</span>,tap=<span class="string">"mousedown"</span>,colors=[<span class="string">"#FF1461"</span>,<span class="string">"#18FF92"</span>,<span class="string">"#5A87FF"</span>,<span class="string">"#FBF38C"</span>],setCanvasSize=debounce(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;canvasEl.width=<span class="number">2</span>*<span class="built_in">window</span>.innerWidth,canvasEl.height=<span class="number">2</span>*<span class="built_in">window</span>.innerHeight,canvasEl.style.width=<span class="built_in">window</span>.innerWidth+<span class="string">"px"</span>,canvasEl.style.height=<span class="built_in">window</span>.innerHeight+<span class="string">"px"</span>,canvasEl.getContext(<span class="string">"2d"</span>).scale(<span class="number">2</span>,<span class="number">2</span>)&#125;,<span class="number">500</span>),render=anime(&#123;<span class="attr">duration</span>:<span class="number">1</span>/<span class="number">0</span>,<span class="attr">update</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;ctx.clearRect(<span class="number">0</span>,<span class="number">0</span>,canvasEl.width,canvasEl.height)&#125;&#125;);<span class="built_in">document</span>.addEventListener(tap,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;<span class="string">"sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"toggle-sidebar"</span>!==e.target.id&amp;&amp;<span class="string">"A"</span>!==e.target.nodeName&amp;&amp;<span class="string">"IMG"</span>!==e.target.nodeName&amp;&amp;(render.play(),updateCoords(e),animateParticules(pointerX,pointerY))&#125;,!<span class="number">1</span>),setCanvasSize(),<span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>,setCanvasSize,!<span class="number">1</span>)&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>love.min.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params">e,t,a</span>)</span>&#123;<span class="function"><span class="keyword">function</span> <span class="title">n</span>(<span class="params"></span>)</span>&#123;c(<span class="string">".heart&#123;width: 10px;height: 10px;position: fixed;background: #f00;transform: rotate(45deg);-webkit-transform: rotate(45deg);-moz-transform: rotate(45deg);&#125;.heart:after,.heart:before&#123;content: '';width: inherit;height: inherit;background: inherit;border-radius: 50%;-webkit-border-radius: 50%;-moz-border-radius: 50%;position: fixed;&#125;.heart:after&#123;top: -5px;&#125;.heart:before&#123;left: -5px;&#125;"</span>),o(),r()&#125;<span class="function"><span class="keyword">function</span> <span class="title">r</span>(<span class="params"></span>)</span>&#123;<span class="keyword">for</span>(<span class="keyword">var</span> e=<span class="number">0</span>;e&lt;d.length;e++)d[e].alpha&lt;=<span class="number">0</span>?(t.body.removeChild(d[e].el),d.splice(e,<span class="number">1</span>)):(d[e].y--,d[e].scale+=<span class="number">.004</span>,d[e].alpha-=<span class="number">.013</span>,d[e].el.style.cssText=<span class="string">"left:"</span>+d[e].x+<span class="string">"px;top:"</span>+d[e].y+<span class="string">"px;opacity:"</span>+d[e].alpha+<span class="string">";transform:scale("</span>+d[e].scale+<span class="string">","</span>+d[e].scale+<span class="string">") rotate(45deg);background:"</span>+d[e].color+<span class="string">";z-index:99999"</span>);requestAnimationFrame(r)&#125;<span class="function"><span class="keyword">function</span> <span class="title">o</span>(<span class="params"></span>)</span>&#123;<span class="keyword">var</span> t=<span class="string">"function"</span>==<span class="keyword">typeof</span> e.onclick&amp;&amp;e.onclick;e.onclick=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;t&amp;&amp;t(),i(e)&#125;&#125;<span class="function"><span class="keyword">function</span> <span class="title">i</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"div"</span>);a.className=<span class="string">"heart"</span>,d.push(&#123;<span class="attr">el</span>:a,<span class="attr">x</span>:e.clientX<span class="number">-5</span>,<span class="attr">y</span>:e.clientY<span class="number">-5</span>,<span class="attr">scale</span>:<span class="number">1</span>,<span class="attr">alpha</span>:<span class="number">1</span>,<span class="attr">color</span>:s()&#125;),t.body.appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params">e</span>)</span>&#123;<span class="keyword">var</span> a=t.createElement(<span class="string">"style"</span>);a.type=<span class="string">"text/css"</span>;<span class="keyword">try</span>&#123;a.appendChild(t.createTextNode(e))&#125;<span class="keyword">catch</span>(t)&#123;a.styleSheet.cssText=e&#125;t.getElementsByTagName(<span class="string">"head"</span>)[<span class="number">0</span>].appendChild(a)&#125;<span class="function"><span class="keyword">function</span> <span class="title">s</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span><span class="string">"rgb("</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">","</span>+~~(<span class="number">255</span>*<span class="built_in">Math</span>.random())+<span class="string">")"</span>&#125;<span class="keyword">var</span> d=[];e.requestAnimationFrame=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="keyword">return</span> e.requestAnimationFrame||e.webkitRequestAnimationFrame||e.mozRequestAnimationFrame||e.oRequestAnimationFrame||e.msRequestAnimationFrame||<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;setTimeout(e,<span class="number">1e3</span>/<span class="number">60</span>)&#125;&#125;(),n()&#125;(<span class="built_in">window</span>,<span class="built_in">document</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>text.js</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a_idx = <span class="number">0</span>;</span><br><span class="line">jQuery(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>) </span>&#123;</span><br><span class="line">  $(<span class="string">"body"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"富强"</span>, <span class="string">"民主"</span>, <span class="string">"文明"</span>, <span class="string">"和谐"</span>, <span class="string">"自由"</span>, <span class="string">"平等"</span>, <span class="string">"公正"</span> ,<span class="string">"法治"</span>, <span class="string">"爱国"</span>, <span class="string">"敬业"</span>, <span class="string">"诚信"</span>, <span class="string">"友善"</span>);</span><br><span class="line">    <span class="keyword">var</span> $i = $(<span class="string">"&lt;span/&gt;"</span>).text(a[a_idx]);</span><br><span class="line">    <span class="keyword">var</span> x = e.pageX,</span><br><span class="line">      y = e.pageY;</span><br><span class="line">    $i.css(&#123;</span><br><span class="line">      <span class="string">"z-index"</span>: <span class="number">99999</span>,</span><br><span class="line">      <span class="string">"top"</span>: y - <span class="number">28</span>,</span><br><span class="line">      <span class="string">"left"</span>: x - a[a_idx].length * <span class="number">8</span>,</span><br><span class="line">      <span class="string">"position"</span>: <span class="string">"absolute"</span>,</span><br><span class="line">      <span class="string">"color"</span>: <span class="string">"#ff7a45"</span></span><br><span class="line">    &#125;);</span><br><span class="line">    $(<span class="string">"body"</span>).append($i);</span><br><span class="line">    $i.animate(&#123;</span><br><span class="line">      <span class="string">"top"</span>: y - <span class="number">180</span>,</span><br><span class="line">      <span class="string">"opacity"</span>: <span class="number">0</span></span><br><span class="line">    &#125;, <span class="number">1500</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      $i.remove();</span><br><span class="line">    &#125;);</span><br><span class="line">    a_idx = (a_idx + <span class="number">1</span>) % a.length;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="修改中文字体"><a href="#修改中文字体" class="headerlink" title="修改中文字体"></a>修改中文字体</h2><ol>
<li>前往 <a href="https://fonts.google.com/" target="_blank" rel="noopener">Google Fonts</a> 查看合适的字体</li>
<li>打开 themes/next/ 下的 _config.yml，查找 font</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">	<span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">	 <span class="comment"># Uri of fonts host. E.g. //fonts.googleapis.com (Default). 修改为墙内镜像</span></span><br><span class="line">	<span class="attr">host:</span> <span class="string">https://fonts.loli.net</span></span><br><span class="line">	<span class="attr">global:</span></span><br><span class="line">		<span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">		<span class="attr">family:</span> <span class="string">Noto</span> <span class="string">Serif</span> <span class="string">SC</span> <span class="string">//</span> <span class="string">挑选的字体</span></span><br><span class="line">		<span class="attr">size:</span> <span class="number">16</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改 /themes/next/source/css/_variables/base.styl</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$font-family-monospace</span>    <span class="string">=</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">$font-family-chinese,</span> <span class="string">monospace</span></span><br><span class="line"><span class="string">$font-family-monospace</span>    <span class="string">=</span> <span class="string">get_font_family('codes'),</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">$font-family-chinese,</span> <span class="string">monospace</span> <span class="string">if</span> <span class="string">get_font_family('codes')</span></span><br></pre></td></tr></table></figure>

<p>将以上代码修改为：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$font-family-monospace</span>    <span class="string">=</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">$font-family-base,</span> <span class="string">monospace</span></span><br><span class="line"><span class="string">$font-family-monospace</span>    <span class="string">=</span> <span class="string">get_font_family('codes'),</span> <span class="string">consolas,</span> <span class="string">Menlo,</span> <span class="string">$font-family-base,</span> <span class="string">monospace</span> <span class="string">if</span> <span class="string">get_font_family('codes')</span></span><br></pre></td></tr></table></figure>

<h2 id="修改字体大小"><a href="#修改字体大小" class="headerlink" title="修改字体大小"></a>修改字体大小</h2><ul>
<li>在themes/next/_config.yml中搜索Font，可以修改。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">font:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 外链字体库地址，例如 //fonts.googleapis.com (默认值)</span></span><br><span class="line">  <span class="attr">host:</span></span><br><span class="line">  <span class="comment"># 全局字体，应用在 body 元素上</span></span><br><span class="line">  <span class="attr">global:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Monda</span></span><br><span class="line">  <span class="comment"># 标题字体 (h1, h2, h3, h4, h5, h6)</span></span><br><span class="line">  <span class="attr">headings:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Roboto</span> <span class="string">Slab</span></span><br><span class="line">  <span class="comment"># 文章字体</span></span><br><span class="line">  <span class="attr">posts:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span></span><br><span class="line">  <span class="comment"># Logo 字体</span></span><br><span class="line">  <span class="attr">logo:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">Lobster</span> <span class="string">Two</span></span><br><span class="line">    <span class="attr">size:</span> <span class="number">24</span></span><br><span class="line">  <span class="comment"># 代码字体，应用于 code 以及代码块</span></span><br><span class="line">  <span class="attr">codes:</span></span><br><span class="line">    <span class="attr">external:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">family:</span> <span class="string">PT</span> <span class="string">Mono</span></span><br></pre></td></tr></table></figure>

<ul>
<li>上述方法不太理想，还可以在themes\next\source\css\_variables\base.styl中修改。</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">// Font size</span><br><span class="line">$font-size-base           = (hexo-config('font.enable') and hexo-config('font.global.size') is a 'unit') ? unit(hexo-config('font.global.size'), em) : .75em;  //整体大小</span><br><span class="line">$font-size-smallest       = .7em;         //首页阅读时长等</span><br><span class="line">$font-size-smaller        = 1.05em;       //侧边栏（归档等）</span><br><span class="line">$font-size-small          = .925em;       //侧边栏目录、阅读全文按钮、文中表格及代码块</span><br><span class="line">$font-size-medium         = 1em;          //头像下边日志、分类、标签</span><br><span class="line">$font-size-large          = 1.25em;       //首页文章标题及文章内容</span><br><span class="line">$font-size-larger         = 1.25em;</span><br><span class="line">$font-size-largest        = 2em;          //用户名</span><br></pre></td></tr></table></figure>


<h2 id="设置菜单及页面"><a href="#设置菜单及页面" class="headerlink" title="设置菜单及页面"></a>设置菜单及页面</h2><ul>
<li>打开themes/next/下的_config.yml，查找menu，去掉#注释即可显示对应的菜单项，也可自定义新的菜单项。 ||之前的值是目标链接，之后的是分类页面的图标，图标名称来自于FontAwesome icon。若没有配置图标，默认会使用问号图标。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">/</span> <span class="string">||</span> <span class="string">home</span></span><br><span class="line">  <span class="comment">#about: /about/ || user</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">/tags/</span> <span class="string">||</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">/categories/</span> <span class="string">||</span> <span class="string">th</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">/archives/</span> <span class="string">||</span> <span class="string">archive</span></span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br><span class="line">  <span class="comment">#commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>

<ul>
<li>新添加的菜单需要翻译对应的中文，打开hexo/theme/next/languages/zh-CN.yml，在menu下自定义，如：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">download:</span> <span class="string">下载</span></span><br></pre></td></tr></table></figure>

<h2 id="创建分类页"><a href="#创建分类页" class="headerlink" title="创建分类页"></a>创建分类页</h2><ol>
<li><p>将主题配置文件中menu下方categories前的注释去掉。</p>
</li>
<li><p>在终端窗口下，定位到 Hexo 站点目录下，新建：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;站点目录&gt;</span><br><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>

<p>此时在根目录的source文件夹下会生成一个categories文件，文件中有一个index.md文件，修改内容如下：</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2017-12-14 13:05:38</span><br><span class="line">type: "categories"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>注：如果有启用评论，默认页面带有评论。需要关闭的话，添加字段comments并将值设置为false。</p>
<h2 id="创建标签页"><a href="#创建标签页" class="headerlink" title="创建标签页"></a>创建标签页</h2><ol>
<li><p>将主题配置文件中menu下方tags前的注释去掉。</p>
</li>
<li><p>在终端窗口下，定位到 Hexo 站点目录下，新建：</p>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> &lt;站点目录&gt;</span><br><span class="line">$ hexo new page tags</span><br></pre></td></tr></table></figure>

<ul>
<li>启用/关闭评论同创建分类页。</li>
</ul>
<ol start="3">
<li>一篇文章有多个标签时按下面的格式填写：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签测试文章</span><br><span class="line">tags:</span><br><span class="line"><span class="bullet">  - </span>Testing</span><br><span class="line"><span class="bullet">  - </span>Another Tag</span><br><span class="line">---</span><br></pre></td></tr></table></figure>


<h2 id="设置侧边栏"><a href="#设置侧边栏" class="headerlink" title="设置侧边栏"></a>设置侧边栏</h2><ul>
<li>设置显示位置：打开themes/next/下的_config.yml，查找sidebar</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">sidebar:</span></span><br><span class="line"><span class="attr">position:</span> <span class="string">left</span></span><br><span class="line"><span class="comment">#position: right</span></span><br></pre></td></tr></table></figure>

<ul>
<li>设置显示时机：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#post - 默认行为，在文章页面（拥有目录列表）时显示</span></span><br><span class="line"><span class="comment">#always - 在所有页面中都显示</span></span><br><span class="line"><span class="comment">#hide - 在所有页面中都隐藏（可以手动展开）</span></span><br><span class="line"><span class="comment">#remove - 完全移除</span></span><br><span class="line"><span class="attr">display:</span> <span class="string">post</span></span><br><span class="line"><span class="comment">#display: always</span></span><br><span class="line"><span class="comment">#display: hide</span></span><br><span class="line"><span class="comment">#display: remove</span></span><br></pre></td></tr></table></figure>


<h2 id="侧边栏目录"><a href="#侧边栏目录" class="headerlink" title="侧边栏目录"></a>侧边栏目录</h2><ul>
<li>修改主题配置文件中的toc字段即可：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Table of Contents in the Sidebar</span></span><br><span class="line"><span class="attr">toc:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Automatically add list number to toc.</span></span><br><span class="line">  <span class="attr">number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span>          <span class="comment"># 如果为true，则如果标题宽度长于边栏宽度，则将剩余标题内容放置在下一行。</span></span><br><span class="line">  <span class="attr">expand_all:</span> <span class="literal">false</span>   <span class="comment"># 如果为true，则将显示帖子中所有级别的目录，而不是帖子中已激活的部分。</span></span><br><span class="line">  <span class="comment"># Maximum heading depth of generated toc. You can set it in one post through `toc_max_depth` in Front-matter.</span></span><br><span class="line">  <span class="attr">max_depth:</span> <span class="number">6</span></span><br></pre></td></tr></table></figure>


<h2 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h2><ol>
<li>链接放置在主题配置文件中的 social 字段下，一行一个链接。其键值格式是 显示文本: 链接地址。</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social links</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/your-user-name</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">https://twitter.com/your-user-name</span></span><br><span class="line">  <span class="string">微博:</span> <span class="string">http://weibo.com/your-user-name</span></span><br><span class="line">  <span class="string">豆瓣:</span> <span class="string">http://douban.com/people/your-user-name</span></span><br><span class="line">  <span class="string">知乎:</span> <span class="string">http://www.zhihu.com/people/your-user-name</span></span><br><span class="line">  <span class="comment"># 等等</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设定链接的图标，对应的字段是 social_icons。其键值格式是 匹配键: Font Awesome 图标名称， 匹配键 与上一步所配置的链接的 显示文本 相同（大小写严格匹配），图标名称 是 Font Awesome 图标的名字（不必带 fa- 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标。</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Social Icons</span></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Icon Mappings</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">github</span></span><br><span class="line">  <span class="attr">Twitter:</span> <span class="string">twitter</span></span><br><span class="line">  <span class="string">微博:</span> <span class="string">weibo</span></span><br></pre></td></tr></table></figure>


<h2 id="侧边栏友情链接"><a href="#侧边栏友情链接" class="headerlink" title="侧边栏友情链接"></a>侧边栏友情链接</h2><ul>
<li>修改主题配置文件中的link字段即可：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># title</span></span><br><span class="line"><span class="attr">links_title:</span> <span class="string">Links</span></span><br><span class="line"><span class="attr">links:</span></span><br><span class="line">  <span class="attr">MacTalk:</span> <span class="string">http://macshuo.com/</span></span><br><span class="line">  <span class="attr">Title:</span> <span class="string">http://example.com/</span></span><br></pre></td></tr></table></figure>


<h2 id="腾讯公益404页面"><a href="#腾讯公益404页面" class="headerlink" title="腾讯公益404页面"></a>腾讯公益404页面</h2><ul>
<li><p>腾讯公益404页面，寻找丢失儿童，让大家一起关注此项公益事业！效果如下 <a href="http://www.ixirong.com/404.html" target="_blank" rel="noopener">http://www.ixirong.com/404.html</a></p>
</li>
<li><p>使用方法，新建 404.html 页面，放到主题的 source 目录下，内容如下：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">HTML</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html;charset=utf-8;"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge,chrome=1"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"all"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"robots"</span> <span class="attr">content</span>=<span class="string">"index,follow"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"https://qzone.qq.com/gy/404/style/404style.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/plain"</span> <span class="attr">src</span>=<span class="string">"http://www.qq.com/404/search_children.js"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">charset</span>=<span class="string">"utf-8"</span> <span class="attr">homePageUrl</span>=<span class="string">"/"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">homePageName</span>=<span class="string">"回到我的主页"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/data.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://qzone.qq.com/gy/404/page.js"</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="生成唯一文章链接"><a href="#生成唯一文章链接" class="headerlink" title="生成唯一文章链接"></a>生成唯一文章链接</h2><ol>
<li>首先需要安装一个插件，用于根据帖子标题生成静态帖子链接，博客站点下执行下面命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure>

<ul>
<li>执行此命令可能会不成功，提示你缺少相应的依赖，比如babel-eslint、mini-css-extract-plugin、webpack-cli…<br>使用npm命令安装即可，比如 npm install <a href="mailto:eslint@4.x">eslint@4.x</a> babel-eslint@8 –save-dev</li>
</ul>
<ol start="2">
<li>修改站点配置文件 config.yml 文件中的永久链接：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">posts/:abbrlink.html</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在 permalink 下面写入下面的内容：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span>  <span class="comment"># 算法：crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span>    <span class="comment"># 进制：dec(default) and hex</span></span><br></pre></td></tr></table></figure>


<h2 id="回到顶部按钮"><a href="#回到顶部按钮" class="headerlink" title="回到顶部按钮"></a>回到顶部按钮</h2><ul>
<li>在themes/*/_config.yml中搜索back2top，将enable属性的false改为true即可：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<h2 id="阅读进度条"><a href="#阅读进度条" class="headerlink" title="阅读进度条"></a>阅读进度条</h2><ul>
<li>在themes/*/_config.yml中搜索reading_progress，修改相关信息：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span>        <span class="comment"># 进度条在页面中显示的位置：顶部/底部</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#37c6c0"</span>     <span class="comment"># 进度条颜色</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span>          <span class="comment"># 进度条宽度</span></span><br></pre></td></tr></table></figure>


<h2 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h2><ol>
<li>安装 hexo-generator-searchdb，在站点的根目录下执行以下命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>编辑站点配置文件，新增以下内容到任意位置（7.5+版本不加也可以）：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># see https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="comment"># file path. By default is search.xml . If the file extension is .json, the output format will be JSON. Otherwise XML format file will be exported.</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="comment">#  the search scope you want to search, you can chose:</span></span><br><span class="line">  <span class="comment">#    post (Default) - will only covers all the posts of your blog.</span></span><br><span class="line">  <span class="comment">#    page - will only covers all the pages of your blog.</span></span><br><span class="line">  <span class="comment">#    all - will covers all the posts and pages of your blog.</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="comment"># the form of the page contents, works with xml mode, options are:</span></span><br><span class="line">  <span class="comment">#    html (Default) - original html string being minified.</span></span><br><span class="line">  <span class="comment">#    raw - markdown text of each posts or pages.</span></span><br><span class="line">  <span class="comment">#    excerpt - only collect excerpt.</span></span><br><span class="line">  <span class="comment">#    more - act as you think.</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br><span class="line">  <span class="comment">#define the maximum number of posts being indexed, always prefer the newest.</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">10000</span></span><br><span class="line">  <span class="comment"># whether contains the whole content of each article. If false, the generated results only cover title and other meta info without mainbody. By default is true.</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>编辑 主题配置文件，启用本地搜索功能：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local search</span></span><br><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>


<h2 id="博文置顶"><a href="#博文置顶" class="headerlink" title="博文置顶"></a>博文置顶</h2><ol>
<li>安装插件</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后在需要置顶的文章的Front-matter中加上top（正数）即可，top值越大的越靠前显示。</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">title: 2018</span><br><span class="line">date: 2018-10-25 16:10:03</span><br><span class="line">top: 10</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>设置置顶标志，打开：/themes/*/layout/_macro/post.swig，定位到&lt;div class=”post-meta”&gt;标签下，插入以下代码即可：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-thumb-tack"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">green</span>&gt;</span>置顶<span class="tag">&lt;/<span class="name">font</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"post-meta-divider"</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>


<h2 id="自定义样式博文加密"><a href="#自定义样式博文加密" class="headerlink" title="自定义样式博文加密"></a>自定义样式博文加密</h2><ol>
<li>在目录 /themes/next/layout/ 下的 _layout.swig 中，找到main标签添加如下代码：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">"main"</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main-inner"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content-wrap"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"content"</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        &#123;% block content %&#125;&#123;% endblock %&#125;</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      &#123;% include '_third-party/duoshuo-hot-articles.swig' %&#125;</span><br><span class="line">      &#123;% include '_partials/comments.swig' %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;% if theme.sidebar.display !== 'remove' %&#125;</span><br><span class="line">      &#123;% block sidebar %&#125;&#123;% endblock %&#125;</span><br><span class="line">    &#123;% endif %&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">&lt;!-- 此处为新加的代码 --&gt;</span></span><br><span class="line"> &#123;% include 'password.swig' %&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在目录 /themes/next/layout/ 下创建 password.swig ，内容如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.staticfile.org/jquery/3.1.1/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//暂时储存文章中的内容</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> div = $(<span class="string">'.post-body'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//暂时储存目录的内容</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> toc=$(<span class="string">'.post-toc'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">password</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span>(<span class="string">'&#123;&#123; page.password &#125;&#125;'</span>)&#123;</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//将文章内容删除</span></span></span><br><span class="line">            div.remove();</span><br><span class="line"><span class="actionscript">            <span class="comment">//将目录删除</span></span></span><br><span class="line">            toc.remove();</span><br><span class="line"><span class="actionscript">            <span class="comment">//将文章删除后，向原来文章的地方添加，应该出现的提示用户输入密码的样式</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//下面这里的第一个用textarea是因为如果在手机端的时候只能显示一部分文字，</span></span></span><br><span class="line"><span class="actionscript">            <span class="comment">//只是拓展:input里面的字只能显示一行，不会自动换行，目前上网搜索没有发现好的办法，所以用了textarea，右下角的小三角通过resize:none 去掉。</span></span></span><br><span class="line"><span class="javascript">            $(<span class="string">'.post-header'</span>).after(</span></span><br><span class="line"><span class="handlebars"><span class="xml">            '<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"description"</span> <span class="attr">value</span>=<span class="string">"请输入密码，然后按 Enter 键阅读"</span> <span class="attr">style</span>=<span class="string">"font-style: oblique;font-weight: bold;border: none;display: block;'+</span></span></span></span></span><br><span class="line"><span class="actionscript">            <span class="string">'width: 60%;margin: 0 auto;text-align: center;outline: none;margin-bottom: 40px;resize:none "&gt;'</span>+</span></span><br><span class="line"><span class="handlebars"><span class="xml">            '<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heartbeat"</span> <span class="attr">id</span>=<span class="string">"myheartbeat"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>'+</span></span></span><br><span class="line"><span class="actionscript">            <span class="string">' 请输入密码，按回车键进入 '</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">            '<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fa fa-heartbeat"</span> <span class="attr">id</span>=<span class="string">"myheartbeat"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>'+</span></span></span><br><span class="line"><span class="actionscript">            <span class="string">'&lt;/span&gt;'</span> +</span></span><br><span class="line"><span class="handlebars"><span class="xml">            '<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"qiang"</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 60%;margin:0 auto"</span>&gt;</span>' +</span></span></span><br><span class="line"><span class="handlebars"><span class="xml">            '<span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"password"</span>  <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">autocomplete</span>=<span class="string">"new-password"</span> <span class="attr">autofocus</span>=<span class="string">"autofocus"</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"border-radius: 5px;height: 30px;border: none;display: block;border-bottom: 1px solid #ccc;' +</span></span></span></span></span><br><span class="line"><span class="actionscript">            <span class="string">'margin: 0 auto;outline: none;width:95%"/&gt;'</span> +</span></span><br><span class="line"><span class="actionscript">            <span class="string">'&lt;/div&gt;'</span>)</span></span><br><span class="line"><span class="actionscript">            <span class="comment">//绑定点击事件，如果是点击的.password 这个div就改变样式，如果是document中除了div之外的其他任何元素，就变回原来的样式。</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.onclick = <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> e = event || <span class="built_in">window</span>.event;</span></span><br><span class="line"><span class="actionscript">                <span class="keyword">var</span> elem = e.srcElement || e.target;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                <span class="keyword">while</span> (elem) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (elem != <span class="built_in">document</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">if</span> (elem.className == <span class="string">"password"</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                            <span class="comment">//$(".password").animate(&#123;paddingTop:"30px",width:"100%",borderWidth:"2px"&#125;,300)</span></span></span><br><span class="line"><span class="actionscript">                            <span class="keyword">return</span>;</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        elem = elem.parentNode;</span><br><span class="line"><span class="actionscript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//$(".password").animate(&#123;paddingTop:"0px",width:"95%",borderWidth:"1px"&#125;,300)</span></span></span><br><span class="line"><span class="actionscript">                        <span class="keyword">return</span>;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"><span class="actionscript">            <span class="comment">//绑定enter键按下后离开的事件</span></span></span><br><span class="line"><span class="javascript">            $(<span class="built_in">document</span>).keyup(<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(event.keyCode ==<span class="number">13</span>&amp;&amp;$(<span class="string">'.password'</span>).length&gt;<span class="number">0</span>)&#123;</span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//console.log($('.password').val())</span></span></span><br><span class="line"><span class="actionscript">                    <span class="comment">//console.log('&#123;&#123; page.password &#125;&#125;')</span></span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> ($(<span class="string">'.password'</span>).val() == <span class="string">'&#123;&#123; page.password &#125;&#125;'</span>) &#123;</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//恢复文章内容</span></span></span><br><span class="line"><span class="javascript">                        (div).appendTo($(<span class="string">".post-header"</span>))</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//恢复目录</span></span></span><br><span class="line"><span class="javascript">                        toc.appendTo($(<span class="string">".sidebar-inner"</span>))</span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//删除本页面的输入密码组件</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">".description"</span>).remove();</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">".qiang"</span>).remove();</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">".password"</span>).remove();</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">                        <span class="comment">//重新处理pjax事件,如果没有加pjax的从下面这行起到下面的else之间的代码需要去掉。</span></span></span><br><span class="line"><span class="actionscript">                        <span class="comment">//图片懒加载，没有加入此功能的这个函数需要去掉</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">'img'</span>).lazyload(&#123;</span></span><br><span class="line"><span class="actionscript">                            placeholder: <span class="string">'/images/loading.gif'</span>,</span></span><br><span class="line"><span class="actionscript">                            effect: <span class="string">'fadeIn'</span>,</span></span><br><span class="line">                            threshold : 100,</span><br><span class="line">                            failure_limit : 20,</span><br><span class="line"><span class="actionscript">                            skip_invisible : <span class="literal">false</span></span></span><br><span class="line">                        &#125;);</span><br><span class="line"><span class="actionscript">                        <span class="comment">//pjax后出现文章不显示，没有pjax的下面四行需要去掉</span></span></span><br><span class="line"><span class="javascript">                        $(<span class="string">".post-block"</span>).css(&#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">".post-header"</span>).css(&#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">".post-body"</span>).css(&#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;);</span></span><br><span class="line"><span class="javascript">                        $(<span class="string">".pagination"</span>).css(&#123;<span class="attr">opacity</span>:<span class="number">1</span>&#125;);</span></span><br><span class="line"><span class="actionscript">                    &#125;<span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript">                        alert(<span class="string">"对不起，密码输入错误。"</span>)</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"><span class="actionscript">                <span class="comment">//将document的keyup移除，防止在pjax的情况下会重复绑定事件</span></span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    password();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>使用方法：在文章开头加上password字段并设置密码即可，如下所示：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 测试</span><br><span class="line">date: 2019-03-30 21:18:02</span><br><span class="line">password: aaa</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<ul>
<li>实现效果如下图所示：</li>
</ul>
<p><img src="https://img-blog.csdnimg.cn/20200218172648375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<ul>
<li>注意：如果自己的博客源码中的这篇文章上传到 github ，密码也就公诸于世了，可以在 push 到 github 的时候将这篇文章忽略。</li>
</ul>
<h2 id="首页显示文章摘要"><a href="#首页显示文章摘要" class="headerlink" title="首页显示文章摘要"></a>首页显示文章摘要</h2><ul>
<li>打开themes/next/下的_config.yml，查找excerpt</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">auto_excerpt:</span>    <span class="comment"># 自动摘录</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">length:</span> <span class="number">150</span>    <span class="comment"># 摘录字数</span></span><br></pre></td></tr></table></figure>


<h2 id="添加书签"><a href="#添加书签" class="headerlink" title="添加书签"></a>添加书签</h2><ul>
<li>在themes/next/下的_config.yml文件中搜索bookmark，修改相关信息：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Bookmark Support</span></span><br><span class="line"><span class="attr">bookmark:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 书签颜色</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">"#222"</span></span><br><span class="line">  <span class="comment"># 如果为auto，请在关闭页面或单击书签图标时保存阅读进度。</span></span><br><span class="line">  <span class="comment"># 如果为manual，则只能通过单击书签图标进行保存。</span></span><br><span class="line">  <span class="attr">save:</span> <span class="string">auto</span></span><br></pre></td></tr></table></figure>


<h2 id="阅读更多按钮"><a href="#阅读更多按钮" class="headerlink" title="阅读更多按钮"></a>阅读更多按钮</h2><ul>
<li>打开themes/next/下的_config.yml，查找read_more_btn：</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">read_more_btn:</span> <span class="literal">true</span> <span class="string">//显示全文按钮</span></span><br></pre></td></tr></table></figure>

<ul>
<li>在文章中添加<strong>&lt;!–more–&gt;</strong>，其后面的内容在主页将不显示。</li>
</ul>
<h2 id="设置图片可放大"><a href="#设置图片可放大" class="headerlink" title="设置图片可放大"></a>设置图片可放大</h2><ol>
<li><p>打开站点配置文件_config.yml，搜索fancybox字段，设置其值为true</p>
</li>
<li><p>进入到theme/text/文件夹下，打开git bash</p>
</li>
<li><p>git clone <a href="https://github.com/theme-next/theme-next-fancybox3" target="_blank" rel="noopener">https://github.com/theme-next/theme-next-fancybox3</a> source/lib/fancybox</p>
<p> 注：Next 7.5及以上版本不必下载。</p>
</li>
</ol>
<h2 id="添加评论系统-Valine"><a href="#添加评论系统-Valine" class="headerlink" title="添加评论系统-Valine"></a>添加评论系统-Valine</h2><ol>
<li><p>我们的评论系统其实是放在Leancloud上的，因此首先需要去注册一个<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>账号</p>
</li>
<li><p>创建一个应用，名字可以随便起，然后进入应用-&gt;设置-&gt;应用key，获取appid和appkey</p>
</li>
<li><p>打开主题配置文件，搜索valine，填入appid和appkey：</p>
</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span>  <span class="string">&lt;your</span> <span class="string">app</span> <span class="string">id&gt;</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="string">&lt;your</span> <span class="string">app</span> <span class="string">key&gt;</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># mail notifier , https://github.com/xCss/Valine/wiki</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">快来输入你的评论吧......</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>在Leancloud -&gt; 设置 -&gt; 安全中心 -&gt; Web 安全域名 把你的域名加进去。</li>
</ol>
<h2 id="添加阅读量统计"><a href="#添加阅读量统计" class="headerlink" title="添加阅读量统计"></a>添加阅读量统计</h2><ol>
<li>next自带的busuanzi统计，在themes/next/_config.yml中修改相关参数即可。</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">false</span>       <span class="comment"># 站点总访问量</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">user</span>   <span class="comment"># 站点总访问量的小图标</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">false</span>          <span class="comment"># 总浏览量（所有页面的总浏览量）</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">eye</span>       <span class="comment"># 总浏览量的小图标</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span>            <span class="comment"># 文章浏览量</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">eye</span>        <span class="comment"># 文章浏览量的小图标</span></span><br></pre></td></tr></table></figure>

<ul>
<li>注：开启busuanzi之后，阅读量统计只在文章页面显示，在首页只显示文章摘要的时候不会显示，而且也无法管理阅读量的统计，因此建议采用第二种方法。</li>
</ul>
<ol start="2">
<li>Leancloud</li>
</ol>
<ul>
<li><p>同添加评论功能一样，在<a href="https://www.leancloud.cn/" target="_blank" rel="noopener">Leancloud</a>账号中新建一个应用；</p>
</li>
<li><p>在新创建的应用中的存储模块下新建一个名为“Counter”的Class，名称必须为“Counter”；</p>
</li>
<li><p>在创建的新应用中进入应用-&gt;设置-&gt;应用key，获取appid和appkey；</p>
</li>
<li><p>打开主题配置文件，搜索leancloud_visitors，填入app_id和app_key：</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">leancloud_visitors:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">app_id:</span> <span class="comment"># &lt;app_id&gt;</span></span><br><span class="line">  <span class="attr">app_key:</span> <span class="comment"># &lt;app_key&gt;</span></span><br><span class="line">  <span class="comment"># Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line">  <span class="comment"># If you don't care about security in leancloud counter and just want to use it directly</span></span><br><span class="line">  <span class="comment"># (without hexo-leancloud-counter-security plugin), set `security` to `false`.</span></span><br><span class="line">  <span class="attr">security:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">betterPerformance:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>


<h2 id="添加博客热门文章页面"><a href="#添加博客热门文章页面" class="headerlink" title="添加博客热门文章页面"></a>添加博客热门文章页面</h2><ul>
<li>为博客添加文章阅读量排行榜页面。前提是用Leancloud添加了阅读量统计（上文有提到），具体操作步骤如下：</li>
</ul>
<ol>
<li>在站点目录下打开Git Bash，新建top页面，即执行以下命令：</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page <span class="string">"top"</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>然后在主题配置文件/themes/next/_config.yml中menu下添加top：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">top:</span> <span class="string">/top/</span> <span class="string">||</span> <span class="string">signal</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>接着在语言翻译文件/themes/next/languages/zh_Hans.yml中加上top的中文翻译：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">menu:</span></span><br><span class="line">  <span class="attr">home:</span> <span class="string">首页</span></span><br><span class="line">  <span class="attr">archives:</span> <span class="string">归档</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="string">分类</span></span><br><span class="line">  <span class="attr">tags:</span> <span class="string">标签</span></span><br><span class="line">  <span class="attr">about:</span> <span class="string">关于</span></span><br><span class="line">  <span class="attr">search:</span> <span class="string">搜索</span></span><br><span class="line">  <span class="attr">schedule:</span> <span class="string">日程表</span></span><br><span class="line">  <span class="attr">sitemap:</span> <span class="string">站点地图</span></span><br><span class="line">  <span class="attr">commonweal:</span> <span class="string">公益404</span></span><br><span class="line">  <span class="attr">top:</span> <span class="string">热门排行</span> <span class="string">/*</span> <span class="string">可以不为</span> <span class="string">热门排行，随便取</span> <span class="string">*/</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>编辑第一步新建页面生成的文件，其中comments为设置该页面是否开启评论，文件位置：hexo/source/top/index.md：</li>
</ol>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: 文章热度排行</span><br><span class="line">comments: false</span><br><span class="line">date: 2019-11-03 14:37:48</span><br><span class="line">type:</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"top"</span> <span class="attr">style</span>=<span class="string">"margin-top:30px;"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//cdn1.lncld.net/static/js/3.0.4/av-min.js"</span>&gt;</span></span><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- &lt;script src="https://cdn1.lncld.net/static/js/av-core-mini-0.6.4.js"&gt;</span></span><span class="xml"><span class="comment">&lt;/script&gt;</span></span> --&gt;</span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span>AV.initialize("app<span class="emphasis">_id", "app_</span>key");<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span></span><br><span class="line"><span class="code">    var time = 0</span></span><br><span class="line"><span class="code">    var title = ""</span></span><br><span class="line"><span class="code">    var url = ""</span></span><br><span class="line"><span class="code">    var query = new AV.Query('Counter');</span></span><br><span class="line"><span class="code">    query.notEqualTo('id', 0);</span></span><br><span class="line"><span class="code">    query.descending('time');</span></span><br><span class="line"><span class="code">    query.limit(1000);</span></span><br><span class="line"><span class="code">    query.find().then(function (todo) &#123;</span></span><br><span class="line"><span class="code">        for (var i = 0; i &lt; 1000; i++) &#123;</span></span><br><span class="line"><span class="code">            var result = todo[i].attributes;</span></span><br><span class="line"><span class="code">            time = result.time;</span></span><br><span class="line"><span class="code">            title = result.title;</span></span><br><span class="line"><span class="code">            url = result.url;</span></span><br><span class="line"><span class="code">            var content = "&lt;p class='my-article-top'&gt;" + "&lt;font color='#a7a7e5'&gt;" + "➤【热度: " + "&lt;/font&gt;" + "&lt;font color='#f1a8ce'&gt;" + time + " ℃】" + "&lt;/font&gt;" + "&lt;a href='" + url + "'&gt;" + title + "&lt;/a&gt;" + "&lt;/p&gt;";</span></span><br><span class="line"><span class="code">            document.getElementById("top").innerHTML += content</span></span><br><span class="line"><span class="code">        &#125;</span></span><br><span class="line"><span class="code">    &#125;, function (error) &#123;</span></span><br><span class="line"><span class="code">        console.log("error");</span></span><br><span class="line"><span class="code">    &#125;);</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span>.post-description &#123;</span><br><span class="line"><span class="code">        display: none;</span></span><br><span class="line"><span class="code">    &#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>必须将里面的里面的 app_id 和 app_key 替换为你的主题配置文件中的值，必须替换里面博客的链接，1000是显示文章的数量，其它可以自己看情况更改。最后，修改样式可以在 custom.styl 中加入自定义代码，不过还有几点需要注意：</p>
</blockquote>
<ul>
<li><p>如果在设置 &gt; 安全中心中，没有将 <a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a> 加入 Web 安全域名，那么本地调试将看不到，可以先将之加入，调试完后删除。</p>
</li>
<li><p>如果你发现文章标题显示不对，这是由于更改过文章标题导致的，在存储 &gt; Counter 双击title修改即可。</p>
</li>
<li><p>如果你的博客使用了 Valine 评论系统，那么可能会有代码冲突问题，解决方法可自行百度</p>
</li>
</ul>
<h2 id="添加字数统计和阅读时长"><a href="#添加字数统计和阅读时长" class="headerlink" title="添加字数统计和阅读时长"></a>添加字数统计和阅读时长</h2><ol>
<li>安装<kbd>hexo-symbols-count-time</kbd></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-symbols-count-time --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>如果安装完报如下提醒，还需安装eslint</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm WARN babel-eslint@10.0.1 requires a peer of eslint@&gt;= 4.12.1 but none is installed. You must install peer dependencies yourself.</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>安装eslint</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install eslint --save</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>修改themes/next/下的_config.yml中如下内容：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>     <span class="comment"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>     <span class="comment"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span>   <span class="comment"># 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                   <span class="comment"># Average Word Length</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>                 <span class="comment"># Words Per Minute（每分钟阅读词数）</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">mins.</span></span><br></pre></td></tr></table></figure>


<h2 id="加入canvas粒子时钟"><a href="#加入canvas粒子时钟" class="headerlink" title="加入canvas粒子时钟"></a>加入canvas粒子时钟</h2><ol>
<li>加入到侧边栏，在hexo/themes/next/layout/_macro/sidebar.swig文件中合适位置加入以下代码：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">""</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">canvas</span> <span class="attr">id</span>=<span class="string">"canvas"</span> <span class="attr">style</span>=<span class="string">"width:60%;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"/js/src/canvas-dance-time.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在 /themes/next/source/js/src 目录下，新建 canvas-dance-time.js 文件，内容如下：</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> WINDOW_WIDTH = <span class="number">820</span>;</span><br><span class="line">    <span class="keyword">var</span> WINDOW_HEIGHT = <span class="number">250</span>;</span><br><span class="line">    <span class="keyword">var</span> RADIUS = <span class="number">7</span>; <span class="comment">//球半径</span></span><br><span class="line">    <span class="keyword">var</span> NUMBER_GAP = <span class="number">10</span>; <span class="comment">//数字之间的间隙</span></span><br><span class="line">    <span class="keyword">var</span> u=<span class="number">0.65</span>; <span class="comment">//碰撞能量损耗系数</span></span><br><span class="line">    <span class="keyword">var</span> context; <span class="comment">//Canvas绘制上下文</span></span><br><span class="line">    <span class="keyword">var</span> balls = []; <span class="comment">//存储彩色的小球</span></span><br><span class="line">    <span class="keyword">const</span> colors = [<span class="string">"#33B5E5"</span>,<span class="string">"#0099CC"</span>,<span class="string">"#AA66CC"</span>,<span class="string">"#9933CC"</span>,<span class="string">"#99CC00"</span>,<span class="string">"#669900"</span>,<span class="string">"#FFBB33"</span>,<span class="string">"#FF8800"</span>,<span class="string">"#FF4444"</span>,<span class="string">"#CC0000"</span>]; <span class="comment">//彩色小球的颜色</span></span><br><span class="line">    <span class="keyword">var</span> currentNums = []; <span class="comment">//屏幕显示的8个字符</span></span><br><span class="line">    <span class="keyword">var</span> digit =</span><br><span class="line">        [</span><br><span class="line">            [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">            ],<span class="comment">//0</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">            ],<span class="comment">//1</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">            ],<span class="comment">//2</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">            ],<span class="comment">//3</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>]</span><br><span class="line">            ],<span class="comment">//4</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">            ],<span class="comment">//5</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">            ],<span class="comment">//6</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">            ],<span class="comment">//7</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>]</span><br><span class="line">            ],<span class="comment">//8</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">            ],<span class="comment">//9</span></span><br><span class="line">            [</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>]</span><br><span class="line">            ]<span class="comment">//:</span></span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drawDatetime</span>(<span class="params">cxt</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> nums = [];</span><br><span class="line"></span><br><span class="line">        context.fillStyle=<span class="string">"#005eac"</span></span><br><span class="line">        <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> offsetX = <span class="number">70</span>, offsetY = <span class="number">30</span>;</span><br><span class="line">        <span class="keyword">var</span> hours = date.getHours();</span><br><span class="line">        <span class="keyword">var</span> num1 = <span class="built_in">Math</span>.floor(hours/<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">var</span> num2 = hours%<span class="number">10</span>;</span><br><span class="line">        nums.push(&#123;<span class="attr">num</span>: num1&#125;);</span><br><span class="line">        nums.push(&#123;<span class="attr">num</span>: num2&#125;);</span><br><span class="line">        nums.push(&#123;<span class="attr">num</span>: <span class="number">10</span>&#125;); <span class="comment">//冒号</span></span><br><span class="line">        <span class="keyword">var</span> minutes = date.getMinutes();</span><br><span class="line">        <span class="keyword">var</span> num1 = <span class="built_in">Math</span>.floor(minutes/<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">var</span> num2 = minutes%<span class="number">10</span>;</span><br><span class="line">        nums.push(&#123;<span class="attr">num</span>: num1&#125;);</span><br><span class="line">        nums.push(&#123;<span class="attr">num</span>: num2&#125;);</span><br><span class="line">        nums.push(&#123;<span class="attr">num</span>: <span class="number">10</span>&#125;); <span class="comment">//冒号</span></span><br><span class="line">        <span class="keyword">var</span> seconds = date.getSeconds();</span><br><span class="line">        <span class="keyword">var</span> num1 = <span class="built_in">Math</span>.floor(seconds/<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">var</span> num2 = seconds%<span class="number">10</span>;</span><br><span class="line">        nums.push(&#123;<span class="attr">num</span>: num1&#125;);</span><br><span class="line">        nums.push(&#123;<span class="attr">num</span>: num2&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x&lt;nums.length;x++)&#123;</span><br><span class="line">            nums[x].offsetX = offsetX;</span><br><span class="line">            offsetX = drawSingleNumber(offsetX,offsetY, nums[x].num,cxt);</span><br><span class="line">            <span class="comment">//两个数字连一块，应该间隔一些距离</span></span><br><span class="line">            <span class="keyword">if</span>(x&lt;nums.length<span class="number">-1</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>((nums[x].num!=<span class="number">10</span>) &amp;&amp;(nums[x+<span class="number">1</span>].num!=<span class="number">10</span>))&#123;</span><br><span class="line">                    offsetX+=NUMBER_GAP;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//说明这是初始化</span></span><br><span class="line">        <span class="keyword">if</span>(currentNums.length ==<span class="number">0</span>)&#123;</span><br><span class="line">            currentNums = nums;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//进行比较</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;currentNums.length;index++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(currentNums[index].num!=nums[index].num)&#123;</span><br><span class="line">                    <span class="comment">//不一样时，添加彩色小球</span></span><br><span class="line">                    addBalls(nums[index]);</span><br><span class="line">                    currentNums[index].num=nums[index].num;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        renderBalls(cxt);</span><br><span class="line">        updateBalls();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">addBalls</span> (<span class="params">item</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num = item.num;</span><br><span class="line">        <span class="keyword">var</span> numMatrix = digit[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> y = <span class="number">0</span>;y&lt;numMatrix.length;y++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x&lt;numMatrix[y].length;x++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(numMatrix[y][x]==<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">var</span> ball=&#123;</span><br><span class="line">                        offsetX:item.offsetX+RADIUS+RADIUS*<span class="number">2</span>*x,</span><br><span class="line">                        offsetY:<span class="number">30</span>+RADIUS+RADIUS*<span class="number">2</span>*y,</span><br><span class="line">                        color:colors[<span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random()*colors.length)],</span><br><span class="line">                        g:<span class="number">1.5</span>+<span class="built_in">Math</span>.random(),</span><br><span class="line">                        vx:<span class="built_in">Math</span>.pow(<span class="number">-1</span>, <span class="built_in">Math</span>.ceil(<span class="built_in">Math</span>.random()*<span class="number">10</span>))*<span class="number">4</span>+<span class="built_in">Math</span>.random(),</span><br><span class="line">                        vy:<span class="number">-5</span></span><br><span class="line">                    &#125;</span><br><span class="line">                    balls.push(ball);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">renderBalls</span>(<span class="params">cxt</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;balls.length;index++)&#123;</span><br><span class="line">            cxt.beginPath();</span><br><span class="line">            cxt.fillStyle=balls[index].color;</span><br><span class="line">            cxt.arc(balls[index].offsetX, balls[index].offsetY, RADIUS, <span class="number">0</span>, <span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">            cxt.fill();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">updateBalls</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> i =<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> index = <span class="number">0</span>;index&lt;balls.length;index++)&#123;</span><br><span class="line">            <span class="keyword">var</span> ball = balls[index];</span><br><span class="line">            ball.offsetX += ball.vx;</span><br><span class="line">            ball.offsetY += ball.vy;</span><br><span class="line">            ball.vy+=ball.g;</span><br><span class="line">            <span class="keyword">if</span>(ball.offsetY &gt; (WINDOW_HEIGHT-RADIUS))&#123;</span><br><span class="line">                ball.offsetY= WINDOW_HEIGHT-RADIUS;</span><br><span class="line">                ball.vy=-ball.vy*u;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ball.offsetX&gt;RADIUS&amp;&amp;ball.offsetX&lt;(WINDOW_WIDTH-RADIUS))&#123;</span><br><span class="line"></span><br><span class="line">                balls[i]=balls[index];</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//去除出边界的球</span></span><br><span class="line">        <span class="keyword">for</span>(;i&lt;balls.length;i++)&#123;</span><br><span class="line">            balls.pop();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">drawSingleNumber</span>(<span class="params">offsetX, offsetY, num, cxt</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> numMatrix = digit[num];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> y = <span class="number">0</span>;y&lt;numMatrix.length;y++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> x = <span class="number">0</span>;x&lt;numMatrix[y].length;x++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(numMatrix[y][x]==<span class="number">1</span>)&#123;</span><br><span class="line">                    cxt.beginPath();</span><br><span class="line">                    cxt.arc(offsetX+RADIUS+RADIUS*<span class="number">2</span>*x,offsetY+RADIUS+RADIUS*<span class="number">2</span>*y,RADIUS,<span class="number">0</span>,<span class="number">2</span>*<span class="built_in">Math</span>.PI);</span><br><span class="line">                    cxt.fill();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cxt.beginPath();</span><br><span class="line">        offsetX += numMatrix[<span class="number">0</span>].length*RADIUS*<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> offsetX;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="built_in">document</span>.getElementById(<span class="string">"canvas"</span>);</span><br><span class="line">    canvas.width=WINDOW_WIDTH;</span><br><span class="line">    canvas.height=WINDOW_HEIGHT;</span><br><span class="line">    context = canvas.getContext(<span class="string">"2d"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//记录当前绘制的时刻</span></span><br><span class="line">    <span class="keyword">var</span> currentDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"></span><br><span class="line">    setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//清空整个Canvas，重新绘制内容</span></span><br><span class="line">        context.clearRect(<span class="number">0</span>, <span class="number">0</span>, context.canvas.width, context.canvas.height);</span><br><span class="line">        drawDatetime(context);</span><br><span class="line">    &#125;, <span class="number">50</span>)</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure>

<h2 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h2><ol>
<li>加入到侧边栏，在hexo/themes/next/layout/_macro/sidebar.swig中合适位置加入以下代码：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"days"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">show_date_time</span><span class="params">()</span></span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.setTimeout(<span class="string">"show_date_time()"</span>, <span class="number">1000</span>);</span></span><br><span class="line"><span class="javascript">    BirthDay=<span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"05/27/2017 15:13:14"</span>);</span></span><br><span class="line"><span class="javascript">    today=<span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line">    timeold=(today.getTime()-BirthDay.getTime());</span><br><span class="line">    sectimeold=timeold/1000</span><br><span class="line"><span class="javascript">    secondsold=<span class="built_in">Math</span>.floor(sectimeold);</span></span><br><span class="line">    msPerDay=24*60*60*1000</span><br><span class="line">    e_daysold=timeold/msPerDay</span><br><span class="line"><span class="javascript">    daysold=<span class="built_in">Math</span>.floor(e_daysold);</span></span><br><span class="line">    e_hrsold=(e_daysold-daysold)*24;</span><br><span class="line"><span class="javascript">    hrsold=setzero(<span class="built_in">Math</span>.floor(e_hrsold));</span></span><br><span class="line">    e_minsold=(e_hrsold-hrsold)*60;</span><br><span class="line"><span class="javascript">    minsold=setzero(<span class="built_in">Math</span>.floor((e_hrsold-hrsold)*<span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">    seconds=setzero(<span class="built_in">Math</span>.floor((e_minsold-minsold)*<span class="number">60</span>));</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'days'</span>).innerHTML=<span class="string">"已运行 "</span>+daysold+<span class="string">" 天 "</span>+hrsold+<span class="string">" 小时 "</span>+minsold+<span class="string">" 分 "</span>+seconds+<span class="string">" 秒"</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">setzero</span><span class="params">(i)</span> </span>&#123;</span></span><br><span class="line">    if (i&lt;10) &#123;</span><br><span class="line"><span class="actionscript">        i=<span class="string">"0"</span> + i</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="keyword">return</span> i;</span></span><br><span class="line">&#125;</span><br><span class="line">show_date_time();</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>加入到页面底部，在themes\next\layout\_partials\footer.swig文件中合适位置加入以下代码：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"timeDate"</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"times"</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span></span><br><span class="line"><span class="actionscript">    <span class="function"><span class="keyword">function</span> <span class="title">createtime</span><span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"09/15/2019 15:13:14"</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间</span></span></span><br><span class="line">        now.setTime(now.getTime()+250);</span><br><span class="line"><span class="javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="built_in">Math</span>.floor(days);</span></span><br><span class="line"><span class="javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="built_in">Math</span>.floor(hours);</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span>(<span class="built_in">String</span>(hnum).length ==<span class="number">1</span> )&#123;hnum = <span class="string">"0"</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum);</span></span><br><span class="line"><span class="javascript">        mnum = <span class="built_in">Math</span>.floor(minutes); <span class="keyword">if</span>(<span class="built_in">String</span>(mnum).length ==<span class="number">1</span> )&#123;mnum = <span class="string">"0"</span> + mnum;&#125;</span></span><br><span class="line">        seconds = (now - grt ) / 1000 - (24 * 60 * 60 * dnum) - (60 * 60 * hnum) - (60 * mnum);</span><br><span class="line"><span class="javascript">        snum = <span class="built_in">Math</span>.round(seconds); <span class="keyword">if</span>(<span class="built_in">String</span>(snum).length ==<span class="number">1</span> )&#123;snum = <span class="string">"0"</span> + snum;&#125;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"timeDate"</span>).innerHTML = <span class="string">"本站已安全运行 "</span>+dnum+<span class="string">" 天 "</span>;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.getElementById(<span class="string">"times"</span>).innerHTML = hnum + <span class="string">" 小时 "</span> + mnum + <span class="string">" 分 "</span> + snum + <span class="string">" 秒"</span>;</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">setInterval(<span class="string">"createtime()"</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="添加板娘live2d模型"><a href="#添加板娘live2d模型" class="headerlink" title="添加板娘live2d模型"></a>添加板娘live2d模型</h2><blockquote>
<p>板娘<a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">原生使用文档</a> ，但是原生的其实不是很好用，这里我推荐一个只需要引入一个js文件就能实现看板娘的方法，这个作者对Live2d模型进行了深度优化，可以根据鼠标放置和点击内容的不同进行一定的提示信息，并且代码中设置了一年中特殊节日的祝福语，具体设置方法如下：</p>
</blockquote>
<ol>
<li><p>去<a href="https://github.com/stevenjoezhang/live2d-widget" target="_blank" rel="noopener">live2d-widget</a>下载源代码并解压到 themes/next/source/lib/ 下；</p>
</li>
<li><p>然后打开下载文件中的 autoload.js 文件，修改以下代码：</p>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//const live2d_path = "https://cdn.jsdelivr.net/gh/stevenjoezhang/live2d-widget/";</span></span><br><span class="line"><span class="keyword">const</span> live2d_path = <span class="string">"/lib/live2d-widget/"</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>上面那个地址表示在本地引用，然后打开 themes/next/layout/_layout.swig 文件，在其中引入 js 文件如下：</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/lib/live2d-widget/autoload.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>打开主题配置文件 themes/next/_config.xml 文件，在其中末尾添加：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span>  <span class="comment"># 设置看板娘开关</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>最后，想修改看板娘大小、位置、格式、文本内容等，可查看并修改 <kbd>waifu-tips.js</kbd>、<kbd>waifu-tips.json</kbd> 和 <kbd>waifu.css</kbd> 三个文件。</li>
</ol>
<h2 id="添加Fork-me-on-GitHub"><a href="#添加Fork-me-on-GitHub" class="headerlink" title="添加Fork me on GitHub"></a>添加Fork me on GitHub</h2><ol>
<li>第一种方法：next自带，在主题配置文件中搜索github_banner，注意要将yourname改为自己的：</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/yourname</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>第二种：有多种样式供选择，具体方法如下：</li>
</ol>
<ul>
<li><p>去网址<a href="https://github.com/blog/273-github-ribbons" target="_blank" rel="noopener">https://github.com/blog/273-github-ribbons</a> 挑选自己喜欢的样式，并复制代码，添加到themes\next\layout\_layout.swig的body标签内；</p>
</li>
<li><p>把里面的url换成自己的，即复制的代码中的&lt;a href=”<a href="https://github.com/you&quot;&gt;；" target="_blank" rel="noopener">https://github.com/you&quot;&gt;；</a></p>
</li>
<li><p>在代码里添加style=”float:right”或style=”float:left”来设置标签在页面中的位置：</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">itemscope</span> <span class="attr">itemtype</span>=<span class="string">"http://schema.org/WebPage"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container&#123;%- if theme.motion.enable %&#125; use-motion&#123;%- endif %&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"headband"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!-- 以下为复制过来的代码 --&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"https://github.com/jrbw0910"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">"149"</span> <span class="attr">height</span>=<span class="string">"149"</span> <span class="attr">src</span>=<span class="string">"https://github.blog/wp-content/uploads/2008/12/forkme_right_darkblue_121621.png?resize=149%2C149"</span> <span class="attr">class</span>=<span class="string">"attachment-full size-full"</span> <span class="attr">style</span>=<span class="string">"float:right"</span> <span class="attr">alt</span>=<span class="string">"Fork me on GitHub"</span> <span class="attr">data-recalc-dims</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="订阅微信公众号"><a href="#订阅微信公众号" class="headerlink" title="订阅微信公众号"></a>订阅微信公众号</h2><ul>
<li><p>此特性在版本 5.0.1 中引入，要使用此功能请确保所使用的 NexT 版本在此之后。</p>
</li>
<li><p>在每篇文章的末尾显示微信公众号二维码，扫一扫，轻松订阅博客。</p>
</li>
<li><p>在微信公众号平台下载您的二维码，并将它存放于博客source/uploads/目录下。</p>
</li>
<li><p>然后编辑 主题配置文件，如下：</p>
</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Wechat Subscriber</span></span><br><span class="line"><span class="attr">wechat_subscriber:</span></span><br><span class="line">  <span class="attr">enabled:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">qcode:</span> <span class="string">/uploads/wechat-qcode.jpg</span></span><br><span class="line">  <span class="attr">description:</span> <span class="string">欢迎您扫一扫上面的微信公众号，订阅我的博客！</span></span><br></pre></td></tr></table></figure>


<h2 id="添加打赏功能"><a href="#添加打赏功能" class="headerlink" title="添加打赏功能"></a>添加打赏功能</h2><ul>
<li>在themes/next/_config.yml中搜索reward，修改内容，并在指定路径下放置自己的支付二维码。</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span>                   <span class="comment"># 动画</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">感谢您的支持！</span></span><br><span class="line"></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/wechatpay.jpg</span>  <span class="comment"># 微信</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/alipay.jpg</span>        <span class="comment"># 支付宝</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png     # 比特币</span></span><br></pre></td></tr></table></figure>

<h2 id="文末添加版权声明"><a href="#文末添加版权声明" class="headerlink" title="文末添加版权声明"></a>文末添加版权声明</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span>  <span class="comment"># 将false改为true即可显示版权信息</span></span><br><span class="line">  <span class="attr">language:</span></span><br></pre></td></tr></table></figure>


<h1 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作"></a>常用操作</h1><ol>
<li>init：新建一个网站。如果没有设置 folder ，Hexo 默认在目前的文件夹建立网站。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init [folder]</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>new</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>[layout]可以为以下三种：</li>
</ul>
<table>
<thead>
<tr>
<th>参数名</th>
<th>功能</th>
<th>文章路径</th>
</tr>
</thead>
<tbody><tr>
<td>post</td>
<td>新建博文</td>
<td>source/_posts</td>
</tr>
<tr>
<td>page</td>
<td>新建页面（如404，分类）</td>
<td>source</td>
</tr>
<tr>
<td>draft</td>
<td>草稿</td>
<td>source/_drafts</td>
</tr>
</tbody></table>
<ul>
<li><p>如果标题包含空格的话，请使用引号括起来。</p>
</li>
<li><p>title 不是博文标题，是博文markdown文件的名字，也是博文链接的后缀（如<a href="https://www.simon96.online/2018/10/12/hexo-tutorial/中的hexo-tutorial）" target="_blank" rel="noopener">https://www.simon96.online/2018/10/12/hexo-tutorial/中的hexo-tutorial）</a></p>
</li>
</ul>
<ol start="3">
<li>generate：生成静态文件。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>


<ol start="4">
<li>publish：发表草稿。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish [layout] &lt;filename&gt;</span><br></pre></td></tr></table></figure>


<ol start="5">
<li>server：启动服务器。默认情况下，访问网址为： <a href="http://localhost:4000/。" target="_blank" rel="noopener">http://localhost:4000/。</a></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>


<ol start="6">
<li>deploy：部署网站。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>


<ol start="7">
<li>clean：清除缓存文件 (db.json) 和已生成的静态文件 (public)。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br></pre></td></tr></table></figure>

<ul>
<li>在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令。</li>
</ul>
<ol start="8">
<li>version：显示 Hexo 版本。</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo version</span><br></pre></td></tr></table></figure>

<ol start="9">
<li>默认可以使用的Front-matter（就是博文最上方以 — 分隔的那部分）：</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody><tr>
<td>layout</td>
<td>布局</td>
<td></td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
<td></td>
</tr>
<tr>
<td>description</td>
<td>文章描述</td>
<td></td>
</tr>
<tr>
<td>password</td>
<td>文章密码</td>
<td></td>
</tr>
<tr>
<td>keywords</td>
<td>文章关键字</td>
<td></td>
</tr>
<tr>
<td>comments</td>
<td>设置是否开启评论</td>
<td>true</td>
</tr>
<tr>
<td>tags</td>
<td>标签（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>categories</td>
<td>分类（不适用于分页）</td>
<td></td>
</tr>
<tr>
<td>permalink</td>
<td>覆盖文章网址</td>
<td></td>
</tr>
<tr>
<td>date</td>
<td>建立日期</td>
<td>文件建立日期</td>
</tr>
<tr>
<td>updated</td>
<td>更新日期</td>
<td>文件更新日期</td>
</tr>
</tbody></table>
<hr>
<p><strong>参考：</strong></p>
<ul>
<li><p><a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo-文档</a></p>
</li>
<li><p><a href="http://theme-next.iissnan.com/theme-settings.html" target="_blank" rel="noopener">NexT-使用文档</a></p>
</li>
<li><p><a href="https://hasaik.com/posts/ab21860c.html" target="_blank" rel="noopener">Hexo博客+Next主题深度优化与定制</a></p>
</li>
<li><p><a href="https://blog.csdn.net/weixin_39345384/article/details/80785373" target="_blank" rel="noopener">Hexo框架下用NexT(v7.0+)主题美化博客</a></p>
</li>
<li><p><a href="https://www.simon96.online/2018/10/12/hexo-tutorial/" target="_blank" rel="noopener">【持续更新】最全Hexo博客搭建+主题优化+插件配置+常用操作+错误分析</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>GitHub</tag>
      </tags>
  </entry>
  <entry>
    <title>Python学习(小甲鱼)</title>
    <url>/posts/d8fb208b.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img-blog.csdnimg.cn/20200712183020633.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<a id="more"></a>

<ul>
<li><a href="https://blog.csdn.net/qq_38970783" target="_blank" rel="noopener">Python 小甲鱼</a></li>
<li><a href="https://jrbcode.github.io/htmlAnimation">HTML 动画</a></li>
</ul>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中的匿名内部类及Lambda表达式</title>
    <url>/posts/3bccc17d.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img-blog.csdnimg.cn/20200213121801641.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<a id="more"></a>

<h1 id="一、匿名内部类"><a href="#一、匿名内部类" class="headerlink" title="一、匿名内部类"></a>一、匿名内部类</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>匿名内部类没有名字，其定义格式如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> 父类构造器（参数列表）|实现接口（）  </span><br><span class="line">    &#123;  </span><br><span class="line">     <span class="comment">//匿名内部类的类体部分  </span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>如下所示为一个典型的常用内部类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> View.OnClickListener()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br></pre></td></tr></table></figure>
<p>匿名内部类适合那些只需要使用一次的类，比如在对按钮等进行事件监听的时候会用到，但是上面例子中的OnClickListener是一个接口，对接口进行new显然是错误的。<br>下面来还原一个完整的匿名内部类应该就很清楚了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"eat something"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Child();</span><br><span class="line">        p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Person是一个抽象类，Child继承这个类成为一个子类，main函数里实例化这个类，其中我们需要在匿名内部类中隐藏Child这个类，如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Person p = <span class="keyword">new</span> Person() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"eat something"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        p.eat();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们可以看到，这样相当于在实例化的时候直接重写了Child这个类，这就是匿名内部类。</p>
<hr>
<p>必须继承一个父类或者实现一个接口，没有class关键字，直接使用new生成一个对象的引用。如下所示：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Bird</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">fly</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(Bird bird)</span></span>&#123;</span><br><span class="line">        System.out.println(bird.getName() + <span class="string">"能够飞 "</span> + bird.fly() + <span class="string">"米"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Test test = <span class="keyword">new</span> Test();</span><br><span class="line">        test.test(<span class="keyword">new</span> Bird() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">fly</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="number">10000</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">"大雁"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">------------------</span><br><span class="line">Output：</span><br><span class="line">大雁能够飞 <span class="number">10000</span>米</span><br></pre></td></tr></table></figure>
<p>test方法接收一个Bird类型参数，但是我们都知道一个抽象类是不能进行实例化的，也就是直接new，所以我们必须要有一个实现类才可以进行new操作，但是由于它是一个抽象类，所以通过匿名内部类创建一个Bird实例。又因为匿名内部类不能是抽象类，所以我们必须要实现抽象父类或者接口里的所有抽象方法才行。</p>
<hr>
<h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol>
<li>使用匿名内部类时，我们必须是继承一个类或者实现一个接口，但是两者不可兼得，同时也只能继承一个类或者实现一个接口。</li>
<li>匿名内部类中是不能定义构造函数的。</li>
<li>匿名内部类中不能存在任何的静态成员变量和静态方法。</li>
<li>匿名内部类为局部内部类，所以局部内部类的所有限制同样对匿名内部类生效。</li>
<li>匿名内部类不能是抽象的，它必须要实现继承的类或者实现的接口的所有抽象方法。</li>
</ol>
<hr>
<h2 id="匿名内部类的初始化"><a href="#匿名内部类的初始化" class="headerlink" title="匿名内部类的初始化"></a>匿名内部类的初始化</h2><p>它没有构造函数，name怎么进行相应初始化呢？<br>使用构造代码块进行初始化，可以达到一个构造器的效果。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> InnerClass <span class="title">getInnerClass</span><span class="params">(<span class="keyword">final</span> <span class="keyword">int</span> age,<span class="keyword">final</span> String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InnerClass() &#123;</span><br><span class="line">            <span class="keyword">int</span> age_ ;</span><br><span class="line">            String name_;</span><br><span class="line">            <span class="comment">//构造代码块完成初始化工作</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="number">0</span> &lt; age &amp;&amp; age &lt; <span class="number">200</span>)&#123;</span><br><span class="line">                    age_ = age;</span><br><span class="line">                    name_ = name;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> name_;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> age_;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        OutClass out = <span class="keyword">new</span> OutClass();</span><br><span class="line">        </span><br><span class="line">        InnerClass inner_1 = out.getInnerClass(<span class="number">201</span>, <span class="string">"chenssy"</span>);</span><br><span class="line">        System.out.println(inner_1.getName());</span><br><span class="line">        </span><br><span class="line">        InnerClass inner_2 = out.getInnerClass(<span class="number">23</span>, <span class="string">"chenssy"</span>);</span><br><span class="line">        System.out.println(inner_2.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="补充：Java中的代码块"><a href="#补充：Java中的代码块" class="headerlink" title="补充：Java中的代码块"></a>补充：Java中的代码块</h2><p>代码块就是用{}包起来的代码，进行封装，形成一个独立的数据体，用于实现特定的算法。代码块不能单独运行，必须要有一个运行主体。<br>Java的代码块主要分为四种、</p>
<ol>
<li>普通代码块<br>普通代码块是不能够单独存在的，它必须要紧跟在方法名后面。同时也必须要使用方法名调用它。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>静态代码块<br>想到静态我们就会想到static，静态代码块就是用static修饰的用{}括起来的代码段，它的主要目的就是对静态属性进行初始化。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>同步代码块<br>使用 synchronized 关键字修饰，并使用“{}”括起来的代码片段，它表示同一时间只能有一个线程进入到该方法块中，是一种多线程保护机制。</li>
<li>构造代码块<br>在类中直接定义没有任何修饰符、前缀、后缀的代码块即为构造代码块。我们明白一个类必须至少有一个构造函数，构造函数在生成对象时被调用。构造代码块和构造函数一样同样是在生成一个对象时被调用。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造代码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"执行构造代码块..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行无参构造函数..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行有参构造函数..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面定义了一个非常简单的类，该类包含无参构造函数、有参构造函数以及构造代码块，同时在上面也提过代码块是没有独立运行的能力，他必须要有一个可以承载的载体，那么编译器会如何来处理构造代码块呢？编译器会将代码块按照他们的顺序(假如有多个代码块)插入到所有的构造函数的最前端，这样就能保证不管调用哪个构造函数都会执行所有的构造代码块。上面代码等同于如下形式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 无参构造函数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行构造代码块..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"执行无参构造函数..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有参构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id  id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Test</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"执行构造代码块..."</span>);</span><br><span class="line">        System.out.println(<span class="string">"执行有参构造函数..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>运行结果如下</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Test();</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        <span class="keyword">new</span> Test(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">------------</span><br><span class="line">Output:</span><br><span class="line">执行构造代码块...</span><br><span class="line">执行无参构造函数...</span><br><span class="line">----------------</span><br><span class="line">执行构造代码块...</span><br><span class="line">执行有参构造函数...</span><br></pre></td></tr></table></figure>
<p>从上面的运行结果可以看出在new一个对象的时候总是先执行构造代码，再执行构造函数，但是有一点需要注意构造代码不是在构造函数之前运行的，它是依托构造函数执行的。<br>各个代码块执行顺序为：静态代码块 &gt; 构造代码块 &gt; 构造函数。</p>
<hr>
<h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><p>“Lambda 表达式”(lambda expression)是一个匿名函数，Lambda表达式基于数学中的λ演算得名，直接对应于其中的lambda抽象(lambda abstraction)，是一个匿名函数，即没有函数名的函数。Lambda表达式可以表示闭包（注意和数学传统意义上的不同）。<br>Java8发布已经有一段时间了，这次发布的改动比较大，很多人将这次改动与Java5的升级相提并论。Java8其中一个很重要的新特性就是lambda表达式，允许我们将行为传到函数中。想想看，在Java8之前我们想要将行为传入函数，仅有的选择就是匿名内部类。<strong>Java8发布以后</strong>，lambda表达式将大量替代匿名内部类的使用，简化代码的同时，更突出了原来匿名内部类中最重要的那部分包含真正逻辑的代码。<br>下面看看一些常用写法：</p>
<hr>
<h2 id="替代匿名内部类"><a href="#替代匿名内部类" class="headerlink" title="替代匿名内部类"></a>替代匿名内部类</h2><p>毫无疑问，lambda表达式用得最多的场合就是替代匿名内部类，而实现Runnable接口是匿名内部类的经典例子。lambda表达式的功能相当强大，用()-&gt;就可以代替整个匿名内部类！<br>这是我们上面刚说的匿名内部类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">oldRunable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"The old runable now is using!"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>下面我们看看怎么用表达式写出来</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(() -&gt; System.out.println(<span class="string">"It's a lambda function!"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">输出结果</span><br><span class="line">The old runable now is using!</span><br><span class="line">It<span class="string">'s a lambda function!</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="使用lambda表达式对集合进行迭代"><a href="#使用lambda表达式对集合进行迭代" class="headerlink" title="使用lambda表达式对集合进行迭代"></a>使用lambda表达式对集合进行迭代</h2><p>Java的集合类是日常开发中经常用到的，甚至说没有哪个java代码中没有使用到集合类…而对集合类最常见的操作就是进行迭代遍历了。<br>虽然Java里没用过foreach，但是我在c#里提过。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">iterTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; languages = Arrays.asList(<span class="string">"java"</span>,<span class="string">"scala"</span>,<span class="string">"python"</span>);</span><br><span class="line">        <span class="comment">//before java8</span></span><br><span class="line">        <span class="keyword">for</span>(String each:languages) &#123;</span><br><span class="line">            System.out.println(each);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//after java8</span></span><br><span class="line">        languages.forEach(x -&gt; System.out.println(x));</span><br><span class="line">        languages.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="用lambda表达式实现map"><a href="#用lambda表达式实现map" class="headerlink" title="用lambda表达式实现map"></a>用lambda表达式实现map</h2><p>至于什么是map可以百度以下。<br>一提到函数式编程，一提到lambda表达式，怎么能不提map…没错，java8肯定也是支持的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mapTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Double&gt; cost = Arrays.asList(<span class="number">10.0</span>, <span class="number">20.0</span>,<span class="number">30.0</span>);</span><br><span class="line">        cost.stream().map(x -&gt; x + x*<span class="number">0.05</span>).forEach(x -&gt; System.out.println(x));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">输出结果</span><br><span class="line"><span class="number">10.5</span></span><br><span class="line"><span class="number">21.0</span></span><br><span class="line"><span class="number">31.5</span></span><br></pre></td></tr></table></figure>
<p>map函数可以说是函数式编程里最重要的一个方法了。map的作用是将一个对象变换为另外一个。在我们的例子中，就是通过map方法将cost增加了0.05倍的大小然后输出。</p>
<hr>
<h2 id="用lambda表达式实现map与reduce"><a href="#用lambda表达式实现map与reduce" class="headerlink" title="用lambda表达式实现map与reduce"></a>用lambda表达式实现map与reduce</h2><p>既然提到了map，又怎能不提到reduce。reduce与map一样，也是函数式编程里最重要的几个方法之一…map的作用是将一个对象变为另外一个，而reduce实现的则是将所有值合并为一个。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mapReduceTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Double&gt; cost = Arrays.asList(<span class="number">10.0</span>, <span class="number">20.0</span>,<span class="number">30.0</span>);</span><br><span class="line">        <span class="keyword">double</span> allCost = cost.stream().map(x -&gt; x+x*<span class="number">0.05</span>).reduce((sum,x) -&gt; sum + x).get();</span><br><span class="line">        System.out.println(allCost);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">输出结果</span><br><span class="line"><span class="number">63.0</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="filter操作"><a href="#filter操作" class="headerlink" title="filter操作"></a>filter操作</h2><p>filter也是我们经常使用的一个操作。在操作集合的时候，经常需要从原始的集合中过滤掉一部分元素。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">filterTest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Double&gt; cost = Arrays.asList(<span class="number">10.0</span>, <span class="number">20.0</span>,<span class="number">30.0</span>,<span class="number">40.0</span>);</span><br><span class="line">        List&lt;Double&gt; filteredCost = cost.stream().filter(x -&gt; x &gt; <span class="number">25.0</span>).collect(Collectors.toList());</span><br><span class="line">        filteredCost.forEach(x -&gt; System.out.println(x));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">输出结果</span><br><span class="line"><span class="number">30.0</span></span><br><span class="line"><span class="number">40.0</span></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="与函数式接口Predicate配合"><a href="#与函数式接口Predicate配合" class="headerlink" title="与函数式接口Predicate配合"></a>与函数式接口Predicate配合</h2><p>除了在语言层面支持函数式编程风格，Java 8也添加了一个包，叫做 java.util.function。它包含了很多类，用来支持Java的函数式编程。其中一个便是Predicate，使用 java.util.function.Predicate 函数式接口以及lambda表达式，可以向API方法添加逻辑，用更少的代码支持更多的动态行为。Predicate接口非常适用于做过滤。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">filterTest</span><span class="params">(List&lt;String&gt; languages, Predicate&lt;String&gt; condition)</span> </span>&#123;</span><br><span class="line">        languages.stream().filter(x -&gt; condition.test(x)).forEach(x -&gt; System.out.println(x + <span class="string">" "</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; languages = Arrays.asList(<span class="string">"Java"</span>,<span class="string">"Python"</span>,<span class="string">"scala"</span>,<span class="string">"Shell"</span>,<span class="string">"R"</span>);</span><br><span class="line">        System.out.println(<span class="string">"Language starts with J: "</span>);</span><br><span class="line">        filterTest(languages,x -&gt; x.startsWith(<span class="string">"J"</span>));</span><br><span class="line">        System.out.println(<span class="string">"\nLanguage ends with a: "</span>);</span><br><span class="line">        filterTest(languages,x -&gt; x.endsWith(<span class="string">"a"</span>));</span><br><span class="line">        System.out.println(<span class="string">"\nAll languages: "</span>);</span><br><span class="line">        filterTest(languages,x -&gt; <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(<span class="string">"\nNo languages: "</span>);</span><br><span class="line">        filterTest(languages,x -&gt; <span class="keyword">false</span>);</span><br><span class="line">        System.out.println(<span class="string">"\nLanguage length bigger three: "</span>);</span><br><span class="line">        filterTest(languages,x -&gt; x.length() &gt; <span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">运行结果</span><br><span class="line">Language starts with J: </span><br><span class="line">Java </span><br><span class="line"></span><br><span class="line">Language ends with a: </span><br><span class="line">Java </span><br><span class="line">scala </span><br><span class="line"></span><br><span class="line">All languages: </span><br><span class="line">Java </span><br><span class="line">Python </span><br><span class="line">scala </span><br><span class="line">Shell </span><br><span class="line">R </span><br><span class="line"></span><br><span class="line">No languages: </span><br><span class="line"></span><br><span class="line">Language length bigger three: </span><br><span class="line">Python </span><br><span class="line">scala </span><br><span class="line">Shell</span><br></pre></td></tr></table></figure>
<p>可以看到，Stream API的过滤方法也接受一个Predicate，这意味着可以将我们定制的 filter() 方法替换成写在里面的内联代码，这也是lambda表达式的魔力。</p>
]]></content>
      <categories>
        <category>学习记录</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Lambda</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/posts/caff8000.html</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="https://img-blog.csdnimg.cn/2020021223384954.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzQxNTY5Mzgz,size_16,color_FFFFFF,t_70" alt=""></p>
<a id="more"></a>

<h2 id="Git-工作区-暂存区-版本库"><a href="#Git-工作区-暂存区-版本库" class="headerlink" title="Git 工作区/暂存区/版本库"></a>Git 工作区/暂存区/版本库</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">"JRBW0910"</span></span><br><span class="line"></span><br><span class="line">git config --global user.email <span class="string">"244085774@qq.com"</span></span><br><span class="line"></span><br><span class="line">git init   把指定目录变成 Git 可以管理的仓库</span><br><span class="line"></span><br><span class="line">git status   查看仓库当前的状态</span><br><span class="line"></span><br><span class="line">git diff   查看具体修改内容</span><br><span class="line"></span><br><span class="line">git add &lt;file&gt;   用如下命令把文件添加到仓库</span><br><span class="line"></span><br><span class="line">git commit -m <span class="string">"&lt;message&gt;"</span>   把文件提交到仓库</span><br><span class="line"></span><br><span class="line">git <span class="built_in">log</span> (--pretty=oneline)   查看提交记录（简略信息）</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD^^   回退到上上个版本</span><br><span class="line"></span><br><span class="line">git reset --hard HEAD~100   回退到前100个版本</span><br><span class="line"></span><br><span class="line">git reset --hard 1094a   回退到版本号为 1094a... 的版本</span><br><span class="line"></span><br><span class="line">git reflog   查看操作记录（可查看回退前的版本号）</span><br><span class="line"></span><br><span class="line">git diff HEAD -- &lt;file&gt;   查看工作区和最新版本的区别</span><br><span class="line"></span><br><span class="line">git checkout -- r&lt;file&gt;   撤销文件在工作区的全部修改</span><br><span class="line"></span><br><span class="line">git reset HEAD &lt;file&gt;   撤销暂存区的修改，放回工作区</span><br><span class="line"></span><br><span class="line">rm &lt;file&gt;/git rm &lt;file&gt;   删除文件并放到暂存区</span><br></pre></td></tr></table></figure>


<h2 id="远程仓库创与推送"><a href="#远程仓库创与推送" class="headerlink" title="远程仓库创与推送"></a>远程仓库创与推送</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git remote add origin git@github.com:JRBW0910/learngit.git    与远程库关联，learngit 为仓库名</span><br><span class="line"></span><br><span class="line">git push (-u) origin master   推送 master 分支到远程库</span><br><span class="line"></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:JRBW0910/learngit.git  克隆</span><br><span class="line"></span><br><span class="line">git remote (-v)   查看远程库信息</span><br><span class="line"></span><br><span class="line">git remote rm origin   删除已有的远程库</span><br></pre></td></tr></table></figure>


<h2 id="创建远程仓库前需注意"><a href="#创建远程仓库前需注意" class="headerlink" title="创建远程仓库前需注意"></a>创建远程仓库前需注意</h2><blockquote>
<p>创建SSH Key。在用户主目录下，查看有没有 .ssh 目录，如果有，再看这个目录下有没有 id_rsa 和 id_rsa.pub 这两个文件，如果存在，可跳过此步骤；若没有，打开Shell（Windows下打开Git Bash），创建SSH Key：$ ssh-keygen -t rsa -C “<a href="mailto:2440857704@qq.com">2440857704@qq.com</a>“  然后一路回车，使用默认值即可，由于这个Key也不是用于军事目的，所以也无需设置密码。（ id_rsa 和 id_rsa.pub两个文件就是 SSH Key 的秘钥对，id_rsa 是私钥，不能泄露，id_rsa.pub 是公钥，可以公开）</p>
</blockquote>
<blockquote>
<p>登陆GitHub，打开 Account settings ， SSH Keys 页面，点 Add SSH Key ，填上任意 Title，在 Key 文本框里粘贴 id_rsa.pub 件的内容即可。</p>
</blockquote>
<ul>
<li>远程仓库推送 -u 参数含义</li>
</ul>
<blockquote>
<p>git push -u origin master    把本地库的所有内容推送到远程库上，由于远程库是空的，我们第一次推送 master 分支时，加上了 -u 参数，Git 不但会把本地的 master 分支内容推送的远程新的 master 分支，还会把本地的 master 分支和远程的 master 分支关联起来，在以后的推送或者拉取时就可以简化命令</p>
</blockquote>
]]></content>
      <categories>
        <category>工具使用</category>
        <category>技术类</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
</search>
